
[RTOS]Queue_send_struct.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005708  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000360  08005818  08005818  00015818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b78  08005b78  000200ac  2**0
                  CONTENTS
  4 .ARM          00000000  08005b78  08005b78  000200ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005b78  08005b78  000200ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b78  08005b78  00015b78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005b7c  08005b7c  00015b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  20000000  08005b80  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002e90  200000ac  08005c2c  000200ac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002f3c  08005c2c  00022f3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e06  00000000  00000000  000200d5  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000294d  00000000  00000000  00033edb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d70  00000000  00000000  00036828  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c48  00000000  00000000  00037598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003e65  00000000  00000000  000381e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e220  00000000  00000000  0003c045  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00074dad  00000000  00000000  0004a265  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bf012  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a8c  00000000  00000000  000bf090  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000ac 	.word	0x200000ac
 800012c:	00000000 	.word	0x00000000
 8000130:	08005800 	.word	0x08005800

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000b0 	.word	0x200000b0
 800014c:	08005800 	.word	0x08005800

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <vSetDeviceData>:
void senderTask(void *argument);
void receiverTask(void *argument);

/* Configure specific device properties */
void vSetDeviceData(DeviceProperties_t *p_device_properties, char *new_sw_version, eWorkingState_t new_working_state)
{
 8000174:	b580      	push	{r7, lr}
 8000176:	b084      	sub	sp, #16
 8000178:	af00      	add	r7, sp, #0
 800017a:	60f8      	str	r0, [r7, #12]
 800017c:	60b9      	str	r1, [r7, #8]
 800017e:	4613      	mov	r3, r2
 8000180:	71fb      	strb	r3, [r7, #7]
  p_device_properties->u8_working_state = new_working_state;
 8000182:	68fb      	ldr	r3, [r7, #12]
 8000184:	79fa      	ldrb	r2, [r7, #7]
 8000186:	711a      	strb	r2, [r3, #4]
  if (!IS_SAME_STRING(new_sw_version, "None"))
 8000188:	4907      	ldr	r1, [pc, #28]	; (80001a8 <vSetDeviceData+0x34>)
 800018a:	68b8      	ldr	r0, [r7, #8]
 800018c:	f7ff ffe0 	bl	8000150 <strcmp>
 8000190:	4603      	mov	r3, r0
 8000192:	2b00      	cmp	r3, #0
 8000194:	d003      	beq.n	800019e <vSetDeviceData+0x2a>
  {
    p_device_properties->pc_sw_version = new_sw_version;
 8000196:	68fb      	ldr	r3, [r7, #12]
 8000198:	68ba      	ldr	r2, [r7, #8]
 800019a:	601a      	str	r2, [r3, #0]
    return;
 800019c:	e000      	b.n	80001a0 <vSetDeviceData+0x2c>
  }
  else
  {
    return;
 800019e:	bf00      	nop
  }
}
 80001a0:	3710      	adds	r7, #16
 80001a2:	46bd      	mov	sp, r7
 80001a4:	bd80      	pop	{r7, pc}
 80001a6:	bf00      	nop
 80001a8:	08005838 	.word	0x08005838

080001ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80001ae:	b08f      	sub	sp, #60	; 0x3c
 80001b0:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b2:	f000 ffbb 	bl	800112c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001b6:	f000 f9db 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001ba:	f000 fa49 	bl	8000650 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001be:	f000 fa1d 	bl	80005fc <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_11, 1);
 80001c2:	2201      	movs	r2, #1
 80001c4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80001c8:	4898      	ldr	r0, [pc, #608]	; (800042c <main+0x280>)
 80001ca:	f001 fa4f 	bl	800166c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_12, 1);
 80001ce:	2201      	movs	r2, #1
 80001d0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80001d4:	4895      	ldr	r0, [pc, #596]	; (800042c <main+0x280>)
 80001d6:	f001 fa49 	bl	800166c <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80001da:	f002 f89d 	bl	8002318 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  queue_handle = osMessageQueueNew(QUEUE_SIZE, sizeof(DeviceInfo_t), NULL);
 80001de:	2200      	movs	r2, #0
 80001e0:	2108      	movs	r1, #8
 80001e2:	2007      	movs	r0, #7
 80001e4:	f002 f9d6 	bl	8002594 <osMessageQueueNew>
 80001e8:	4602      	mov	r2, r0
 80001ea:	4b91      	ldr	r3, [pc, #580]	; (8000430 <main+0x284>)
 80001ec:	601a      	str	r2, [r3, #0]
  if (queue_handle == NULL)
 80001ee:	4b90      	ldr	r3, [pc, #576]	; (8000430 <main+0x284>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d116      	bne.n	8000224 <main+0x78>
  {
    error_count++;
 80001f6:	4b8f      	ldr	r3, [pc, #572]	; (8000434 <main+0x288>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	3301      	adds	r3, #1
 80001fc:	4a8d      	ldr	r2, [pc, #564]	; (8000434 <main+0x288>)
 80001fe:	6013      	str	r3, [r2, #0]
    PRINTF("Failed to create new queue\r\n");
 8000200:	4e8d      	ldr	r6, [pc, #564]	; (8000438 <main+0x28c>)
 8000202:	4b8e      	ldr	r3, [pc, #568]	; (800043c <main+0x290>)
 8000204:	930c      	str	r3, [sp, #48]	; 0x30
 8000206:	466d      	mov	r5, sp
 8000208:	f106 0410 	add.w	r4, r6, #16
 800020c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800020e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000210:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000212:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000214:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000218:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800021c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000220:	f000 fe00 	bl	8000e24 <vUARTSend>
  }
  /* USER CODE END RTOS_QUEUES */
  /* creation of blinkLed1 */
  blinkLed1Handle = osThreadNew(blinkTask, NULL, &blinkLed1_attributes);
 8000224:	4a86      	ldr	r2, [pc, #536]	; (8000440 <main+0x294>)
 8000226:	2100      	movs	r1, #0
 8000228:	4886      	ldr	r0, [pc, #536]	; (8000444 <main+0x298>)
 800022a:	f002 f8db 	bl	80023e4 <osThreadNew>
 800022e:	4602      	mov	r2, r0
 8000230:	4b85      	ldr	r3, [pc, #532]	; (8000448 <main+0x29c>)
 8000232:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* creation of Sender task*/

  SenderHandle1 = osThreadNew(senderTask, (void *)t_device_info, &Sender_attributes);
 8000234:	4a85      	ldr	r2, [pc, #532]	; (800044c <main+0x2a0>)
 8000236:	4986      	ldr	r1, [pc, #536]	; (8000450 <main+0x2a4>)
 8000238:	4886      	ldr	r0, [pc, #536]	; (8000454 <main+0x2a8>)
 800023a:	f002 f8d3 	bl	80023e4 <osThreadNew>
 800023e:	4602      	mov	r2, r0
 8000240:	4b85      	ldr	r3, [pc, #532]	; (8000458 <main+0x2ac>)
 8000242:	601a      	str	r2, [r3, #0]
  SenderHandle2 = osThreadNew(senderTask, (void *)(t_device_info + 1), &Sender_attributes);
 8000244:	4b85      	ldr	r3, [pc, #532]	; (800045c <main+0x2b0>)
 8000246:	4a81      	ldr	r2, [pc, #516]	; (800044c <main+0x2a0>)
 8000248:	4619      	mov	r1, r3
 800024a:	4882      	ldr	r0, [pc, #520]	; (8000454 <main+0x2a8>)
 800024c:	f002 f8ca 	bl	80023e4 <osThreadNew>
 8000250:	4602      	mov	r2, r0
 8000252:	4b83      	ldr	r3, [pc, #524]	; (8000460 <main+0x2b4>)
 8000254:	601a      	str	r2, [r3, #0]
  SenderHandle3 = osThreadNew(senderTask, (void *)(t_device_info + 2), &Sender_attributes);
 8000256:	4b83      	ldr	r3, [pc, #524]	; (8000464 <main+0x2b8>)
 8000258:	4a7c      	ldr	r2, [pc, #496]	; (800044c <main+0x2a0>)
 800025a:	4619      	mov	r1, r3
 800025c:	487d      	ldr	r0, [pc, #500]	; (8000454 <main+0x2a8>)
 800025e:	f002 f8c1 	bl	80023e4 <osThreadNew>
 8000262:	4602      	mov	r2, r0
 8000264:	4b80      	ldr	r3, [pc, #512]	; (8000468 <main+0x2bc>)
 8000266:	601a      	str	r2, [r3, #0]
  SenderHandle4 = osThreadNew(senderTask, (void *)(t_device_info + 3), &Sender_attributes);
 8000268:	4b80      	ldr	r3, [pc, #512]	; (800046c <main+0x2c0>)
 800026a:	4a78      	ldr	r2, [pc, #480]	; (800044c <main+0x2a0>)
 800026c:	4619      	mov	r1, r3
 800026e:	4879      	ldr	r0, [pc, #484]	; (8000454 <main+0x2a8>)
 8000270:	f002 f8b8 	bl	80023e4 <osThreadNew>
 8000274:	4602      	mov	r2, r0
 8000276:	4b7e      	ldr	r3, [pc, #504]	; (8000470 <main+0x2c4>)
 8000278:	601a      	str	r2, [r3, #0]
  SenderHandle5 = osThreadNew(senderTask, (void *)(t_device_info + 4), &Sender_attributes);
 800027a:	4b7e      	ldr	r3, [pc, #504]	; (8000474 <main+0x2c8>)
 800027c:	4a73      	ldr	r2, [pc, #460]	; (800044c <main+0x2a0>)
 800027e:	4619      	mov	r1, r3
 8000280:	4874      	ldr	r0, [pc, #464]	; (8000454 <main+0x2a8>)
 8000282:	f002 f8af 	bl	80023e4 <osThreadNew>
 8000286:	4602      	mov	r2, r0
 8000288:	4b7b      	ldr	r3, [pc, #492]	; (8000478 <main+0x2cc>)
 800028a:	601a      	str	r2, [r3, #0]
  SenderHandle6 = osThreadNew(senderTask, (void *)(t_device_info + 5), &Sender_attributes);
 800028c:	4b7b      	ldr	r3, [pc, #492]	; (800047c <main+0x2d0>)
 800028e:	4a6f      	ldr	r2, [pc, #444]	; (800044c <main+0x2a0>)
 8000290:	4619      	mov	r1, r3
 8000292:	4870      	ldr	r0, [pc, #448]	; (8000454 <main+0x2a8>)
 8000294:	f002 f8a6 	bl	80023e4 <osThreadNew>
 8000298:	4602      	mov	r2, r0
 800029a:	4b79      	ldr	r3, [pc, #484]	; (8000480 <main+0x2d4>)
 800029c:	601a      	str	r2, [r3, #0]
  GatewayHandle = osThreadNew(senderTask, (void *)(t_device_info + 6), &Sender_attributes);
 800029e:	4b79      	ldr	r3, [pc, #484]	; (8000484 <main+0x2d8>)
 80002a0:	4a6a      	ldr	r2, [pc, #424]	; (800044c <main+0x2a0>)
 80002a2:	4619      	mov	r1, r3
 80002a4:	486b      	ldr	r0, [pc, #428]	; (8000454 <main+0x2a8>)
 80002a6:	f002 f89d 	bl	80023e4 <osThreadNew>
 80002aa:	4602      	mov	r2, r0
 80002ac:	4b76      	ldr	r3, [pc, #472]	; (8000488 <main+0x2dc>)
 80002ae:	601a      	str	r2, [r3, #0]

  //Check if all tasks are created successful or not
  if ((SenderHandle1 == NULL) || (SenderHandle2 == NULL) || (SenderHandle3 == NULL) || (SenderHandle4 == NULL) || (SenderHandle5 == NULL) || (SenderHandle6 == NULL) || (GatewayHandle == NULL))
 80002b0:	4b69      	ldr	r3, [pc, #420]	; (8000458 <main+0x2ac>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d017      	beq.n	80002e8 <main+0x13c>
 80002b8:	4b69      	ldr	r3, [pc, #420]	; (8000460 <main+0x2b4>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d013      	beq.n	80002e8 <main+0x13c>
 80002c0:	4b69      	ldr	r3, [pc, #420]	; (8000468 <main+0x2bc>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d00f      	beq.n	80002e8 <main+0x13c>
 80002c8:	4b69      	ldr	r3, [pc, #420]	; (8000470 <main+0x2c4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d00b      	beq.n	80002e8 <main+0x13c>
 80002d0:	4b69      	ldr	r3, [pc, #420]	; (8000478 <main+0x2cc>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d007      	beq.n	80002e8 <main+0x13c>
 80002d8:	4b69      	ldr	r3, [pc, #420]	; (8000480 <main+0x2d4>)
 80002da:	681b      	ldr	r3, [r3, #0]
 80002dc:	2b00      	cmp	r3, #0
 80002de:	d003      	beq.n	80002e8 <main+0x13c>
 80002e0:	4b69      	ldr	r3, [pc, #420]	; (8000488 <main+0x2dc>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d116      	bne.n	8000316 <main+0x16a>
  {
    PRINTF("Failed to create senderTask\r\n");
 80002e8:	4e53      	ldr	r6, [pc, #332]	; (8000438 <main+0x28c>)
 80002ea:	4b68      	ldr	r3, [pc, #416]	; (800048c <main+0x2e0>)
 80002ec:	930c      	str	r3, [sp, #48]	; 0x30
 80002ee:	466d      	mov	r5, sp
 80002f0:	f106 0410 	add.w	r4, r6, #16
 80002f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80002fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80002fc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000300:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000304:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000308:	f000 fd8c 	bl	8000e24 <vUARTSend>
    error_count++;
 800030c:	4b49      	ldr	r3, [pc, #292]	; (8000434 <main+0x288>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	3301      	adds	r3, #1
 8000312:	4a48      	ldr	r2, [pc, #288]	; (8000434 <main+0x288>)
 8000314:	6013      	str	r3, [r2, #0]
  }

  /* creation of Receiver task */
  ReceiverHandle = osThreadNew(receiverTask, NULL, &Receiver_attributes);
 8000316:	4a5e      	ldr	r2, [pc, #376]	; (8000490 <main+0x2e4>)
 8000318:	2100      	movs	r1, #0
 800031a:	485e      	ldr	r0, [pc, #376]	; (8000494 <main+0x2e8>)
 800031c:	f002 f862 	bl	80023e4 <osThreadNew>
 8000320:	4602      	mov	r2, r0
 8000322:	4b5d      	ldr	r3, [pc, #372]	; (8000498 <main+0x2ec>)
 8000324:	601a      	str	r2, [r3, #0]
  if (ReceiverHandle == NULL)
 8000326:	4b5c      	ldr	r3, [pc, #368]	; (8000498 <main+0x2ec>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	2b00      	cmp	r3, #0
 800032c:	d116      	bne.n	800035c <main+0x1b0>
  {
    PRINTF("Failed to create receiverTask");
 800032e:	4e42      	ldr	r6, [pc, #264]	; (8000438 <main+0x28c>)
 8000330:	4b5a      	ldr	r3, [pc, #360]	; (800049c <main+0x2f0>)
 8000332:	930c      	str	r3, [sp, #48]	; 0x30
 8000334:	466d      	mov	r5, sp
 8000336:	f106 0410 	add.w	r4, r6, #16
 800033a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800033c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800033e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000340:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000342:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000346:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800034a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800034e:	f000 fd69 	bl	8000e24 <vUARTSend>
    error_count++;
 8000352:	4b38      	ldr	r3, [pc, #224]	; (8000434 <main+0x288>)
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	3301      	adds	r3, #1
 8000358:	4a36      	ldr	r2, [pc, #216]	; (8000434 <main+0x288>)
 800035a:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  //If any error is counted, Kernel will not start
  if (error_count != 0)
 800035c:	4b35      	ldr	r3, [pc, #212]	; (8000434 <main+0x288>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	2b00      	cmp	r3, #0
 8000362:	f000 80a7 	beq.w	80004b4 <main+0x308>
  {
    PRINTF("Failed to start Kernel\r\n");
 8000366:	4e34      	ldr	r6, [pc, #208]	; (8000438 <main+0x28c>)
 8000368:	4b4d      	ldr	r3, [pc, #308]	; (80004a0 <main+0x2f4>)
 800036a:	930c      	str	r3, [sp, #48]	; 0x30
 800036c:	466d      	mov	r5, sp
 800036e:	f106 0410 	add.w	r4, r6, #16
 8000372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800037a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800037e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000382:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000386:	f000 fd4d 	bl	8000e24 <vUARTSend>
    PRINT_VAR(error_count);
 800038a:	4e2b      	ldr	r6, [pc, #172]	; (8000438 <main+0x28c>)
 800038c:	4b45      	ldr	r3, [pc, #276]	; (80004a4 <main+0x2f8>)
 800038e:	930c      	str	r3, [sp, #48]	; 0x30
 8000390:	466d      	mov	r5, sp
 8000392:	f106 0410 	add.w	r4, r6, #16
 8000396:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000398:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800039a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800039c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800039e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003a2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003a6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003aa:	f000 fd3b 	bl	8000e24 <vUARTSend>
 80003ae:	4e22      	ldr	r6, [pc, #136]	; (8000438 <main+0x28c>)
 80003b0:	4b3d      	ldr	r3, [pc, #244]	; (80004a8 <main+0x2fc>)
 80003b2:	930c      	str	r3, [sp, #48]	; 0x30
 80003b4:	466d      	mov	r5, sp
 80003b6:	f106 0410 	add.w	r4, r6, #16
 80003ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80003ce:	f000 fd29 	bl	8000e24 <vUARTSend>
 80003d2:	4b18      	ldr	r3, [pc, #96]	; (8000434 <main+0x288>)
 80003d4:	681b      	ldr	r3, [r3, #0]
 80003d6:	220a      	movs	r2, #10
 80003d8:	4934      	ldr	r1, [pc, #208]	; (80004ac <main+0x300>)
 80003da:	4618      	mov	r0, r3
 80003dc:	f004 fd78 	bl	8004ed0 <itoa>
 80003e0:	4e15      	ldr	r6, [pc, #84]	; (8000438 <main+0x28c>)
 80003e2:	4b32      	ldr	r3, [pc, #200]	; (80004ac <main+0x300>)
 80003e4:	930c      	str	r3, [sp, #48]	; 0x30
 80003e6:	466d      	mov	r5, sp
 80003e8:	f106 0410 	add.w	r4, r6, #16
 80003ec:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003ee:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80003f2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80003f4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80003f8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80003fc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000400:	f000 fd10 	bl	8000e24 <vUARTSend>
 8000404:	4e0c      	ldr	r6, [pc, #48]	; (8000438 <main+0x28c>)
 8000406:	4b2a      	ldr	r3, [pc, #168]	; (80004b0 <main+0x304>)
 8000408:	930c      	str	r3, [sp, #48]	; 0x30
 800040a:	466d      	mov	r5, sp
 800040c:	f106 0410 	add.w	r4, r6, #16
 8000410:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000412:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000414:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000416:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000418:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800041c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000420:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000424:	f000 fcfe 	bl	8000e24 <vUARTSend>
 8000428:	e081      	b.n	800052e <main+0x382>
 800042a:	bf00      	nop
 800042c:	40010800 	.word	0x40010800
 8000430:	200000cc 	.word	0x200000cc
 8000434:	200000c8 	.word	0x200000c8
 8000438:	20002e78 	.word	0x20002e78
 800043c:	08005840 	.word	0x08005840
 8000440:	08005a68 	.word	0x08005a68
 8000444:	08000df9 	.word	0x08000df9
 8000448:	20002e60 	.word	0x20002e60
 800044c:	08005a8c 	.word	0x08005a8c
 8000450:	20000000 	.word	0x20000000
 8000454:	08000715 	.word	0x08000715
 8000458:	20002e74 	.word	0x20002e74
 800045c:	20000008 	.word	0x20000008
 8000460:	20002e50 	.word	0x20002e50
 8000464:	20000010 	.word	0x20000010
 8000468:	20002e70 	.word	0x20002e70
 800046c:	20000018 	.word	0x20000018
 8000470:	20002e6c 	.word	0x20002e6c
 8000474:	20000020 	.word	0x20000020
 8000478:	20002e64 	.word	0x20002e64
 800047c:	20000028 	.word	0x20000028
 8000480:	20002e4c 	.word	0x20002e4c
 8000484:	20000030 	.word	0x20000030
 8000488:	20002eb8 	.word	0x20002eb8
 800048c:	08005860 	.word	0x08005860
 8000490:	08005ab0 	.word	0x08005ab0
 8000494:	08000a09 	.word	0x08000a09
 8000498:	20002e68 	.word	0x20002e68
 800049c:	08005880 	.word	0x08005880
 80004a0:	080058a0 	.word	0x080058a0
 80004a4:	080058bc 	.word	0x080058bc
 80004a8:	080058c8 	.word	0x080058c8
 80004ac:	20002e54 	.word	0x20002e54
 80004b0:	080058cc 	.word	0x080058cc
  }
  else
  {
    /* Init value for data structure in use */
    vSetDeviceData((t_device_property+0), (char *)"0.0.11", eState_Idle);
 80004b4:	2200      	movs	r2, #0
 80004b6:	491e      	ldr	r1, [pc, #120]	; (8000530 <main+0x384>)
 80004b8:	481e      	ldr	r0, [pc, #120]	; (8000534 <main+0x388>)
 80004ba:	f7ff fe5b 	bl	8000174 <vSetDeviceData>
    vSetDeviceData((t_device_property+1), (char *)"0.0.12", eState_Idle);
 80004be:	4b1e      	ldr	r3, [pc, #120]	; (8000538 <main+0x38c>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	491e      	ldr	r1, [pc, #120]	; (800053c <main+0x390>)
 80004c4:	4618      	mov	r0, r3
 80004c6:	f7ff fe55 	bl	8000174 <vSetDeviceData>
    vSetDeviceData((t_device_property+2), (char *)"0.0.13", eState_Charging);
 80004ca:	4b1d      	ldr	r3, [pc, #116]	; (8000540 <main+0x394>)
 80004cc:	2201      	movs	r2, #1
 80004ce:	491d      	ldr	r1, [pc, #116]	; (8000544 <main+0x398>)
 80004d0:	4618      	mov	r0, r3
 80004d2:	f7ff fe4f 	bl	8000174 <vSetDeviceData>
    vSetDeviceData((t_device_property+3), (char *)"0.0.14", eState_Charging);
 80004d6:	4b1c      	ldr	r3, [pc, #112]	; (8000548 <main+0x39c>)
 80004d8:	2201      	movs	r2, #1
 80004da:	491c      	ldr	r1, [pc, #112]	; (800054c <main+0x3a0>)
 80004dc:	4618      	mov	r0, r3
 80004de:	f7ff fe49 	bl	8000174 <vSetDeviceData>
    vSetDeviceData((t_device_property+4), (char *)"0.0.15", eState_Maintainance);
 80004e2:	4b1b      	ldr	r3, [pc, #108]	; (8000550 <main+0x3a4>)
 80004e4:	2202      	movs	r2, #2
 80004e6:	491b      	ldr	r1, [pc, #108]	; (8000554 <main+0x3a8>)
 80004e8:	4618      	mov	r0, r3
 80004ea:	f7ff fe43 	bl	8000174 <vSetDeviceData>
    vSetDeviceData((t_device_property+5), (char *)"0.0.16", eState_Emergency);
 80004ee:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <main+0x3ac>)
 80004f0:	2203      	movs	r2, #3
 80004f2:	491a      	ldr	r1, [pc, #104]	; (800055c <main+0x3b0>)
 80004f4:	4618      	mov	r0, r3
 80004f6:	f7ff fe3d 	bl	8000174 <vSetDeviceData>
    vSetDeviceData((t_device_property+6), (char *)"0.0.8", eState_Idle);
 80004fa:	4b19      	ldr	r3, [pc, #100]	; (8000560 <main+0x3b4>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	4919      	ldr	r1, [pc, #100]	; (8000564 <main+0x3b8>)
 8000500:	4618      	mov	r0, r3
 8000502:	f7ff fe37 	bl	8000174 <vSetDeviceData>
    PRINTF("Start RTOS_Kernel\r\n");
 8000506:	4e18      	ldr	r6, [pc, #96]	; (8000568 <main+0x3bc>)
 8000508:	4b18      	ldr	r3, [pc, #96]	; (800056c <main+0x3c0>)
 800050a:	930c      	str	r3, [sp, #48]	; 0x30
 800050c:	466d      	mov	r5, sp
 800050e:	f106 0410 	add.w	r4, r6, #16
 8000512:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000514:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000516:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000518:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800051a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800051e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000522:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000526:	f000 fc7d 	bl	8000e24 <vUARTSend>
    osKernelStart();
 800052a:	f001 ff27 	bl	800237c <osKernelStart>
  }
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052e:	e7fe      	b.n	800052e <main+0x382>
 8000530:	080058d0 	.word	0x080058d0
 8000534:	20002ebc 	.word	0x20002ebc
 8000538:	20002ec4 	.word	0x20002ec4
 800053c:	080058d8 	.word	0x080058d8
 8000540:	20002ecc 	.word	0x20002ecc
 8000544:	080058e0 	.word	0x080058e0
 8000548:	20002ed4 	.word	0x20002ed4
 800054c:	080058e8 	.word	0x080058e8
 8000550:	20002edc 	.word	0x20002edc
 8000554:	080058f0 	.word	0x080058f0
 8000558:	20002ee4 	.word	0x20002ee4
 800055c:	080058f8 	.word	0x080058f8
 8000560:	20002eec 	.word	0x20002eec
 8000564:	08005900 	.word	0x08005900
 8000568:	20002e78 	.word	0x20002e78
 800056c:	08005908 	.word	0x08005908

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b090      	sub	sp, #64	; 0x40
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0318 	add.w	r3, r7, #24
 800057a:	2228      	movs	r2, #40	; 0x28
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f004 fcb3 	bl	8004eea <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000592:	2301      	movs	r3, #1
 8000594:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000596:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800059a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800059c:	2300      	movs	r3, #0
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a4:	2302      	movs	r3, #2
 80005a6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005a8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80005ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ae:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 80005b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b4:	f107 0318 	add.w	r3, r7, #24
 80005b8:	4618      	mov	r0, r3
 80005ba:	f001 f887 	bl	80016cc <HAL_RCC_OscConfig>
 80005be:	4603      	mov	r3, r0
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d001      	beq.n	80005c8 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005c4:	f000 fc28 	bl	8000e18 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80005c8:	230f      	movs	r3, #15
 80005ca:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005cc:	2302      	movs	r3, #2
 80005ce:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d0:	2300      	movs	r3, #0
 80005d2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005d4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005da:	2300      	movs	r3, #0
 80005dc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005de:	1d3b      	adds	r3, r7, #4
 80005e0:	2102      	movs	r1, #2
 80005e2:	4618      	mov	r0, r3
 80005e4:	f001 faf2 	bl	8001bcc <HAL_RCC_ClockConfig>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80005ee:	f000 fc13 	bl	8000e18 <Error_Handler>
  }
}
 80005f2:	bf00      	nop
 80005f4:	3740      	adds	r7, #64	; 0x40
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
	...

080005fc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000600:	4b11      	ldr	r3, [pc, #68]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000602:	4a12      	ldr	r2, [pc, #72]	; (800064c <MX_USART2_UART_Init+0x50>)
 8000604:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000606:	4b10      	ldr	r3, [pc, #64]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b0e      	ldr	r3, [pc, #56]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b0c      	ldr	r3, [pc, #48]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b09      	ldr	r3, [pc, #36]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b08      	ldr	r3, [pc, #32]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800062c:	4b06      	ldr	r3, [pc, #24]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000632:	4805      	ldr	r0, [pc, #20]	; (8000648 <MX_USART2_UART_Init+0x4c>)
 8000634:	f001 fc66 	bl	8001f04 <HAL_UART_Init>
 8000638:	4603      	mov	r3, r0
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800063e:	f000 fbeb 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */
}
 8000642:	bf00      	nop
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	20002e78 	.word	0x20002e78
 800064c:	40004400 	.word	0x40004400

08000650 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b088      	sub	sp, #32
 8000654:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000656:	f107 0310 	add.w	r3, r7, #16
 800065a:	2200      	movs	r2, #0
 800065c:	601a      	str	r2, [r3, #0]
 800065e:	605a      	str	r2, [r3, #4]
 8000660:	609a      	str	r2, [r3, #8]
 8000662:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000664:	4b28      	ldr	r3, [pc, #160]	; (8000708 <MX_GPIO_Init+0xb8>)
 8000666:	699b      	ldr	r3, [r3, #24]
 8000668:	4a27      	ldr	r2, [pc, #156]	; (8000708 <MX_GPIO_Init+0xb8>)
 800066a:	f043 0320 	orr.w	r3, r3, #32
 800066e:	6193      	str	r3, [r2, #24]
 8000670:	4b25      	ldr	r3, [pc, #148]	; (8000708 <MX_GPIO_Init+0xb8>)
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	f003 0320 	and.w	r3, r3, #32
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800067c:	4b22      	ldr	r3, [pc, #136]	; (8000708 <MX_GPIO_Init+0xb8>)
 800067e:	699b      	ldr	r3, [r3, #24]
 8000680:	4a21      	ldr	r2, [pc, #132]	; (8000708 <MX_GPIO_Init+0xb8>)
 8000682:	f043 0304 	orr.w	r3, r3, #4
 8000686:	6193      	str	r3, [r2, #24]
 8000688:	4b1f      	ldr	r3, [pc, #124]	; (8000708 <MX_GPIO_Init+0xb8>)
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	f003 0304 	and.w	r3, r3, #4
 8000690:	60bb      	str	r3, [r7, #8]
 8000692:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000694:	4b1c      	ldr	r3, [pc, #112]	; (8000708 <MX_GPIO_Init+0xb8>)
 8000696:	699b      	ldr	r3, [r3, #24]
 8000698:	4a1b      	ldr	r2, [pc, #108]	; (8000708 <MX_GPIO_Init+0xb8>)
 800069a:	f043 0308 	orr.w	r3, r3, #8
 800069e:	6193      	str	r3, [r2, #24]
 80006a0:	4b19      	ldr	r3, [pc, #100]	; (8000708 <MX_GPIO_Init+0xb8>)
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	f003 0308 	and.w	r3, r3, #8
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12, GPIO_PIN_RESET);
 80006ac:	2200      	movs	r2, #0
 80006ae:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 80006b2:	4816      	ldr	r0, [pc, #88]	; (800070c <MX_GPIO_Init+0xbc>)
 80006b4:	f000 ffda 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, GPIO_PIN_RESET);
 80006b8:	2200      	movs	r2, #0
 80006ba:	f44f 7180 	mov.w	r1, #256	; 0x100
 80006be:	4814      	ldr	r0, [pc, #80]	; (8000710 <MX_GPIO_Init+0xc0>)
 80006c0:	f000 ffd4 	bl	800166c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA5 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12;
 80006c4:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 80006c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ca:	2301      	movs	r3, #1
 80006cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ce:	2300      	movs	r3, #0
 80006d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d2:	2302      	movs	r3, #2
 80006d4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006d6:	f107 0310 	add.w	r3, r7, #16
 80006da:	4619      	mov	r1, r3
 80006dc:	480b      	ldr	r0, [pc, #44]	; (800070c <MX_GPIO_Init+0xbc>)
 80006de:	f000 fe6b 	bl	80013b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80006e2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80006e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006e8:	2301      	movs	r3, #1
 80006ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ec:	2300      	movs	r3, #0
 80006ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f0:	2302      	movs	r3, #2
 80006f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006f4:	f107 0310 	add.w	r3, r7, #16
 80006f8:	4619      	mov	r1, r3
 80006fa:	4805      	ldr	r0, [pc, #20]	; (8000710 <MX_GPIO_Init+0xc0>)
 80006fc:	f000 fe5c 	bl	80013b8 <HAL_GPIO_Init>
}
 8000700:	bf00      	nop
 8000702:	3720      	adds	r7, #32
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40021000 	.word	0x40021000
 800070c:	40010800 	.word	0x40010800
 8000710:	40010c00 	.word	0x40010c00

08000714 <senderTask>:
 * @brief Sender Task
 * 
 * @param argument 
 */
void senderTask(void *argument)
{
 8000714:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000716:	b095      	sub	sp, #84	; 0x54
 8000718:	af0e      	add	r7, sp, #56	; 0x38
 800071a:	6078      	str	r0, [r7, #4]
  BaseType_t status;
  TickType_t send_freq = pdMS_TO_TICKS(SEND_FREQ);
 800071c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000720:	617b      	str	r3, [r7, #20]
  TickType_t block_time = pdMS_TO_TICKS(3000);
 8000722:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8000726:	613b      	str	r3, [r7, #16]
  DeviceInfo_t *t_data_to_send = (DeviceInfo_t *)argument;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	60fb      	str	r3, [r7, #12]

  /* Infinite loop */
  for (;;)
  {
    newline;
 800072c:	4eab      	ldr	r6, [pc, #684]	; (80009dc <senderTask+0x2c8>)
 800072e:	4bac      	ldr	r3, [pc, #688]	; (80009e0 <senderTask+0x2cc>)
 8000730:	930c      	str	r3, [sp, #48]	; 0x30
 8000732:	466d      	mov	r5, sp
 8000734:	f106 0410 	add.w	r4, r6, #16
 8000738:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800073c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800073e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000740:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000744:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000748:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800074c:	f000 fb6a 	bl	8000e24 <vUARTSend>
    /* Random frequency to send data */
    PRINT_VAR_IN_TASK(send_freq);
 8000750:	4ea2      	ldr	r6, [pc, #648]	; (80009dc <senderTask+0x2c8>)
 8000752:	4ba4      	ldr	r3, [pc, #656]	; (80009e4 <senderTask+0x2d0>)
 8000754:	930c      	str	r3, [sp, #48]	; 0x30
 8000756:	466d      	mov	r5, sp
 8000758:	f106 0410 	add.w	r4, r6, #16
 800075c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800075e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000760:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000762:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000764:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000768:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800076c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000770:	f000 fb58 	bl	8000e24 <vUARTSend>
 8000774:	2000      	movs	r0, #0
 8000776:	f003 f887 	bl	8003888 <pcTaskGetName>
 800077a:	4603      	mov	r3, r0
 800077c:	4e97      	ldr	r6, [pc, #604]	; (80009dc <senderTask+0x2c8>)
 800077e:	930c      	str	r3, [sp, #48]	; 0x30
 8000780:	466d      	mov	r5, sp
 8000782:	f106 0410 	add.w	r4, r6, #16
 8000786:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000788:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800078a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800078c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800078e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000792:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000796:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800079a:	f000 fb43 	bl	8000e24 <vUARTSend>
 800079e:	4e8f      	ldr	r6, [pc, #572]	; (80009dc <senderTask+0x2c8>)
 80007a0:	4b91      	ldr	r3, [pc, #580]	; (80009e8 <senderTask+0x2d4>)
 80007a2:	930c      	str	r3, [sp, #48]	; 0x30
 80007a4:	466d      	mov	r5, sp
 80007a6:	f106 0410 	add.w	r4, r6, #16
 80007aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007ae:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007b0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007b2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007b6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007ba:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007be:	f000 fb31 	bl	8000e24 <vUARTSend>
 80007c2:	4e86      	ldr	r6, [pc, #536]	; (80009dc <senderTask+0x2c8>)
 80007c4:	4b89      	ldr	r3, [pc, #548]	; (80009ec <senderTask+0x2d8>)
 80007c6:	930c      	str	r3, [sp, #48]	; 0x30
 80007c8:	466d      	mov	r5, sp
 80007ca:	f106 0410 	add.w	r4, r6, #16
 80007ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007d6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007da:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80007de:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80007e2:	f000 fb1f 	bl	8000e24 <vUARTSend>
 80007e6:	4e7d      	ldr	r6, [pc, #500]	; (80009dc <senderTask+0x2c8>)
 80007e8:	4b81      	ldr	r3, [pc, #516]	; (80009f0 <senderTask+0x2dc>)
 80007ea:	930c      	str	r3, [sp, #48]	; 0x30
 80007ec:	466d      	mov	r5, sp
 80007ee:	f106 0410 	add.w	r4, r6, #16
 80007f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80007f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80007fa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80007fe:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000802:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000806:	f000 fb0d 	bl	8000e24 <vUARTSend>
 800080a:	697b      	ldr	r3, [r7, #20]
 800080c:	220a      	movs	r2, #10
 800080e:	4979      	ldr	r1, [pc, #484]	; (80009f4 <senderTask+0x2e0>)
 8000810:	4618      	mov	r0, r3
 8000812:	f004 fb5d 	bl	8004ed0 <itoa>
 8000816:	4e71      	ldr	r6, [pc, #452]	; (80009dc <senderTask+0x2c8>)
 8000818:	4b76      	ldr	r3, [pc, #472]	; (80009f4 <senderTask+0x2e0>)
 800081a:	930c      	str	r3, [sp, #48]	; 0x30
 800081c:	466d      	mov	r5, sp
 800081e:	f106 0410 	add.w	r4, r6, #16
 8000822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800082a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800082e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000832:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000836:	f000 faf5 	bl	8000e24 <vUARTSend>
 800083a:	4e68      	ldr	r6, [pc, #416]	; (80009dc <senderTask+0x2c8>)
 800083c:	4b68      	ldr	r3, [pc, #416]	; (80009e0 <senderTask+0x2cc>)
 800083e:	930c      	str	r3, [sp, #48]	; 0x30
 8000840:	466d      	mov	r5, sp
 8000842:	f106 0410 	add.w	r4, r6, #16
 8000846:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000848:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800084c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800084e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000852:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000856:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800085a:	f000 fae3 	bl	8000e24 <vUARTSend>
    send_freq = RAND_U32(SEND_FREQ_MIN, SEND_FREQ_MAX);
 800085e:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
 8000862:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000866:	f000 faf5 	bl	8000e54 <ucRandomNumber>
 800086a:	6178      	str	r0, [r7, #20]
    memset(main_string, 0, sizeof(main_string));
 800086c:	2264      	movs	r2, #100	; 0x64
 800086e:	2100      	movs	r1, #0
 8000870:	4861      	ldr	r0, [pc, #388]	; (80009f8 <senderTask+0x2e4>)
 8000872:	f004 fb3a 	bl	8004eea <memset>
    sprintf(main_string, "ChargePoint number %d starts transfering data\r\n", t_data_to_send->e_data_source);
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	461a      	mov	r2, r3
 800087c:	495f      	ldr	r1, [pc, #380]	; (80009fc <senderTask+0x2e8>)
 800087e:	485e      	ldr	r0, [pc, #376]	; (80009f8 <senderTask+0x2e4>)
 8000880:	f004 fb70 	bl	8004f64 <siprintf>
    PRINT_IN_TASK(main_string);
 8000884:	4e55      	ldr	r6, [pc, #340]	; (80009dc <senderTask+0x2c8>)
 8000886:	4b57      	ldr	r3, [pc, #348]	; (80009e4 <senderTask+0x2d0>)
 8000888:	930c      	str	r3, [sp, #48]	; 0x30
 800088a:	466d      	mov	r5, sp
 800088c:	f106 0410 	add.w	r4, r6, #16
 8000890:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000892:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000894:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000896:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000898:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800089c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008a0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008a4:	f000 fabe 	bl	8000e24 <vUARTSend>
 80008a8:	2000      	movs	r0, #0
 80008aa:	f002 ffed 	bl	8003888 <pcTaskGetName>
 80008ae:	4603      	mov	r3, r0
 80008b0:	4e4a      	ldr	r6, [pc, #296]	; (80009dc <senderTask+0x2c8>)
 80008b2:	930c      	str	r3, [sp, #48]	; 0x30
 80008b4:	466d      	mov	r5, sp
 80008b6:	f106 0410 	add.w	r4, r6, #16
 80008ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008c2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008c6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008ca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008ce:	f000 faa9 	bl	8000e24 <vUARTSend>
 80008d2:	4e42      	ldr	r6, [pc, #264]	; (80009dc <senderTask+0x2c8>)
 80008d4:	4b44      	ldr	r3, [pc, #272]	; (80009e8 <senderTask+0x2d4>)
 80008d6:	930c      	str	r3, [sp, #48]	; 0x30
 80008d8:	466d      	mov	r5, sp
 80008da:	f106 0410 	add.w	r4, r6, #16
 80008de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80008e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80008e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80008ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80008ee:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80008f2:	f000 fa97 	bl	8000e24 <vUARTSend>
 80008f6:	4e39      	ldr	r6, [pc, #228]	; (80009dc <senderTask+0x2c8>)
 80008f8:	4b3f      	ldr	r3, [pc, #252]	; (80009f8 <senderTask+0x2e4>)
 80008fa:	930c      	str	r3, [sp, #48]	; 0x30
 80008fc:	466d      	mov	r5, sp
 80008fe:	f106 0410 	add.w	r4, r6, #16
 8000902:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000904:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000906:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000908:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800090a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800090e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000912:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000916:	f000 fa85 	bl	8000e24 <vUARTSend>
    status = xQueueSendToBack(queue_handle, (void *)t_data_to_send, block_time); /* If the queue is full, senderTask will be blocked for maximum block_time before return fail */
 800091a:	4b39      	ldr	r3, [pc, #228]	; (8000a00 <senderTask+0x2ec>)
 800091c:	6818      	ldr	r0, [r3, #0]
 800091e:	2300      	movs	r3, #0
 8000920:	693a      	ldr	r2, [r7, #16]
 8000922:	68f9      	ldr	r1, [r7, #12]
 8000924:	f002 f8d8 	bl	8002ad8 <xQueueGenericSend>
 8000928:	60b8      	str	r0, [r7, #8]
    if (status != pdPASS)
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	2b01      	cmp	r3, #1
 800092e:	d051      	beq.n	80009d4 <senderTask+0x2c0>
    {
      sprintf(main_string, "[QUEUE_FULL] ChargePoint number %d failed to transfer data\r\n", t_data_to_send->e_data_source);
 8000930:	68fb      	ldr	r3, [r7, #12]
 8000932:	781b      	ldrb	r3, [r3, #0]
 8000934:	461a      	mov	r2, r3
 8000936:	4933      	ldr	r1, [pc, #204]	; (8000a04 <senderTask+0x2f0>)
 8000938:	482f      	ldr	r0, [pc, #188]	; (80009f8 <senderTask+0x2e4>)
 800093a:	f004 fb13 	bl	8004f64 <siprintf>
      PRINT_IN_TASK(main_string);
 800093e:	4e27      	ldr	r6, [pc, #156]	; (80009dc <senderTask+0x2c8>)
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <senderTask+0x2d0>)
 8000942:	930c      	str	r3, [sp, #48]	; 0x30
 8000944:	466d      	mov	r5, sp
 8000946:	f106 0410 	add.w	r4, r6, #16
 800094a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800094c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800094e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000950:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000952:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000956:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 800095a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 800095e:	f000 fa61 	bl	8000e24 <vUARTSend>
 8000962:	2000      	movs	r0, #0
 8000964:	f002 ff90 	bl	8003888 <pcTaskGetName>
 8000968:	4603      	mov	r3, r0
 800096a:	4e1c      	ldr	r6, [pc, #112]	; (80009dc <senderTask+0x2c8>)
 800096c:	930c      	str	r3, [sp, #48]	; 0x30
 800096e:	466d      	mov	r5, sp
 8000970:	f106 0410 	add.w	r4, r6, #16
 8000974:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000976:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000978:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800097a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800097c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000980:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000984:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000988:	f000 fa4c 	bl	8000e24 <vUARTSend>
 800098c:	4e13      	ldr	r6, [pc, #76]	; (80009dc <senderTask+0x2c8>)
 800098e:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <senderTask+0x2d4>)
 8000990:	930c      	str	r3, [sp, #48]	; 0x30
 8000992:	466d      	mov	r5, sp
 8000994:	f106 0410 	add.w	r4, r6, #16
 8000998:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800099c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800099e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009a0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009a4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80009a8:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009ac:	f000 fa3a 	bl	8000e24 <vUARTSend>
 80009b0:	4e0a      	ldr	r6, [pc, #40]	; (80009dc <senderTask+0x2c8>)
 80009b2:	4b11      	ldr	r3, [pc, #68]	; (80009f8 <senderTask+0x2e4>)
 80009b4:	930c      	str	r3, [sp, #48]	; 0x30
 80009b6:	466d      	mov	r5, sp
 80009b8:	f106 0410 	add.w	r4, r6, #16
 80009bc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80009c4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80009c8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 80009cc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 80009d0:	f000 fa28 	bl	8000e24 <vUARTSend>
    }

    osDelay(send_freq);
 80009d4:	6978      	ldr	r0, [r7, #20]
 80009d6:	f001 fdaf 	bl	8002538 <osDelay>
    newline;
 80009da:	e6a7      	b.n	800072c <senderTask+0x18>
 80009dc:	20002e78 	.word	0x20002e78
 80009e0:	080058cc 	.word	0x080058cc
 80009e4:	0800591c 	.word	0x0800591c
 80009e8:	08005920 	.word	0x08005920
 80009ec:	08005928 	.word	0x08005928
 80009f0:	080058c8 	.word	0x080058c8
 80009f4:	20002e54 	.word	0x20002e54
 80009f8:	20002de8 	.word	0x20002de8
 80009fc:	08005934 	.word	0x08005934
 8000a00:	200000cc 	.word	0x200000cc
 8000a04:	08005964 	.word	0x08005964

08000a08 <receiverTask>:
 * @brief Receiver Task
 * 
 * @param argument 
 */
void receiverTask(void *argument)
{
 8000a08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a0a:	b097      	sub	sp, #92	; 0x5c
 8000a0c:	af0e      	add	r7, sp, #56	; 0x38
 8000a0e:	6078      	str	r0, [r7, #4]
  DeviceInfo_t t_data_received; /* Create a variable to store data received from queue */
  BaseType_t status;
  TickType_t receive_freq = pdMS_TO_TICKS(RECEIVE_FREQ);
 8000a10:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000a14:	61fb      	str	r3, [r7, #28]
  uint8_t u8_nb_data_on_queue = 0;
 8000a16:	2300      	movs	r3, #0
 8000a18:	76fb      	strb	r3, [r7, #27]
  /* Infinite loop */
  for (;;)
  {
    newline;
 8000a1a:	4eae      	ldr	r6, [pc, #696]	; (8000cd4 <receiverTask+0x2cc>)
 8000a1c:	4bae      	ldr	r3, [pc, #696]	; (8000cd8 <receiverTask+0x2d0>)
 8000a1e:	930c      	str	r3, [sp, #48]	; 0x30
 8000a20:	466d      	mov	r5, sp
 8000a22:	f106 0410 	add.w	r4, r6, #16
 8000a26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a32:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a36:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a3a:	f000 f9f3 	bl	8000e24 <vUARTSend>
    //Check number of data already on queue
    u8_nb_data_on_queue = (uint8_t)uxQueueMessagesWaiting(queue_handle);
 8000a3e:	4ba7      	ldr	r3, [pc, #668]	; (8000cdc <receiverTask+0x2d4>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	4618      	mov	r0, r3
 8000a44:	f002 fab2 	bl	8002fac <uxQueueMessagesWaiting>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	76fb      	strb	r3, [r7, #27]
    if (u8_nb_data_on_queue != 7)
 8000a4c:	7efb      	ldrb	r3, [r7, #27]
 8000a4e:	2b07      	cmp	r3, #7
 8000a50:	d04a      	beq.n	8000ae8 <receiverTask+0xe0>
    {
      PRINT_IN_TASK("[QUEUE_EMPTY]\r\n");
 8000a52:	4ea0      	ldr	r6, [pc, #640]	; (8000cd4 <receiverTask+0x2cc>)
 8000a54:	4ba2      	ldr	r3, [pc, #648]	; (8000ce0 <receiverTask+0x2d8>)
 8000a56:	930c      	str	r3, [sp, #48]	; 0x30
 8000a58:	466d      	mov	r5, sp
 8000a5a:	f106 0410 	add.w	r4, r6, #16
 8000a5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a62:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a64:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a66:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a6a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a6e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a72:	f000 f9d7 	bl	8000e24 <vUARTSend>
 8000a76:	2000      	movs	r0, #0
 8000a78:	f002 ff06 	bl	8003888 <pcTaskGetName>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	4e95      	ldr	r6, [pc, #596]	; (8000cd4 <receiverTask+0x2cc>)
 8000a80:	930c      	str	r3, [sp, #48]	; 0x30
 8000a82:	466d      	mov	r5, sp
 8000a84:	f106 0410 	add.w	r4, r6, #16
 8000a88:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a8a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a8c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000a8e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000a90:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000a94:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000a98:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000a9c:	f000 f9c2 	bl	8000e24 <vUARTSend>
 8000aa0:	4e8c      	ldr	r6, [pc, #560]	; (8000cd4 <receiverTask+0x2cc>)
 8000aa2:	4b90      	ldr	r3, [pc, #576]	; (8000ce4 <receiverTask+0x2dc>)
 8000aa4:	930c      	str	r3, [sp, #48]	; 0x30
 8000aa6:	466d      	mov	r5, sp
 8000aa8:	f106 0410 	add.w	r4, r6, #16
 8000aac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000aae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ab2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ab4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000ab8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000abc:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ac0:	f000 f9b0 	bl	8000e24 <vUARTSend>
 8000ac4:	4e83      	ldr	r6, [pc, #524]	; (8000cd4 <receiverTask+0x2cc>)
 8000ac6:	4b88      	ldr	r3, [pc, #544]	; (8000ce8 <receiverTask+0x2e0>)
 8000ac8:	930c      	str	r3, [sp, #48]	; 0x30
 8000aca:	466d      	mov	r5, sp
 8000acc:	f106 0410 	add.w	r4, r6, #16
 8000ad0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000ad6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000ad8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000adc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000ae0:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000ae4:	f000 f99e 	bl	8000e24 <vUARTSend>
    }

    status = xQueueReceive(queue_handle, &t_data_received, 0);
 8000ae8:	4b7c      	ldr	r3, [pc, #496]	; (8000cdc <receiverTask+0x2d4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f107 010c 	add.w	r1, r7, #12
 8000af0:	2200      	movs	r2, #0
 8000af2:	4618      	mov	r0, r3
 8000af4:	f002 f97e 	bl	8002df4 <xQueueReceive>
 8000af8:	6178      	str	r0, [r7, #20]
    if (status != pdPASS)
 8000afa:	697b      	ldr	r3, [r7, #20]
 8000afc:	2b01      	cmp	r3, #1
 8000afe:	d04b      	beq.n	8000b98 <receiverTask+0x190>
    {
      PRINT_IN_TASK("[GET_QUEUE_FAILED]\r\n");
 8000b00:	4e74      	ldr	r6, [pc, #464]	; (8000cd4 <receiverTask+0x2cc>)
 8000b02:	4b77      	ldr	r3, [pc, #476]	; (8000ce0 <receiverTask+0x2d8>)
 8000b04:	930c      	str	r3, [sp, #48]	; 0x30
 8000b06:	466d      	mov	r5, sp
 8000b08:	f106 0410 	add.w	r4, r6, #16
 8000b0c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b0e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b14:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b18:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b1c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b20:	f000 f980 	bl	8000e24 <vUARTSend>
 8000b24:	2000      	movs	r0, #0
 8000b26:	f002 feaf 	bl	8003888 <pcTaskGetName>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	4e69      	ldr	r6, [pc, #420]	; (8000cd4 <receiverTask+0x2cc>)
 8000b2e:	930c      	str	r3, [sp, #48]	; 0x30
 8000b30:	466d      	mov	r5, sp
 8000b32:	f106 0410 	add.w	r4, r6, #16
 8000b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b3e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b42:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b46:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b4a:	f000 f96b 	bl	8000e24 <vUARTSend>
 8000b4e:	4e61      	ldr	r6, [pc, #388]	; (8000cd4 <receiverTask+0x2cc>)
 8000b50:	4b64      	ldr	r3, [pc, #400]	; (8000ce4 <receiverTask+0x2dc>)
 8000b52:	930c      	str	r3, [sp, #48]	; 0x30
 8000b54:	466d      	mov	r5, sp
 8000b56:	f106 0410 	add.w	r4, r6, #16
 8000b5a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b5c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b5e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b60:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b62:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b66:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b6a:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b6e:	f000 f959 	bl	8000e24 <vUARTSend>
 8000b72:	4e58      	ldr	r6, [pc, #352]	; (8000cd4 <receiverTask+0x2cc>)
 8000b74:	4b5d      	ldr	r3, [pc, #372]	; (8000cec <receiverTask+0x2e4>)
 8000b76:	930c      	str	r3, [sp, #48]	; 0x30
 8000b78:	466d      	mov	r5, sp
 8000b7a:	f106 0410 	add.w	r4, r6, #16
 8000b7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000b84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000b86:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000b8a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000b8e:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000b92:	f000 f947 	bl	8000e24 <vUARTSend>
 8000b96:	e11c      	b.n	8000dd2 <receiverTask+0x3ca>
    }
    else /* When receive data successfully */
    {
      memset(main_string, 0, sizeof(main_string));
 8000b98:	2264      	movs	r2, #100	; 0x64
 8000b9a:	2100      	movs	r1, #0
 8000b9c:	4854      	ldr	r0, [pc, #336]	; (8000cf0 <receiverTask+0x2e8>)
 8000b9e:	f004 f9a4 	bl	8004eea <memset>
      switch (t_data_received.e_data_source)
 8000ba2:	7b3b      	ldrb	r3, [r7, #12]
 8000ba4:	2b06      	cmp	r3, #6
 8000ba6:	f200 80bf 	bhi.w	8000d28 <receiverTask+0x320>
 8000baa:	a201      	add	r2, pc, #4	; (adr r2, 8000bb0 <receiverTask+0x1a8>)
 8000bac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bb0:	08000bcd 	.word	0x08000bcd
 8000bb4:	08000bf9 	.word	0x08000bf9
 8000bb8:	08000c25 	.word	0x08000c25
 8000bbc:	08000c51 	.word	0x08000c51
 8000bc0:	08000c7d 	.word	0x08000c7d
 8000bc4:	08000ca9 	.word	0x08000ca9
 8000bc8:	08000cfd 	.word	0x08000cfd
      {
      case (eChargePoint_1):
        sprintf((main_string), "[GET_QUEUE_SUCCESS] ChargePoint: %d - FW_Version: %s - Working State: %s\n\n\r", t_data_received.e_data_source + 1, t_data_received.t_device_property->pc_sw_version, pc_working_state[t_data_received.t_device_property->u8_working_state]);
 8000bcc:	7b3b      	ldrb	r3, [r7, #12]
 8000bce:	1c59      	adds	r1, r3, #1
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	6818      	ldr	r0, [r3, #0]
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	791b      	ldrb	r3, [r3, #4]
 8000bd8:	461a      	mov	r2, r3
 8000bda:	4613      	mov	r3, r2
 8000bdc:	005b      	lsls	r3, r3, #1
 8000bde:	4413      	add	r3, r2
 8000be0:	009b      	lsls	r3, r3, #2
 8000be2:	4413      	add	r3, r2
 8000be4:	4a43      	ldr	r2, [pc, #268]	; (8000cf4 <receiverTask+0x2ec>)
 8000be6:	4413      	add	r3, r2
 8000be8:	9300      	str	r3, [sp, #0]
 8000bea:	4603      	mov	r3, r0
 8000bec:	460a      	mov	r2, r1
 8000bee:	4942      	ldr	r1, [pc, #264]	; (8000cf8 <receiverTask+0x2f0>)
 8000bf0:	483f      	ldr	r0, [pc, #252]	; (8000cf0 <receiverTask+0x2e8>)
 8000bf2:	f004 f9b7 	bl	8004f64 <siprintf>
        break;
 8000bf6:	e0a1      	b.n	8000d3c <receiverTask+0x334>
      case (eChargePoint_2):
        sprintf((main_string), "[GET_QUEUE_SUCCESS] ChargePoint: %d - FW_Version: %s - Working State: %s\n\n\r", t_data_received.e_data_source + 1, t_data_received.t_device_property->pc_sw_version, pc_working_state[t_data_received.t_device_property->u8_working_state]);
 8000bf8:	7b3b      	ldrb	r3, [r7, #12]
 8000bfa:	1c59      	adds	r1, r3, #1
 8000bfc:	693b      	ldr	r3, [r7, #16]
 8000bfe:	6818      	ldr	r0, [r3, #0]
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	791b      	ldrb	r3, [r3, #4]
 8000c04:	461a      	mov	r2, r3
 8000c06:	4613      	mov	r3, r2
 8000c08:	005b      	lsls	r3, r3, #1
 8000c0a:	4413      	add	r3, r2
 8000c0c:	009b      	lsls	r3, r3, #2
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a38      	ldr	r2, [pc, #224]	; (8000cf4 <receiverTask+0x2ec>)
 8000c12:	4413      	add	r3, r2
 8000c14:	9300      	str	r3, [sp, #0]
 8000c16:	4603      	mov	r3, r0
 8000c18:	460a      	mov	r2, r1
 8000c1a:	4937      	ldr	r1, [pc, #220]	; (8000cf8 <receiverTask+0x2f0>)
 8000c1c:	4834      	ldr	r0, [pc, #208]	; (8000cf0 <receiverTask+0x2e8>)
 8000c1e:	f004 f9a1 	bl	8004f64 <siprintf>
        break;
 8000c22:	e08b      	b.n	8000d3c <receiverTask+0x334>
      case (eChargePoint_3):
        sprintf((main_string), "[GET_QUEUE_SUCCESS] ChargePoint: %d - FW_Version: %s - Working State: %s\n\n\r", t_data_received.e_data_source + 1, t_data_received.t_device_property->pc_sw_version, pc_working_state[t_data_received.t_device_property->u8_working_state]);
 8000c24:	7b3b      	ldrb	r3, [r7, #12]
 8000c26:	1c59      	adds	r1, r3, #1
 8000c28:	693b      	ldr	r3, [r7, #16]
 8000c2a:	6818      	ldr	r0, [r3, #0]
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	791b      	ldrb	r3, [r3, #4]
 8000c30:	461a      	mov	r2, r3
 8000c32:	4613      	mov	r3, r2
 8000c34:	005b      	lsls	r3, r3, #1
 8000c36:	4413      	add	r3, r2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a2d      	ldr	r2, [pc, #180]	; (8000cf4 <receiverTask+0x2ec>)
 8000c3e:	4413      	add	r3, r2
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	4603      	mov	r3, r0
 8000c44:	460a      	mov	r2, r1
 8000c46:	492c      	ldr	r1, [pc, #176]	; (8000cf8 <receiverTask+0x2f0>)
 8000c48:	4829      	ldr	r0, [pc, #164]	; (8000cf0 <receiverTask+0x2e8>)
 8000c4a:	f004 f98b 	bl	8004f64 <siprintf>
        break;
 8000c4e:	e075      	b.n	8000d3c <receiverTask+0x334>
      case (eChargePoint_4):
        sprintf((main_string), "[GET_QUEUE_SUCCESS] ChargePoint: %d - FW_Version: %s - Working State: %s\n\n\r", t_data_received.e_data_source + 1, t_data_received.t_device_property->pc_sw_version, pc_working_state[t_data_received.t_device_property->u8_working_state]);
 8000c50:	7b3b      	ldrb	r3, [r7, #12]
 8000c52:	1c59      	adds	r1, r3, #1
 8000c54:	693b      	ldr	r3, [r7, #16]
 8000c56:	6818      	ldr	r0, [r3, #0]
 8000c58:	693b      	ldr	r3, [r7, #16]
 8000c5a:	791b      	ldrb	r3, [r3, #4]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	4613      	mov	r3, r2
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	4413      	add	r3, r2
 8000c64:	009b      	lsls	r3, r3, #2
 8000c66:	4413      	add	r3, r2
 8000c68:	4a22      	ldr	r2, [pc, #136]	; (8000cf4 <receiverTask+0x2ec>)
 8000c6a:	4413      	add	r3, r2
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	4603      	mov	r3, r0
 8000c70:	460a      	mov	r2, r1
 8000c72:	4921      	ldr	r1, [pc, #132]	; (8000cf8 <receiverTask+0x2f0>)
 8000c74:	481e      	ldr	r0, [pc, #120]	; (8000cf0 <receiverTask+0x2e8>)
 8000c76:	f004 f975 	bl	8004f64 <siprintf>
        break;
 8000c7a:	e05f      	b.n	8000d3c <receiverTask+0x334>
      case (eChargePoint_5):
        sprintf((main_string), "[GET_QUEUE_SUCCESS] ChargePoint: %d - FW_Version: %s - Working State: %s\n\n\r", t_data_received.e_data_source + 1, t_data_received.t_device_property->pc_sw_version, pc_working_state[t_data_received.t_device_property->u8_working_state]);
 8000c7c:	7b3b      	ldrb	r3, [r7, #12]
 8000c7e:	1c59      	adds	r1, r3, #1
 8000c80:	693b      	ldr	r3, [r7, #16]
 8000c82:	6818      	ldr	r0, [r3, #0]
 8000c84:	693b      	ldr	r3, [r7, #16]
 8000c86:	791b      	ldrb	r3, [r3, #4]
 8000c88:	461a      	mov	r2, r3
 8000c8a:	4613      	mov	r3, r2
 8000c8c:	005b      	lsls	r3, r3, #1
 8000c8e:	4413      	add	r3, r2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	4413      	add	r3, r2
 8000c94:	4a17      	ldr	r2, [pc, #92]	; (8000cf4 <receiverTask+0x2ec>)
 8000c96:	4413      	add	r3, r2
 8000c98:	9300      	str	r3, [sp, #0]
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	4916      	ldr	r1, [pc, #88]	; (8000cf8 <receiverTask+0x2f0>)
 8000ca0:	4813      	ldr	r0, [pc, #76]	; (8000cf0 <receiverTask+0x2e8>)
 8000ca2:	f004 f95f 	bl	8004f64 <siprintf>
        break;
 8000ca6:	e049      	b.n	8000d3c <receiverTask+0x334>
      case (eChargePoint_6):
        sprintf((main_string), "[GET_QUEUE_SUCCESS] ChargePoint: %d - FW_Version: %s - Working State: %s\n\n\r", t_data_received.e_data_source + 1, t_data_received.t_device_property->pc_sw_version, pc_working_state[t_data_received.t_device_property->u8_working_state]);
 8000ca8:	7b3b      	ldrb	r3, [r7, #12]
 8000caa:	1c59      	adds	r1, r3, #1
 8000cac:	693b      	ldr	r3, [r7, #16]
 8000cae:	6818      	ldr	r0, [r3, #0]
 8000cb0:	693b      	ldr	r3, [r7, #16]
 8000cb2:	791b      	ldrb	r3, [r3, #4]
 8000cb4:	461a      	mov	r2, r3
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	005b      	lsls	r3, r3, #1
 8000cba:	4413      	add	r3, r2
 8000cbc:	009b      	lsls	r3, r3, #2
 8000cbe:	4413      	add	r3, r2
 8000cc0:	4a0c      	ldr	r2, [pc, #48]	; (8000cf4 <receiverTask+0x2ec>)
 8000cc2:	4413      	add	r3, r2
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	460a      	mov	r2, r1
 8000cca:	490b      	ldr	r1, [pc, #44]	; (8000cf8 <receiverTask+0x2f0>)
 8000ccc:	4808      	ldr	r0, [pc, #32]	; (8000cf0 <receiverTask+0x2e8>)
 8000cce:	f004 f949 	bl	8004f64 <siprintf>
        break;
 8000cd2:	e033      	b.n	8000d3c <receiverTask+0x334>
 8000cd4:	20002e78 	.word	0x20002e78
 8000cd8:	080058cc 	.word	0x080058cc
 8000cdc:	200000cc 	.word	0x200000cc
 8000ce0:	0800591c 	.word	0x0800591c
 8000ce4:	08005920 	.word	0x08005920
 8000ce8:	080059a4 	.word	0x080059a4
 8000cec:	080059b4 	.word	0x080059b4
 8000cf0:	20002de8 	.word	0x20002de8
 8000cf4:	08005ad4 	.word	0x08005ad4
 8000cf8:	080059cc 	.word	0x080059cc
      case (eGateway):
        sprintf((main_string), "[GET_QUEUE_SUCCESS] ChargePoint: %d - FW_Version: %s - Working State: %s\n\n\r", t_data_received.e_data_source + 1, t_data_received.t_device_property->pc_sw_version, pc_working_state[t_data_received.t_device_property->u8_working_state]);
 8000cfc:	7b3b      	ldrb	r3, [r7, #12]
 8000cfe:	1c59      	adds	r1, r3, #1
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	6818      	ldr	r0, [r3, #0]
 8000d04:	693b      	ldr	r3, [r7, #16]
 8000d06:	791b      	ldrb	r3, [r3, #4]
 8000d08:	461a      	mov	r2, r3
 8000d0a:	4613      	mov	r3, r2
 8000d0c:	005b      	lsls	r3, r3, #1
 8000d0e:	4413      	add	r3, r2
 8000d10:	009b      	lsls	r3, r3, #2
 8000d12:	4413      	add	r3, r2
 8000d14:	4a31      	ldr	r2, [pc, #196]	; (8000ddc <receiverTask+0x3d4>)
 8000d16:	4413      	add	r3, r2
 8000d18:	9300      	str	r3, [sp, #0]
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	460a      	mov	r2, r1
 8000d1e:	4930      	ldr	r1, [pc, #192]	; (8000de0 <receiverTask+0x3d8>)
 8000d20:	4830      	ldr	r0, [pc, #192]	; (8000de4 <receiverTask+0x3dc>)
 8000d22:	f004 f91f 	bl	8004f64 <siprintf>
        break;
 8000d26:	e009      	b.n	8000d3c <receiverTask+0x334>
      default:
        sprintf((main_string), "Unknown data");
 8000d28:	4a2e      	ldr	r2, [pc, #184]	; (8000de4 <receiverTask+0x3dc>)
 8000d2a:	4b2f      	ldr	r3, [pc, #188]	; (8000de8 <receiverTask+0x3e0>)
 8000d2c:	4614      	mov	r4, r2
 8000d2e:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000d30:	6020      	str	r0, [r4, #0]
 8000d32:	6061      	str	r1, [r4, #4]
 8000d34:	60a2      	str	r2, [r4, #8]
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	7323      	strb	r3, [r4, #12]
        break;
 8000d3a:	bf00      	nop
      }
      PRINT_IN_TASK(main_string);
 8000d3c:	4e2b      	ldr	r6, [pc, #172]	; (8000dec <receiverTask+0x3e4>)
 8000d3e:	4b2c      	ldr	r3, [pc, #176]	; (8000df0 <receiverTask+0x3e8>)
 8000d40:	930c      	str	r3, [sp, #48]	; 0x30
 8000d42:	466d      	mov	r5, sp
 8000d44:	f106 0410 	add.w	r4, r6, #16
 8000d48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d50:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d54:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000d58:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d5c:	f000 f862 	bl	8000e24 <vUARTSend>
 8000d60:	2000      	movs	r0, #0
 8000d62:	f002 fd91 	bl	8003888 <pcTaskGetName>
 8000d66:	4603      	mov	r3, r0
 8000d68:	4e20      	ldr	r6, [pc, #128]	; (8000dec <receiverTask+0x3e4>)
 8000d6a:	930c      	str	r3, [sp, #48]	; 0x30
 8000d6c:	466d      	mov	r5, sp
 8000d6e:	f106 0410 	add.w	r4, r6, #16
 8000d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d7a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000d7e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000d82:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000d86:	f000 f84d 	bl	8000e24 <vUARTSend>
 8000d8a:	4e18      	ldr	r6, [pc, #96]	; (8000dec <receiverTask+0x3e4>)
 8000d8c:	4b19      	ldr	r3, [pc, #100]	; (8000df4 <receiverTask+0x3ec>)
 8000d8e:	930c      	str	r3, [sp, #48]	; 0x30
 8000d90:	466d      	mov	r5, sp
 8000d92:	f106 0410 	add.w	r4, r6, #16
 8000d96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000da2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000da6:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000daa:	f000 f83b 	bl	8000e24 <vUARTSend>
 8000dae:	4e0f      	ldr	r6, [pc, #60]	; (8000dec <receiverTask+0x3e4>)
 8000db0:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <receiverTask+0x3dc>)
 8000db2:	930c      	str	r3, [sp, #48]	; 0x30
 8000db4:	466d      	mov	r5, sp
 8000db6:	f106 0410 	add.w	r4, r6, #16
 8000dba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dbe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000dc0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000dc2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000dc6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000dca:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000dce:	f000 f829 	bl	8000e24 <vUARTSend>
    }
    osDelay(receive_freq);
 8000dd2:	69f8      	ldr	r0, [r7, #28]
 8000dd4:	f001 fbb0 	bl	8002538 <osDelay>
    newline;
 8000dd8:	e61f      	b.n	8000a1a <receiverTask+0x12>
 8000dda:	bf00      	nop
 8000ddc:	08005ad4 	.word	0x08005ad4
 8000de0:	080059cc 	.word	0x080059cc
 8000de4:	20002de8 	.word	0x20002de8
 8000de8:	08005a18 	.word	0x08005a18
 8000dec:	20002e78 	.word	0x20002e78
 8000df0:	0800591c 	.word	0x0800591c
 8000df4:	08005920 	.word	0x08005920

08000df8 <blinkTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blinkTask */
void blinkTask(void *argument)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blinkTask */
  /* Infinite loop */
  for (;;)
  {
    toggleLed4;
 8000e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e04:	4803      	ldr	r0, [pc, #12]	; (8000e14 <blinkTask+0x1c>)
 8000e06:	f000 fc49 	bl	800169c <HAL_GPIO_TogglePin>
    osDelay(1000);
 8000e0a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000e0e:	f001 fb93 	bl	8002538 <osDelay>
    toggleLed4;
 8000e12:	e7f5      	b.n	8000e00 <blinkTask+0x8>
 8000e14:	40010c00 	.word	0x40010c00

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000e1c:	bf00      	nop
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bc80      	pop	{r7}
 8000e22:	4770      	bx	lr

08000e24 <vUARTSend>:
#include "myLib.h"

#if defined(configHAL_UART)
void vUARTSend(UART_HandleTypeDef huart, uint8_t *String)
{
 8000e24:	b084      	sub	sp, #16
 8000e26:	b580      	push	{r7, lr}
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	f107 0c08 	add.w	ip, r7, #8
 8000e2e:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	HAL_UART_Transmit(&huart, (uint8_t *)String, strlen((char *)String), 100);
 8000e32:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8000e34:	f7ff f996 	bl	8000164 <strlen>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	b29a      	uxth	r2, r3
 8000e3c:	2364      	movs	r3, #100	; 0x64
 8000e3e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8000e40:	f107 0008 	add.w	r0, r7, #8
 8000e44:	f001 f8ab 	bl	8001f9e <HAL_UART_Transmit>
}
 8000e48:	bf00      	nop
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000e50:	b004      	add	sp, #16
 8000e52:	4770      	bx	lr

08000e54 <ucRandomNumber>:
	}
}
#endif /* configLL_UART */

uint32_t ucRandomNumber(uint32_t min, uint32_t max)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	return (min + rand() % (max + 1 - min));
 8000e5e:	f004 f84d 	bl	8004efc <rand>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	6839      	ldr	r1, [r7, #0]
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	1acb      	subs	r3, r1, r3
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	fbb2 f1f3 	udiv	r1, r2, r3
 8000e72:	fb03 f301 	mul.w	r3, r3, r1
 8000e76:	1ad2      	subs	r2, r2, r3
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4413      	add	r3, r2
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}

08000e84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	b085      	sub	sp, #20
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000e8a:	4b15      	ldr	r3, [pc, #84]	; (8000ee0 <HAL_MspInit+0x5c>)
 8000e8c:	699b      	ldr	r3, [r3, #24]
 8000e8e:	4a14      	ldr	r2, [pc, #80]	; (8000ee0 <HAL_MspInit+0x5c>)
 8000e90:	f043 0301 	orr.w	r3, r3, #1
 8000e94:	6193      	str	r3, [r2, #24]
 8000e96:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_MspInit+0x5c>)
 8000e98:	699b      	ldr	r3, [r3, #24]
 8000e9a:	f003 0301 	and.w	r3, r3, #1
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ea2:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <HAL_MspInit+0x5c>)
 8000ea4:	69db      	ldr	r3, [r3, #28]
 8000ea6:	4a0e      	ldr	r2, [pc, #56]	; (8000ee0 <HAL_MspInit+0x5c>)
 8000ea8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eac:	61d3      	str	r3, [r2, #28]
 8000eae:	4b0c      	ldr	r3, [pc, #48]	; (8000ee0 <HAL_MspInit+0x5c>)
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eb6:	607b      	str	r3, [r7, #4]
 8000eb8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000eba:	4b0a      	ldr	r3, [pc, #40]	; (8000ee4 <HAL_MspInit+0x60>)
 8000ebc:	685b      	ldr	r3, [r3, #4]
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000ec6:	60fb      	str	r3, [r7, #12]
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <HAL_MspInit+0x60>)
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	3714      	adds	r7, #20
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bc80      	pop	{r7}
 8000ede:	4770      	bx	lr
 8000ee0:	40021000 	.word	0x40021000
 8000ee4:	40010000 	.word	0x40010000

08000ee8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b088      	sub	sp, #32
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ef0:	f107 0310 	add.w	r3, r7, #16
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	601a      	str	r2, [r3, #0]
 8000ef8:	605a      	str	r2, [r3, #4]
 8000efa:	609a      	str	r2, [r3, #8]
 8000efc:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a1b      	ldr	r2, [pc, #108]	; (8000f70 <HAL_UART_MspInit+0x88>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d12f      	bne.n	8000f68 <HAL_UART_MspInit+0x80>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f08:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <HAL_UART_MspInit+0x8c>)
 8000f0a:	69db      	ldr	r3, [r3, #28]
 8000f0c:	4a19      	ldr	r2, [pc, #100]	; (8000f74 <HAL_UART_MspInit+0x8c>)
 8000f0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f12:	61d3      	str	r3, [r2, #28]
 8000f14:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <HAL_UART_MspInit+0x8c>)
 8000f16:	69db      	ldr	r3, [r3, #28]
 8000f18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f1c:	60fb      	str	r3, [r7, #12]
 8000f1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f20:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <HAL_UART_MspInit+0x8c>)
 8000f22:	699b      	ldr	r3, [r3, #24]
 8000f24:	4a13      	ldr	r2, [pc, #76]	; (8000f74 <HAL_UART_MspInit+0x8c>)
 8000f26:	f043 0304 	orr.w	r3, r3, #4
 8000f2a:	6193      	str	r3, [r2, #24]
 8000f2c:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <HAL_UART_MspInit+0x8c>)
 8000f2e:	699b      	ldr	r3, [r3, #24]
 8000f30:	f003 0304 	and.w	r3, r3, #4
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000f38:	2304      	movs	r3, #4
 8000f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3c:	2302      	movs	r3, #2
 8000f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f40:	2303      	movs	r3, #3
 8000f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f44:	f107 0310 	add.w	r3, r7, #16
 8000f48:	4619      	mov	r1, r3
 8000f4a:	480b      	ldr	r0, [pc, #44]	; (8000f78 <HAL_UART_MspInit+0x90>)
 8000f4c:	f000 fa34 	bl	80013b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000f50:	2308      	movs	r3, #8
 8000f52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f54:	2300      	movs	r3, #0
 8000f56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f58:	2300      	movs	r3, #0
 8000f5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5c:	f107 0310 	add.w	r3, r7, #16
 8000f60:	4619      	mov	r1, r3
 8000f62:	4805      	ldr	r0, [pc, #20]	; (8000f78 <HAL_UART_MspInit+0x90>)
 8000f64:	f000 fa28 	bl	80013b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f68:	bf00      	nop
 8000f6a:	3720      	adds	r7, #32
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	40004400 	.word	0x40004400
 8000f74:	40021000 	.word	0x40021000
 8000f78:	40010800 	.word	0x40010800

08000f7c <NMI_Handler>:
/*           Cortex-M3 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

    /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f80:	bf00      	nop
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bc80      	pop	{r7}
 8000f86:	4770      	bx	lr

08000f88 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f8a:	b08f      	sub	sp, #60	; 0x3c
 8000f8c:	af0e      	add	r7, sp, #56	; 0x38
    /* USER CODE BEGIN HardFault_IRQn 0 */
    static uint32_t print_flag;
    /* USER CODE END HardFault_IRQn 0 */
    while (1) {
        if (print_flag == 0) {
 8000f8e:	4b0e      	ldr	r3, [pc, #56]	; (8000fc8 <HardFault_Handler+0x40>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d1fb      	bne.n	8000f8e <HardFault_Handler+0x6>
            PRINTF("[HartFault_Handler]");
 8000f96:	4e0d      	ldr	r6, [pc, #52]	; (8000fcc <HardFault_Handler+0x44>)
 8000f98:	4b0d      	ldr	r3, [pc, #52]	; (8000fd0 <HardFault_Handler+0x48>)
 8000f9a:	930c      	str	r3, [sp, #48]	; 0x30
 8000f9c:	466d      	mov	r5, sp
 8000f9e:	f106 0410 	add.w	r4, r6, #16
 8000fa2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000fa6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000fa8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000faa:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8000fae:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
 8000fb2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8000fb6:	f7ff ff35 	bl	8000e24 <vUARTSend>
            ++print_flag;
 8000fba:	4b03      	ldr	r3, [pc, #12]	; (8000fc8 <HardFault_Handler+0x40>)
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	4a01      	ldr	r2, [pc, #4]	; (8000fc8 <HardFault_Handler+0x40>)
 8000fc2:	6013      	str	r3, [r2, #0]
        if (print_flag == 0) {
 8000fc4:	e7e3      	b.n	8000f8e <HardFault_Handler+0x6>
 8000fc6:	bf00      	nop
 8000fc8:	200000d0 	.word	0x200000d0
 8000fcc:	20002e78 	.word	0x20002e78
 8000fd0:	08005a28 	.word	0x08005a28

08000fd4 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1) {
 8000fd8:	e7fe      	b.n	8000fd8 <MemManage_Handler+0x4>

08000fda <BusFault_Handler>:
}

/**
 * @brief This function handles Prefetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000fda:	b480      	push	{r7}
 8000fdc:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1) {
 8000fde:	e7fe      	b.n	8000fde <BusFault_Handler+0x4>

08000fe0 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000fe0:	b480      	push	{r7}
 8000fe2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1) {
 8000fe4:	e7fe      	b.n	8000fe4 <UsageFault_Handler+0x4>

08000fe6 <DebugMon_Handler>:
}

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000fe6:	b480      	push	{r7}
 8000fe8:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000fea:	bf00      	nop
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bc80      	pop	{r7}
 8000ff0:	4770      	bx	lr

08000ff2 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8000ff6:	f000 f8df 	bl	80011b8 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
    if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8000ffa:	f002 ff89 	bl	8003f10 <xTaskGetSchedulerState>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b01      	cmp	r3, #1
 8001002:	d001      	beq.n	8001008 <SysTick_Handler+0x16>
#endif /* INCLUDE_xTaskGetSchedulerState */
        xPortSysTickHandler();
 8001004:	f003 fcd0 	bl	80049a8 <xPortSysTickHandler>
    }
#endif /* INCLUDE_xTaskGetSchedulerState */
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8001008:	bf00      	nop
 800100a:	bd80      	pop	{r7, pc}

0800100c <_sbrk>:
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
 8001014:	4a14      	ldr	r2, [pc, #80]	; (8001068 <_sbrk+0x5c>)
 8001016:	4b15      	ldr	r3, [pc, #84]	; (800106c <_sbrk+0x60>)
 8001018:	1ad3      	subs	r3, r2, r3
 800101a:	617b      	str	r3, [r7, #20]
 800101c:	697b      	ldr	r3, [r7, #20]
 800101e:	613b      	str	r3, [r7, #16]
 8001020:	4b13      	ldr	r3, [pc, #76]	; (8001070 <_sbrk+0x64>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d102      	bne.n	800102e <_sbrk+0x22>
 8001028:	4b11      	ldr	r3, [pc, #68]	; (8001070 <_sbrk+0x64>)
 800102a:	4a12      	ldr	r2, [pc, #72]	; (8001074 <_sbrk+0x68>)
 800102c:	601a      	str	r2, [r3, #0]
 800102e:	4b10      	ldr	r3, [pc, #64]	; (8001070 <_sbrk+0x64>)
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4413      	add	r3, r2
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	429a      	cmp	r2, r3
 800103a:	d207      	bcs.n	800104c <_sbrk+0x40>
 800103c:	f003 ff06 	bl	8004e4c <__errno>
 8001040:	4602      	mov	r2, r0
 8001042:	230c      	movs	r3, #12
 8001044:	6013      	str	r3, [r2, #0]
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	e009      	b.n	8001060 <_sbrk+0x54>
 800104c:	4b08      	ldr	r3, [pc, #32]	; (8001070 <_sbrk+0x64>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b07      	ldr	r3, [pc, #28]	; (8001070 <_sbrk+0x64>)
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	4413      	add	r3, r2
 800105a:	4a05      	ldr	r2, [pc, #20]	; (8001070 <_sbrk+0x64>)
 800105c:	6013      	str	r3, [r2, #0]
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	4618      	mov	r0, r3
 8001062:	3718      	adds	r7, #24
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	20005000 	.word	0x20005000
 800106c:	00000400 	.word	0x00000400
 8001070:	200000d4 	.word	0x200000d4
 8001074:	20002f40 	.word	0x20002f40

08001078 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800107c:	4b15      	ldr	r3, [pc, #84]	; (80010d4 <SystemInit+0x5c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a14      	ldr	r2, [pc, #80]	; (80010d4 <SystemInit+0x5c>)
 8001082:	f043 0301 	orr.w	r3, r3, #1
 8001086:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 8001088:	4b12      	ldr	r3, [pc, #72]	; (80010d4 <SystemInit+0x5c>)
 800108a:	685a      	ldr	r2, [r3, #4]
 800108c:	4911      	ldr	r1, [pc, #68]	; (80010d4 <SystemInit+0x5c>)
 800108e:	4b12      	ldr	r3, [pc, #72]	; (80010d8 <SystemInit+0x60>)
 8001090:	4013      	ands	r3, r2
 8001092:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001094:	4b0f      	ldr	r3, [pc, #60]	; (80010d4 <SystemInit+0x5c>)
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	4a0e      	ldr	r2, [pc, #56]	; (80010d4 <SystemInit+0x5c>)
 800109a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800109e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010a2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010a4:	4b0b      	ldr	r3, [pc, #44]	; (80010d4 <SystemInit+0x5c>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a0a      	ldr	r2, [pc, #40]	; (80010d4 <SystemInit+0x5c>)
 80010aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010ae:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80010b0:	4b08      	ldr	r3, [pc, #32]	; (80010d4 <SystemInit+0x5c>)
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	4a07      	ldr	r2, [pc, #28]	; (80010d4 <SystemInit+0x5c>)
 80010b6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80010ba:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80010bc:	4b05      	ldr	r3, [pc, #20]	; (80010d4 <SystemInit+0x5c>)
 80010be:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80010c2:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80010c4:	4b05      	ldr	r3, [pc, #20]	; (80010dc <SystemInit+0x64>)
 80010c6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010ca:	609a      	str	r2, [r3, #8]
#endif 
}
 80010cc:	bf00      	nop
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bc80      	pop	{r7}
 80010d2:	4770      	bx	lr
 80010d4:	40021000 	.word	0x40021000
 80010d8:	f8ff0000 	.word	0xf8ff0000
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <Reset_Handler>:
 80010e0:	2100      	movs	r1, #0
 80010e2:	e003      	b.n	80010ec <LoopCopyDataInit>

080010e4 <CopyDataInit>:
 80010e4:	4b0b      	ldr	r3, [pc, #44]	; (8001114 <LoopFillZerobss+0x14>)
 80010e6:	585b      	ldr	r3, [r3, r1]
 80010e8:	5043      	str	r3, [r0, r1]
 80010ea:	3104      	adds	r1, #4

080010ec <LoopCopyDataInit>:
 80010ec:	480a      	ldr	r0, [pc, #40]	; (8001118 <LoopFillZerobss+0x18>)
 80010ee:	4b0b      	ldr	r3, [pc, #44]	; (800111c <LoopFillZerobss+0x1c>)
 80010f0:	1842      	adds	r2, r0, r1
 80010f2:	429a      	cmp	r2, r3
 80010f4:	d3f6      	bcc.n	80010e4 <CopyDataInit>
 80010f6:	4a0a      	ldr	r2, [pc, #40]	; (8001120 <LoopFillZerobss+0x20>)
 80010f8:	e002      	b.n	8001100 <LoopFillZerobss>

080010fa <FillZerobss>:
 80010fa:	2300      	movs	r3, #0
 80010fc:	f842 3b04 	str.w	r3, [r2], #4

08001100 <LoopFillZerobss>:
 8001100:	4b08      	ldr	r3, [pc, #32]	; (8001124 <LoopFillZerobss+0x24>)
 8001102:	429a      	cmp	r2, r3
 8001104:	d3f9      	bcc.n	80010fa <FillZerobss>
 8001106:	f7ff ffb7 	bl	8001078 <SystemInit>
 800110a:	f003 fea5 	bl	8004e58 <__libc_init_array>
 800110e:	f7ff f84d 	bl	80001ac <main>
 8001112:	4770      	bx	lr
 8001114:	08005b80 	.word	0x08005b80
 8001118:	20000000 	.word	0x20000000
 800111c:	200000ac 	.word	0x200000ac
 8001120:	200000ac 	.word	0x200000ac
 8001124:	20002f3c 	.word	0x20002f3c

08001128 <ADC1_2_IRQHandler>:
 8001128:	e7fe      	b.n	8001128 <ADC1_2_IRQHandler>
	...

0800112c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001130:	4b08      	ldr	r3, [pc, #32]	; (8001154 <HAL_Init+0x28>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	4a07      	ldr	r2, [pc, #28]	; (8001154 <HAL_Init+0x28>)
 8001136:	f043 0310 	orr.w	r3, r3, #16
 800113a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800113c:	2003      	movs	r0, #3
 800113e:	f000 f907 	bl	8001350 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001142:	2000      	movs	r0, #0
 8001144:	f000 f808 	bl	8001158 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001148:	f7ff fe9c 	bl	8000e84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800114c:	2300      	movs	r3, #0
}
 800114e:	4618      	mov	r0, r3
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	40022000 	.word	0x40022000

08001158 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001160:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_InitTick+0x54>)
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_InitTick+0x58>)
 8001166:	781b      	ldrb	r3, [r3, #0]
 8001168:	4619      	mov	r1, r3
 800116a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800116e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001172:	fbb2 f3f3 	udiv	r3, r2, r3
 8001176:	4618      	mov	r0, r3
 8001178:	f000 f911 	bl	800139e <HAL_SYSTICK_Config>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001182:	2301      	movs	r3, #1
 8001184:	e00e      	b.n	80011a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b0f      	cmp	r3, #15
 800118a:	d80a      	bhi.n	80011a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800118c:	2200      	movs	r2, #0
 800118e:	6879      	ldr	r1, [r7, #4]
 8001190:	f04f 30ff 	mov.w	r0, #4294967295
 8001194:	f000 f8e7 	bl	8001366 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001198:	4a06      	ldr	r2, [pc, #24]	; (80011b4 <HAL_InitTick+0x5c>)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800119e:	2300      	movs	r3, #0
 80011a0:	e000      	b.n	80011a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	20000038 	.word	0x20000038
 80011b0:	20000040 	.word	0x20000040
 80011b4:	2000003c 	.word	0x2000003c

080011b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011bc:	4b05      	ldr	r3, [pc, #20]	; (80011d4 <HAL_IncTick+0x1c>)
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	461a      	mov	r2, r3
 80011c2:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_IncTick+0x20>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	4413      	add	r3, r2
 80011c8:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <HAL_IncTick+0x20>)
 80011ca:	6013      	str	r3, [r2, #0]
}
 80011cc:	bf00      	nop
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bc80      	pop	{r7}
 80011d2:	4770      	bx	lr
 80011d4:	20000040 	.word	0x20000040
 80011d8:	20002ef4 	.word	0x20002ef4

080011dc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return uwTick;
 80011e0:	4b02      	ldr	r3, [pc, #8]	; (80011ec <HAL_GetTick+0x10>)
 80011e2:	681b      	ldr	r3, [r3, #0]
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bc80      	pop	{r7}
 80011ea:	4770      	bx	lr
 80011ec:	20002ef4 	.word	0x20002ef4

080011f0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f003 0307 	and.w	r3, r3, #7
 80011fe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001202:	68db      	ldr	r3, [r3, #12]
 8001204:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001206:	68ba      	ldr	r2, [r7, #8]
 8001208:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800120c:	4013      	ands	r3, r2
 800120e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001218:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800121c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001220:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001222:	4a04      	ldr	r2, [pc, #16]	; (8001234 <__NVIC_SetPriorityGrouping+0x44>)
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	60d3      	str	r3, [r2, #12]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bc80      	pop	{r7}
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop
 8001234:	e000ed00 	.word	0xe000ed00

08001238 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001238:	b480      	push	{r7}
 800123a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800123c:	4b04      	ldr	r3, [pc, #16]	; (8001250 <__NVIC_GetPriorityGrouping+0x18>)
 800123e:	68db      	ldr	r3, [r3, #12]
 8001240:	0a1b      	lsrs	r3, r3, #8
 8001242:	f003 0307 	and.w	r3, r3, #7
}
 8001246:	4618      	mov	r0, r3
 8001248:	46bd      	mov	sp, r7
 800124a:	bc80      	pop	{r7}
 800124c:	4770      	bx	lr
 800124e:	bf00      	nop
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	4603      	mov	r3, r0
 800125c:	6039      	str	r1, [r7, #0]
 800125e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001260:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001264:	2b00      	cmp	r3, #0
 8001266:	db0a      	blt.n	800127e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	b2da      	uxtb	r2, r3
 800126c:	490c      	ldr	r1, [pc, #48]	; (80012a0 <__NVIC_SetPriority+0x4c>)
 800126e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001272:	0112      	lsls	r2, r2, #4
 8001274:	b2d2      	uxtb	r2, r2
 8001276:	440b      	add	r3, r1
 8001278:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800127c:	e00a      	b.n	8001294 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	b2da      	uxtb	r2, r3
 8001282:	4908      	ldr	r1, [pc, #32]	; (80012a4 <__NVIC_SetPriority+0x50>)
 8001284:	79fb      	ldrb	r3, [r7, #7]
 8001286:	f003 030f 	and.w	r3, r3, #15
 800128a:	3b04      	subs	r3, #4
 800128c:	0112      	lsls	r2, r2, #4
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	440b      	add	r3, r1
 8001292:	761a      	strb	r2, [r3, #24]
}
 8001294:	bf00      	nop
 8001296:	370c      	adds	r7, #12
 8001298:	46bd      	mov	sp, r7
 800129a:	bc80      	pop	{r7}
 800129c:	4770      	bx	lr
 800129e:	bf00      	nop
 80012a0:	e000e100 	.word	0xe000e100
 80012a4:	e000ed00 	.word	0xe000ed00

080012a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b089      	sub	sp, #36	; 0x24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	f003 0307 	and.w	r3, r3, #7
 80012ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012bc:	69fb      	ldr	r3, [r7, #28]
 80012be:	f1c3 0307 	rsb	r3, r3, #7
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	bf28      	it	cs
 80012c6:	2304      	movcs	r3, #4
 80012c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012ca:	69fb      	ldr	r3, [r7, #28]
 80012cc:	3304      	adds	r3, #4
 80012ce:	2b06      	cmp	r3, #6
 80012d0:	d902      	bls.n	80012d8 <NVIC_EncodePriority+0x30>
 80012d2:	69fb      	ldr	r3, [r7, #28]
 80012d4:	3b03      	subs	r3, #3
 80012d6:	e000      	b.n	80012da <NVIC_EncodePriority+0x32>
 80012d8:	2300      	movs	r3, #0
 80012da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012dc:	f04f 32ff 	mov.w	r2, #4294967295
 80012e0:	69bb      	ldr	r3, [r7, #24]
 80012e2:	fa02 f303 	lsl.w	r3, r2, r3
 80012e6:	43da      	mvns	r2, r3
 80012e8:	68bb      	ldr	r3, [r7, #8]
 80012ea:	401a      	ands	r2, r3
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012f0:	f04f 31ff 	mov.w	r1, #4294967295
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	fa01 f303 	lsl.w	r3, r1, r3
 80012fa:	43d9      	mvns	r1, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001300:	4313      	orrs	r3, r2
         );
}
 8001302:	4618      	mov	r0, r3
 8001304:	3724      	adds	r7, #36	; 0x24
 8001306:	46bd      	mov	sp, r7
 8001308:	bc80      	pop	{r7}
 800130a:	4770      	bx	lr

0800130c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3b01      	subs	r3, #1
 8001318:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800131c:	d301      	bcc.n	8001322 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800131e:	2301      	movs	r3, #1
 8001320:	e00f      	b.n	8001342 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001322:	4a0a      	ldr	r2, [pc, #40]	; (800134c <SysTick_Config+0x40>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	3b01      	subs	r3, #1
 8001328:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800132a:	210f      	movs	r1, #15
 800132c:	f04f 30ff 	mov.w	r0, #4294967295
 8001330:	f7ff ff90 	bl	8001254 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001334:	4b05      	ldr	r3, [pc, #20]	; (800134c <SysTick_Config+0x40>)
 8001336:	2200      	movs	r2, #0
 8001338:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800133a:	4b04      	ldr	r3, [pc, #16]	; (800134c <SysTick_Config+0x40>)
 800133c:	2207      	movs	r2, #7
 800133e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	e000e010 	.word	0xe000e010

08001350 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ff49 	bl	80011f0 <__NVIC_SetPriorityGrouping>
}
 800135e:	bf00      	nop
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}

08001366 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001366:	b580      	push	{r7, lr}
 8001368:	b086      	sub	sp, #24
 800136a:	af00      	add	r7, sp, #0
 800136c:	4603      	mov	r3, r0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001374:	2300      	movs	r3, #0
 8001376:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001378:	f7ff ff5e 	bl	8001238 <__NVIC_GetPriorityGrouping>
 800137c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	68b9      	ldr	r1, [r7, #8]
 8001382:	6978      	ldr	r0, [r7, #20]
 8001384:	f7ff ff90 	bl	80012a8 <NVIC_EncodePriority>
 8001388:	4602      	mov	r2, r0
 800138a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800138e:	4611      	mov	r1, r2
 8001390:	4618      	mov	r0, r3
 8001392:	f7ff ff5f 	bl	8001254 <__NVIC_SetPriority>
}
 8001396:	bf00      	nop
 8001398:	3718      	adds	r7, #24
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}

0800139e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800139e:	b580      	push	{r7, lr}
 80013a0:	b082      	sub	sp, #8
 80013a2:	af00      	add	r7, sp, #0
 80013a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013a6:	6878      	ldr	r0, [r7, #4]
 80013a8:	f7ff ffb0 	bl	800130c <SysTick_Config>
 80013ac:	4603      	mov	r3, r0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
	...

080013b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b08b      	sub	sp, #44	; 0x2c
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
 80013c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013ca:	e127      	b.n	800161c <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80013cc:	2201      	movs	r2, #1
 80013ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	69fa      	ldr	r2, [r7, #28]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80013e0:	69ba      	ldr	r2, [r7, #24]
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	429a      	cmp	r2, r3
 80013e6:	f040 8116 	bne.w	8001616 <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80013ea:	683b      	ldr	r3, [r7, #0]
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	2b12      	cmp	r3, #18
 80013f0:	d034      	beq.n	800145c <HAL_GPIO_Init+0xa4>
 80013f2:	2b12      	cmp	r3, #18
 80013f4:	d80d      	bhi.n	8001412 <HAL_GPIO_Init+0x5a>
 80013f6:	2b02      	cmp	r3, #2
 80013f8:	d02b      	beq.n	8001452 <HAL_GPIO_Init+0x9a>
 80013fa:	2b02      	cmp	r3, #2
 80013fc:	d804      	bhi.n	8001408 <HAL_GPIO_Init+0x50>
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d031      	beq.n	8001466 <HAL_GPIO_Init+0xae>
 8001402:	2b01      	cmp	r3, #1
 8001404:	d01c      	beq.n	8001440 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001406:	e048      	b.n	800149a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001408:	2b03      	cmp	r3, #3
 800140a:	d043      	beq.n	8001494 <HAL_GPIO_Init+0xdc>
 800140c:	2b11      	cmp	r3, #17
 800140e:	d01b      	beq.n	8001448 <HAL_GPIO_Init+0x90>
          break;
 8001410:	e043      	b.n	800149a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001412:	4a89      	ldr	r2, [pc, #548]	; (8001638 <HAL_GPIO_Init+0x280>)
 8001414:	4293      	cmp	r3, r2
 8001416:	d026      	beq.n	8001466 <HAL_GPIO_Init+0xae>
 8001418:	4a87      	ldr	r2, [pc, #540]	; (8001638 <HAL_GPIO_Init+0x280>)
 800141a:	4293      	cmp	r3, r2
 800141c:	d806      	bhi.n	800142c <HAL_GPIO_Init+0x74>
 800141e:	4a87      	ldr	r2, [pc, #540]	; (800163c <HAL_GPIO_Init+0x284>)
 8001420:	4293      	cmp	r3, r2
 8001422:	d020      	beq.n	8001466 <HAL_GPIO_Init+0xae>
 8001424:	4a86      	ldr	r2, [pc, #536]	; (8001640 <HAL_GPIO_Init+0x288>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d01d      	beq.n	8001466 <HAL_GPIO_Init+0xae>
          break;
 800142a:	e036      	b.n	800149a <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800142c:	4a85      	ldr	r2, [pc, #532]	; (8001644 <HAL_GPIO_Init+0x28c>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d019      	beq.n	8001466 <HAL_GPIO_Init+0xae>
 8001432:	4a85      	ldr	r2, [pc, #532]	; (8001648 <HAL_GPIO_Init+0x290>)
 8001434:	4293      	cmp	r3, r2
 8001436:	d016      	beq.n	8001466 <HAL_GPIO_Init+0xae>
 8001438:	4a84      	ldr	r2, [pc, #528]	; (800164c <HAL_GPIO_Init+0x294>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d013      	beq.n	8001466 <HAL_GPIO_Init+0xae>
          break;
 800143e:	e02c      	b.n	800149a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	68db      	ldr	r3, [r3, #12]
 8001444:	623b      	str	r3, [r7, #32]
          break;
 8001446:	e028      	b.n	800149a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	68db      	ldr	r3, [r3, #12]
 800144c:	3304      	adds	r3, #4
 800144e:	623b      	str	r3, [r7, #32]
          break;
 8001450:	e023      	b.n	800149a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001452:	683b      	ldr	r3, [r7, #0]
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	3308      	adds	r3, #8
 8001458:	623b      	str	r3, [r7, #32]
          break;
 800145a:	e01e      	b.n	800149a <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	68db      	ldr	r3, [r3, #12]
 8001460:	330c      	adds	r3, #12
 8001462:	623b      	str	r3, [r7, #32]
          break;
 8001464:	e019      	b.n	800149a <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	689b      	ldr	r3, [r3, #8]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d102      	bne.n	8001474 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800146e:	2304      	movs	r3, #4
 8001470:	623b      	str	r3, [r7, #32]
          break;
 8001472:	e012      	b.n	800149a <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d105      	bne.n	8001488 <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800147c:	2308      	movs	r3, #8
 800147e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	69fa      	ldr	r2, [r7, #28]
 8001484:	611a      	str	r2, [r3, #16]
          break;
 8001486:	e008      	b.n	800149a <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001488:	2308      	movs	r3, #8
 800148a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69fa      	ldr	r2, [r7, #28]
 8001490:	615a      	str	r2, [r3, #20]
          break;
 8001492:	e002      	b.n	800149a <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001494:	2300      	movs	r3, #0
 8001496:	623b      	str	r3, [r7, #32]
          break;
 8001498:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800149a:	69bb      	ldr	r3, [r7, #24]
 800149c:	2bff      	cmp	r3, #255	; 0xff
 800149e:	d801      	bhi.n	80014a4 <HAL_GPIO_Init+0xec>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	e001      	b.n	80014a8 <HAL_GPIO_Init+0xf0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3304      	adds	r3, #4
 80014a8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80014aa:	69bb      	ldr	r3, [r7, #24]
 80014ac:	2bff      	cmp	r3, #255	; 0xff
 80014ae:	d802      	bhi.n	80014b6 <HAL_GPIO_Init+0xfe>
 80014b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	e002      	b.n	80014bc <HAL_GPIO_Init+0x104>
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	3b08      	subs	r3, #8
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	210f      	movs	r1, #15
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	fa01 f303 	lsl.w	r3, r1, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	401a      	ands	r2, r3
 80014ce:	6a39      	ldr	r1, [r7, #32]
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	fa01 f303 	lsl.w	r3, r1, r3
 80014d6:	431a      	orrs	r2, r3
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	685b      	ldr	r3, [r3, #4]
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 8096 	beq.w	8001616 <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80014ea:	4b59      	ldr	r3, [pc, #356]	; (8001650 <HAL_GPIO_Init+0x298>)
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	4a58      	ldr	r2, [pc, #352]	; (8001650 <HAL_GPIO_Init+0x298>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	6193      	str	r3, [r2, #24]
 80014f6:	4b56      	ldr	r3, [pc, #344]	; (8001650 <HAL_GPIO_Init+0x298>)
 80014f8:	699b      	ldr	r3, [r3, #24]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001502:	4a54      	ldr	r2, [pc, #336]	; (8001654 <HAL_GPIO_Init+0x29c>)
 8001504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001506:	089b      	lsrs	r3, r3, #2
 8001508:	3302      	adds	r3, #2
 800150a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800150e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	220f      	movs	r2, #15
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	43db      	mvns	r3, r3
 8001520:	68fa      	ldr	r2, [r7, #12]
 8001522:	4013      	ands	r3, r2
 8001524:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a4b      	ldr	r2, [pc, #300]	; (8001658 <HAL_GPIO_Init+0x2a0>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d013      	beq.n	8001556 <HAL_GPIO_Init+0x19e>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a4a      	ldr	r2, [pc, #296]	; (800165c <HAL_GPIO_Init+0x2a4>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d00d      	beq.n	8001552 <HAL_GPIO_Init+0x19a>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a49      	ldr	r2, [pc, #292]	; (8001660 <HAL_GPIO_Init+0x2a8>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d007      	beq.n	800154e <HAL_GPIO_Init+0x196>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a48      	ldr	r2, [pc, #288]	; (8001664 <HAL_GPIO_Init+0x2ac>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d101      	bne.n	800154a <HAL_GPIO_Init+0x192>
 8001546:	2303      	movs	r3, #3
 8001548:	e006      	b.n	8001558 <HAL_GPIO_Init+0x1a0>
 800154a:	2304      	movs	r3, #4
 800154c:	e004      	b.n	8001558 <HAL_GPIO_Init+0x1a0>
 800154e:	2302      	movs	r3, #2
 8001550:	e002      	b.n	8001558 <HAL_GPIO_Init+0x1a0>
 8001552:	2301      	movs	r3, #1
 8001554:	e000      	b.n	8001558 <HAL_GPIO_Init+0x1a0>
 8001556:	2300      	movs	r3, #0
 8001558:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155a:	f002 0203 	and.w	r2, r2, #3
 800155e:	0092      	lsls	r2, r2, #2
 8001560:	4093      	lsls	r3, r2
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4313      	orrs	r3, r2
 8001566:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001568:	493a      	ldr	r1, [pc, #232]	; (8001654 <HAL_GPIO_Init+0x29c>)
 800156a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156c:	089b      	lsrs	r3, r3, #2
 800156e:	3302      	adds	r3, #2
 8001570:	68fa      	ldr	r2, [r7, #12]
 8001572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d006      	beq.n	8001590 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001582:	4b39      	ldr	r3, [pc, #228]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4938      	ldr	r1, [pc, #224]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	4313      	orrs	r3, r2
 800158c:	600b      	str	r3, [r1, #0]
 800158e:	e006      	b.n	800159e <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001590:	4b35      	ldr	r3, [pc, #212]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 8001592:	681a      	ldr	r2, [r3, #0]
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	43db      	mvns	r3, r3
 8001598:	4933      	ldr	r1, [pc, #204]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 800159a:	4013      	ands	r3, r2
 800159c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d006      	beq.n	80015b8 <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80015aa:	4b2f      	ldr	r3, [pc, #188]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 80015ac:	685a      	ldr	r2, [r3, #4]
 80015ae:	492e      	ldr	r1, [pc, #184]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	604b      	str	r3, [r1, #4]
 80015b6:	e006      	b.n	80015c6 <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80015b8:	4b2b      	ldr	r3, [pc, #172]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 80015ba:	685a      	ldr	r2, [r3, #4]
 80015bc:	69bb      	ldr	r3, [r7, #24]
 80015be:	43db      	mvns	r3, r3
 80015c0:	4929      	ldr	r1, [pc, #164]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d006      	beq.n	80015e0 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80015d2:	4b25      	ldr	r3, [pc, #148]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 80015d4:	689a      	ldr	r2, [r3, #8]
 80015d6:	4924      	ldr	r1, [pc, #144]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 80015d8:	69bb      	ldr	r3, [r7, #24]
 80015da:	4313      	orrs	r3, r2
 80015dc:	608b      	str	r3, [r1, #8]
 80015de:	e006      	b.n	80015ee <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80015e0:	4b21      	ldr	r3, [pc, #132]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	69bb      	ldr	r3, [r7, #24]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	491f      	ldr	r1, [pc, #124]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015ee:	683b      	ldr	r3, [r7, #0]
 80015f0:	685b      	ldr	r3, [r3, #4]
 80015f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d006      	beq.n	8001608 <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80015fa:	4b1b      	ldr	r3, [pc, #108]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 80015fc:	68da      	ldr	r2, [r3, #12]
 80015fe:	491a      	ldr	r1, [pc, #104]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 8001600:	69bb      	ldr	r3, [r7, #24]
 8001602:	4313      	orrs	r3, r2
 8001604:	60cb      	str	r3, [r1, #12]
 8001606:	e006      	b.n	8001616 <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001608:	4b17      	ldr	r3, [pc, #92]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	69bb      	ldr	r3, [r7, #24]
 800160e:	43db      	mvns	r3, r3
 8001610:	4915      	ldr	r1, [pc, #84]	; (8001668 <HAL_GPIO_Init+0x2b0>)
 8001612:	4013      	ands	r3, r2
 8001614:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001616:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001618:	3301      	adds	r3, #1
 800161a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	681a      	ldr	r2, [r3, #0]
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	fa22 f303 	lsr.w	r3, r2, r3
 8001626:	2b00      	cmp	r3, #0
 8001628:	f47f aed0 	bne.w	80013cc <HAL_GPIO_Init+0x14>
  }
}
 800162c:	bf00      	nop
 800162e:	372c      	adds	r7, #44	; 0x2c
 8001630:	46bd      	mov	sp, r7
 8001632:	bc80      	pop	{r7}
 8001634:	4770      	bx	lr
 8001636:	bf00      	nop
 8001638:	10210000 	.word	0x10210000
 800163c:	10110000 	.word	0x10110000
 8001640:	10120000 	.word	0x10120000
 8001644:	10310000 	.word	0x10310000
 8001648:	10320000 	.word	0x10320000
 800164c:	10220000 	.word	0x10220000
 8001650:	40021000 	.word	0x40021000
 8001654:	40010000 	.word	0x40010000
 8001658:	40010800 	.word	0x40010800
 800165c:	40010c00 	.word	0x40010c00
 8001660:	40011000 	.word	0x40011000
 8001664:	40011400 	.word	0x40011400
 8001668:	40010400 	.word	0x40010400

0800166c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800166c:	b480      	push	{r7}
 800166e:	b083      	sub	sp, #12
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
 8001674:	460b      	mov	r3, r1
 8001676:	807b      	strh	r3, [r7, #2]
 8001678:	4613      	mov	r3, r2
 800167a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800167c:	787b      	ldrb	r3, [r7, #1]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d003      	beq.n	800168a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001682:	887a      	ldrh	r2, [r7, #2]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001688:	e003      	b.n	8001692 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800168a:	887b      	ldrh	r3, [r7, #2]
 800168c:	041a      	lsls	r2, r3, #16
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	611a      	str	r2, [r3, #16]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	bc80      	pop	{r7}
 800169a:	4770      	bx	lr

0800169c <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800169c:	b480      	push	{r7}
 800169e:	b083      	sub	sp, #12
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
 80016a4:	460b      	mov	r3, r1
 80016a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	887b      	ldrh	r3, [r7, #2]
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d003      	beq.n	80016bc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016b4:	887a      	ldrh	r2, [r7, #2]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	615a      	str	r2, [r3, #20]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 80016ba:	e002      	b.n	80016c2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016bc:	887a      	ldrh	r2, [r7, #2]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	611a      	str	r2, [r3, #16]
}
 80016c2:	bf00      	nop
 80016c4:	370c      	adds	r7, #12
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bc80      	pop	{r7}
 80016ca:	4770      	bx	lr

080016cc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80016cc:	b580      	push	{r7, lr}
 80016ce:	b086      	sub	sp, #24
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d101      	bne.n	80016de <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e26c      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	f000 8087 	beq.w	80017fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80016ec:	4b92      	ldr	r3, [pc, #584]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f003 030c 	and.w	r3, r3, #12
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d00c      	beq.n	8001712 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80016f8:	4b8f      	ldr	r3, [pc, #572]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 030c 	and.w	r3, r3, #12
 8001700:	2b08      	cmp	r3, #8
 8001702:	d112      	bne.n	800172a <HAL_RCC_OscConfig+0x5e>
 8001704:	4b8c      	ldr	r3, [pc, #560]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001710:	d10b      	bne.n	800172a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001712:	4b89      	ldr	r3, [pc, #548]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d06c      	beq.n	80017f8 <HAL_RCC_OscConfig+0x12c>
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	2b00      	cmp	r3, #0
 8001724:	d168      	bne.n	80017f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e246      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	685b      	ldr	r3, [r3, #4]
 800172e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001732:	d106      	bne.n	8001742 <HAL_RCC_OscConfig+0x76>
 8001734:	4b80      	ldr	r3, [pc, #512]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a7f      	ldr	r2, [pc, #508]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800173a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e02e      	b.n	80017a0 <HAL_RCC_OscConfig+0xd4>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10c      	bne.n	8001764 <HAL_RCC_OscConfig+0x98>
 800174a:	4b7b      	ldr	r3, [pc, #492]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4a7a      	ldr	r2, [pc, #488]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001750:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	4b78      	ldr	r3, [pc, #480]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a77      	ldr	r2, [pc, #476]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800175c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001760:	6013      	str	r3, [r2, #0]
 8001762:	e01d      	b.n	80017a0 <HAL_RCC_OscConfig+0xd4>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800176c:	d10c      	bne.n	8001788 <HAL_RCC_OscConfig+0xbc>
 800176e:	4b72      	ldr	r3, [pc, #456]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	4a71      	ldr	r2, [pc, #452]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6013      	str	r3, [r2, #0]
 800177a:	4b6f      	ldr	r3, [pc, #444]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4a6e      	ldr	r2, [pc, #440]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001784:	6013      	str	r3, [r2, #0]
 8001786:	e00b      	b.n	80017a0 <HAL_RCC_OscConfig+0xd4>
 8001788:	4b6b      	ldr	r3, [pc, #428]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a6a      	ldr	r2, [pc, #424]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800178e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001792:	6013      	str	r3, [r2, #0]
 8001794:	4b68      	ldr	r3, [pc, #416]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a67      	ldr	r2, [pc, #412]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800179a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800179e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d013      	beq.n	80017d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017a8:	f7ff fd18 	bl	80011dc <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017b0:	f7ff fd14 	bl	80011dc <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b64      	cmp	r3, #100	; 0x64
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e1fa      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017c2:	4b5d      	ldr	r3, [pc, #372]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d0f0      	beq.n	80017b0 <HAL_RCC_OscConfig+0xe4>
 80017ce:	e014      	b.n	80017fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d0:	f7ff fd04 	bl	80011dc <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017d6:	e008      	b.n	80017ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017d8:	f7ff fd00 	bl	80011dc <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	2b64      	cmp	r3, #100	; 0x64
 80017e4:	d901      	bls.n	80017ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e1e6      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80017ea:	4b53      	ldr	r3, [pc, #332]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d1f0      	bne.n	80017d8 <HAL_RCC_OscConfig+0x10c>
 80017f6:	e000      	b.n	80017fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f003 0302 	and.w	r3, r3, #2
 8001802:	2b00      	cmp	r3, #0
 8001804:	d063      	beq.n	80018ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001806:	4b4c      	ldr	r3, [pc, #304]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	f003 030c 	and.w	r3, r3, #12
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00b      	beq.n	800182a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001812:	4b49      	ldr	r3, [pc, #292]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 030c 	and.w	r3, r3, #12
 800181a:	2b08      	cmp	r3, #8
 800181c:	d11c      	bne.n	8001858 <HAL_RCC_OscConfig+0x18c>
 800181e:	4b46      	ldr	r3, [pc, #280]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d116      	bne.n	8001858 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800182a:	4b43      	ldr	r3, [pc, #268]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d005      	beq.n	8001842 <HAL_RCC_OscConfig+0x176>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	691b      	ldr	r3, [r3, #16]
 800183a:	2b01      	cmp	r3, #1
 800183c:	d001      	beq.n	8001842 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800183e:	2301      	movs	r3, #1
 8001840:	e1ba      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001842:	4b3d      	ldr	r3, [pc, #244]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	695b      	ldr	r3, [r3, #20]
 800184e:	00db      	lsls	r3, r3, #3
 8001850:	4939      	ldr	r1, [pc, #228]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001852:	4313      	orrs	r3, r2
 8001854:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001856:	e03a      	b.n	80018ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	691b      	ldr	r3, [r3, #16]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d020      	beq.n	80018a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001860:	4b36      	ldr	r3, [pc, #216]	; (800193c <HAL_RCC_OscConfig+0x270>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff fcb9 	bl	80011dc <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800186e:	f7ff fcb5 	bl	80011dc <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e19b      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001880:	4b2d      	ldr	r3, [pc, #180]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0302 	and.w	r3, r3, #2
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800188c:	4b2a      	ldr	r3, [pc, #168]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	695b      	ldr	r3, [r3, #20]
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	4927      	ldr	r1, [pc, #156]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 800189c:	4313      	orrs	r3, r2
 800189e:	600b      	str	r3, [r1, #0]
 80018a0:	e015      	b.n	80018ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018a2:	4b26      	ldr	r3, [pc, #152]	; (800193c <HAL_RCC_OscConfig+0x270>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a8:	f7ff fc98 	bl	80011dc <HAL_GetTick>
 80018ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018ae:	e008      	b.n	80018c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018b0:	f7ff fc94 	bl	80011dc <HAL_GetTick>
 80018b4:	4602      	mov	r2, r0
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	1ad3      	subs	r3, r2, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d901      	bls.n	80018c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80018be:	2303      	movs	r3, #3
 80018c0:	e17a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018c2:	4b1d      	ldr	r3, [pc, #116]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f003 0302 	and.w	r3, r3, #2
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d1f0      	bne.n	80018b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f003 0308 	and.w	r3, r3, #8
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d03a      	beq.n	8001950 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	699b      	ldr	r3, [r3, #24]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d019      	beq.n	8001916 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018e2:	4b17      	ldr	r3, [pc, #92]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 80018e4:	2201      	movs	r2, #1
 80018e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018e8:	f7ff fc78 	bl	80011dc <HAL_GetTick>
 80018ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018f0:	f7ff fc74 	bl	80011dc <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	693b      	ldr	r3, [r7, #16]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e15a      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001902:	4b0d      	ldr	r3, [pc, #52]	; (8001938 <HAL_RCC_OscConfig+0x26c>)
 8001904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001906:	f003 0302 	and.w	r3, r3, #2
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800190e:	2001      	movs	r0, #1
 8001910:	f000 fada 	bl	8001ec8 <RCC_Delay>
 8001914:	e01c      	b.n	8001950 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001916:	4b0a      	ldr	r3, [pc, #40]	; (8001940 <HAL_RCC_OscConfig+0x274>)
 8001918:	2200      	movs	r2, #0
 800191a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800191c:	f7ff fc5e 	bl	80011dc <HAL_GetTick>
 8001920:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001922:	e00f      	b.n	8001944 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001924:	f7ff fc5a 	bl	80011dc <HAL_GetTick>
 8001928:	4602      	mov	r2, r0
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	1ad3      	subs	r3, r2, r3
 800192e:	2b02      	cmp	r3, #2
 8001930:	d908      	bls.n	8001944 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e140      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
 8001936:	bf00      	nop
 8001938:	40021000 	.word	0x40021000
 800193c:	42420000 	.word	0x42420000
 8001940:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001944:	4b9e      	ldr	r3, [pc, #632]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	2b00      	cmp	r3, #0
 800194e:	d1e9      	bne.n	8001924 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f003 0304 	and.w	r3, r3, #4
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80a6 	beq.w	8001aaa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800195e:	2300      	movs	r3, #0
 8001960:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001962:	4b97      	ldr	r3, [pc, #604]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001964:	69db      	ldr	r3, [r3, #28]
 8001966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d10d      	bne.n	800198a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	4b94      	ldr	r3, [pc, #592]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001970:	69db      	ldr	r3, [r3, #28]
 8001972:	4a93      	ldr	r2, [pc, #588]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001974:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001978:	61d3      	str	r3, [r2, #28]
 800197a:	4b91      	ldr	r3, [pc, #580]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 800197c:	69db      	ldr	r3, [r3, #28]
 800197e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001982:	60bb      	str	r3, [r7, #8]
 8001984:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001986:	2301      	movs	r3, #1
 8001988:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800198a:	4b8e      	ldr	r3, [pc, #568]	; (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001992:	2b00      	cmp	r3, #0
 8001994:	d118      	bne.n	80019c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001996:	4b8b      	ldr	r3, [pc, #556]	; (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4a8a      	ldr	r2, [pc, #552]	; (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80019a2:	f7ff fc1b 	bl	80011dc <HAL_GetTick>
 80019a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019a8:	e008      	b.n	80019bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80019aa:	f7ff fc17 	bl	80011dc <HAL_GetTick>
 80019ae:	4602      	mov	r2, r0
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	1ad3      	subs	r3, r2, r3
 80019b4:	2b64      	cmp	r3, #100	; 0x64
 80019b6:	d901      	bls.n	80019bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80019b8:	2303      	movs	r3, #3
 80019ba:	e0fd      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80019bc:	4b81      	ldr	r3, [pc, #516]	; (8001bc4 <HAL_RCC_OscConfig+0x4f8>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d0f0      	beq.n	80019aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d106      	bne.n	80019de <HAL_RCC_OscConfig+0x312>
 80019d0:	4b7b      	ldr	r3, [pc, #492]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019d2:	6a1b      	ldr	r3, [r3, #32]
 80019d4:	4a7a      	ldr	r2, [pc, #488]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019d6:	f043 0301 	orr.w	r3, r3, #1
 80019da:	6213      	str	r3, [r2, #32]
 80019dc:	e02d      	b.n	8001a3a <HAL_RCC_OscConfig+0x36e>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	68db      	ldr	r3, [r3, #12]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d10c      	bne.n	8001a00 <HAL_RCC_OscConfig+0x334>
 80019e6:	4b76      	ldr	r3, [pc, #472]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019e8:	6a1b      	ldr	r3, [r3, #32]
 80019ea:	4a75      	ldr	r2, [pc, #468]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019ec:	f023 0301 	bic.w	r3, r3, #1
 80019f0:	6213      	str	r3, [r2, #32]
 80019f2:	4b73      	ldr	r3, [pc, #460]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019f4:	6a1b      	ldr	r3, [r3, #32]
 80019f6:	4a72      	ldr	r2, [pc, #456]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 80019f8:	f023 0304 	bic.w	r3, r3, #4
 80019fc:	6213      	str	r3, [r2, #32]
 80019fe:	e01c      	b.n	8001a3a <HAL_RCC_OscConfig+0x36e>
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	68db      	ldr	r3, [r3, #12]
 8001a04:	2b05      	cmp	r3, #5
 8001a06:	d10c      	bne.n	8001a22 <HAL_RCC_OscConfig+0x356>
 8001a08:	4b6d      	ldr	r3, [pc, #436]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a0a:	6a1b      	ldr	r3, [r3, #32]
 8001a0c:	4a6c      	ldr	r2, [pc, #432]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a0e:	f043 0304 	orr.w	r3, r3, #4
 8001a12:	6213      	str	r3, [r2, #32]
 8001a14:	4b6a      	ldr	r3, [pc, #424]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a16:	6a1b      	ldr	r3, [r3, #32]
 8001a18:	4a69      	ldr	r2, [pc, #420]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a1a:	f043 0301 	orr.w	r3, r3, #1
 8001a1e:	6213      	str	r3, [r2, #32]
 8001a20:	e00b      	b.n	8001a3a <HAL_RCC_OscConfig+0x36e>
 8001a22:	4b67      	ldr	r3, [pc, #412]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a24:	6a1b      	ldr	r3, [r3, #32]
 8001a26:	4a66      	ldr	r2, [pc, #408]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a28:	f023 0301 	bic.w	r3, r3, #1
 8001a2c:	6213      	str	r3, [r2, #32]
 8001a2e:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a30:	6a1b      	ldr	r3, [r3, #32]
 8001a32:	4a63      	ldr	r2, [pc, #396]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a34:	f023 0304 	bic.w	r3, r3, #4
 8001a38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d015      	beq.n	8001a6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a42:	f7ff fbcb 	bl	80011dc <HAL_GetTick>
 8001a46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a48:	e00a      	b.n	8001a60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a4a:	f7ff fbc7 	bl	80011dc <HAL_GetTick>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	693b      	ldr	r3, [r7, #16]
 8001a52:	1ad3      	subs	r3, r2, r3
 8001a54:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a58:	4293      	cmp	r3, r2
 8001a5a:	d901      	bls.n	8001a60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001a5c:	2303      	movs	r3, #3
 8001a5e:	e0ab      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a60:	4b57      	ldr	r3, [pc, #348]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f003 0302 	and.w	r3, r3, #2
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d0ee      	beq.n	8001a4a <HAL_RCC_OscConfig+0x37e>
 8001a6c:	e014      	b.n	8001a98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a6e:	f7ff fbb5 	bl	80011dc <HAL_GetTick>
 8001a72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a74:	e00a      	b.n	8001a8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a76:	f7ff fbb1 	bl	80011dc <HAL_GetTick>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	1ad3      	subs	r3, r2, r3
 8001a80:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e095      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a8c:	4b4c      	ldr	r3, [pc, #304]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001a8e:	6a1b      	ldr	r3, [r3, #32]
 8001a90:	f003 0302 	and.w	r3, r3, #2
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1ee      	bne.n	8001a76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001a98:	7dfb      	ldrb	r3, [r7, #23]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a9e:	4b48      	ldr	r3, [pc, #288]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa0:	69db      	ldr	r3, [r3, #28]
 8001aa2:	4a47      	ldr	r2, [pc, #284]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001aa4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001aa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	f000 8081 	beq.w	8001bb6 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001ab4:	4b42      	ldr	r3, [pc, #264]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 030c 	and.w	r3, r3, #12
 8001abc:	2b08      	cmp	r3, #8
 8001abe:	d061      	beq.n	8001b84 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	69db      	ldr	r3, [r3, #28]
 8001ac4:	2b02      	cmp	r3, #2
 8001ac6:	d146      	bne.n	8001b56 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ac8:	4b3f      	ldr	r3, [pc, #252]	; (8001bc8 <HAL_RCC_OscConfig+0x4fc>)
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ace:	f7ff fb85 	bl	80011dc <HAL_GetTick>
 8001ad2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ad6:	f7ff fb81 	bl	80011dc <HAL_GetTick>
 8001ada:	4602      	mov	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e067      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d1f0      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	6a1b      	ldr	r3, [r3, #32]
 8001af8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001afc:	d108      	bne.n	8001b10 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001afe:	4b30      	ldr	r3, [pc, #192]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	689b      	ldr	r3, [r3, #8]
 8001b0a:	492d      	ldr	r1, [pc, #180]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001b10:	4b2b      	ldr	r3, [pc, #172]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6a19      	ldr	r1, [r3, #32]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b20:	430b      	orrs	r3, r1
 8001b22:	4927      	ldr	r1, [pc, #156]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b28:	4b27      	ldr	r3, [pc, #156]	; (8001bc8 <HAL_RCC_OscConfig+0x4fc>)
 8001b2a:	2201      	movs	r2, #1
 8001b2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b2e:	f7ff fb55 	bl	80011dc <HAL_GetTick>
 8001b32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b34:	e008      	b.n	8001b48 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b36:	f7ff fb51 	bl	80011dc <HAL_GetTick>
 8001b3a:	4602      	mov	r2, r0
 8001b3c:	693b      	ldr	r3, [r7, #16]
 8001b3e:	1ad3      	subs	r3, r2, r3
 8001b40:	2b02      	cmp	r3, #2
 8001b42:	d901      	bls.n	8001b48 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001b44:	2303      	movs	r3, #3
 8001b46:	e037      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d0f0      	beq.n	8001b36 <HAL_RCC_OscConfig+0x46a>
 8001b54:	e02f      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b56:	4b1c      	ldr	r3, [pc, #112]	; (8001bc8 <HAL_RCC_OscConfig+0x4fc>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b5c:	f7ff fb3e 	bl	80011dc <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b64:	f7ff fb3a 	bl	80011dc <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e020      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b76:	4b12      	ldr	r3, [pc, #72]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d1f0      	bne.n	8001b64 <HAL_RCC_OscConfig+0x498>
 8001b82:	e018      	b.n	8001bb6 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d101      	bne.n	8001b90 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e013      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001b90:	4b0b      	ldr	r3, [pc, #44]	; (8001bc0 <HAL_RCC_OscConfig+0x4f4>)
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	d001      	beq.n	8001bb6 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e000      	b.n	8001bb8 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8001bb6:	2300      	movs	r3, #0
}
 8001bb8:	4618      	mov	r0, r3
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40007000 	.word	0x40007000
 8001bc8:	42420060 	.word	0x42420060

08001bcc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
 8001bd4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d101      	bne.n	8001be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0d0      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001be0:	4b6a      	ldr	r3, [pc, #424]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0307 	and.w	r3, r3, #7
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d910      	bls.n	8001c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bee:	4b67      	ldr	r3, [pc, #412]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 0207 	bic.w	r2, r3, #7
 8001bf6:	4965      	ldr	r1, [pc, #404]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfe:	4b63      	ldr	r3, [pc, #396]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0307 	and.w	r3, r3, #7
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	e0b8      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f003 0302 	and.w	r3, r3, #2
 8001c18:	2b00      	cmp	r3, #0
 8001c1a:	d020      	beq.n	8001c5e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f003 0304 	and.w	r3, r3, #4
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d005      	beq.n	8001c34 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c28:	4b59      	ldr	r3, [pc, #356]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	4a58      	ldr	r2, [pc, #352]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001c32:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f003 0308 	and.w	r3, r3, #8
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d005      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c40:	4b53      	ldr	r3, [pc, #332]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	4a52      	ldr	r2, [pc, #328]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c46:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001c4a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c4c:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	494d      	ldr	r1, [pc, #308]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c5a:	4313      	orrs	r3, r2
 8001c5c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d040      	beq.n	8001cec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d107      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c72:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d115      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c7e:	2301      	movs	r3, #1
 8001c80:	e07f      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	685b      	ldr	r3, [r3, #4]
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d107      	bne.n	8001c9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c8a:	4b41      	ldr	r3, [pc, #260]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d109      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e073      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c9a:	4b3d      	ldr	r3, [pc, #244]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0302 	and.w	r3, r3, #2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d101      	bne.n	8001caa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	e06b      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001caa:	4b39      	ldr	r3, [pc, #228]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cac:	685b      	ldr	r3, [r3, #4]
 8001cae:	f023 0203 	bic.w	r2, r3, #3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	685b      	ldr	r3, [r3, #4]
 8001cb6:	4936      	ldr	r1, [pc, #216]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001cbc:	f7ff fa8e 	bl	80011dc <HAL_GetTick>
 8001cc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc2:	e00a      	b.n	8001cda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cc4:	f7ff fa8a 	bl	80011dc <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d901      	bls.n	8001cda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001cd6:	2303      	movs	r3, #3
 8001cd8:	e053      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cda:	4b2d      	ldr	r3, [pc, #180]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f003 020c 	and.w	r2, r3, #12
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	d1eb      	bne.n	8001cc4 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cec:	4b27      	ldr	r3, [pc, #156]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0307 	and.w	r3, r3, #7
 8001cf4:	683a      	ldr	r2, [r7, #0]
 8001cf6:	429a      	cmp	r2, r3
 8001cf8:	d210      	bcs.n	8001d1c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cfa:	4b24      	ldr	r3, [pc, #144]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f023 0207 	bic.w	r2, r3, #7
 8001d02:	4922      	ldr	r1, [pc, #136]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d0a:	4b20      	ldr	r3, [pc, #128]	; (8001d8c <HAL_RCC_ClockConfig+0x1c0>)
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f003 0307 	and.w	r3, r3, #7
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d001      	beq.n	8001d1c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001d18:	2301      	movs	r3, #1
 8001d1a:	e032      	b.n	8001d82 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f003 0304 	and.w	r3, r3, #4
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d008      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d28:	4b19      	ldr	r3, [pc, #100]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4916      	ldr	r1, [pc, #88]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d36:	4313      	orrs	r3, r2
 8001d38:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	f003 0308 	and.w	r3, r3, #8
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d009      	beq.n	8001d5a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d46:	4b12      	ldr	r3, [pc, #72]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	691b      	ldr	r3, [r3, #16]
 8001d52:	00db      	lsls	r3, r3, #3
 8001d54:	490e      	ldr	r1, [pc, #56]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d56:	4313      	orrs	r3, r2
 8001d58:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d5a:	f000 f821 	bl	8001da0 <HAL_RCC_GetSysClockFreq>
 8001d5e:	4601      	mov	r1, r0
 8001d60:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_ClockConfig+0x1c4>)
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	091b      	lsrs	r3, r3, #4
 8001d66:	f003 030f 	and.w	r3, r3, #15
 8001d6a:	4a0a      	ldr	r2, [pc, #40]	; (8001d94 <HAL_RCC_ClockConfig+0x1c8>)
 8001d6c:	5cd3      	ldrb	r3, [r2, r3]
 8001d6e:	fa21 f303 	lsr.w	r3, r1, r3
 8001d72:	4a09      	ldr	r2, [pc, #36]	; (8001d98 <HAL_RCC_ClockConfig+0x1cc>)
 8001d74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <HAL_RCC_ClockConfig+0x1d0>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f7ff f9ec 	bl	8001158 <HAL_InitTick>

  return HAL_OK;
 8001d80:	2300      	movs	r3, #0
}
 8001d82:	4618      	mov	r0, r3
 8001d84:	3710      	adds	r7, #16
 8001d86:	46bd      	mov	sp, r7
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	40022000 	.word	0x40022000
 8001d90:	40021000 	.word	0x40021000
 8001d94:	08005b08 	.word	0x08005b08
 8001d98:	20000038 	.word	0x20000038
 8001d9c:	2000003c 	.word	0x2000003c

08001da0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001da0:	b490      	push	{r4, r7}
 8001da2:	b08a      	sub	sp, #40	; 0x28
 8001da4:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001da6:	4b2a      	ldr	r3, [pc, #168]	; (8001e50 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001da8:	1d3c      	adds	r4, r7, #4
 8001daa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001db0:	4b28      	ldr	r3, [pc, #160]	; (8001e54 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	61fb      	str	r3, [r7, #28]
 8001dba:	2300      	movs	r3, #0
 8001dbc:	61bb      	str	r3, [r7, #24]
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001dc6:	2300      	movs	r3, #0
 8001dc8:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001dca:	4b23      	ldr	r3, [pc, #140]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	f003 030c 	and.w	r3, r3, #12
 8001dd6:	2b04      	cmp	r3, #4
 8001dd8:	d002      	beq.n	8001de0 <HAL_RCC_GetSysClockFreq+0x40>
 8001dda:	2b08      	cmp	r3, #8
 8001ddc:	d003      	beq.n	8001de6 <HAL_RCC_GetSysClockFreq+0x46>
 8001dde:	e02d      	b.n	8001e3c <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001de0:	4b1e      	ldr	r3, [pc, #120]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001de2:	623b      	str	r3, [r7, #32]
      break;
 8001de4:	e02d      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001de6:	69fb      	ldr	r3, [r7, #28]
 8001de8:	0c9b      	lsrs	r3, r3, #18
 8001dea:	f003 030f 	and.w	r3, r3, #15
 8001dee:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001df2:	4413      	add	r3, r2
 8001df4:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001df8:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d013      	beq.n	8001e2c <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001e04:	4b14      	ldr	r3, [pc, #80]	; (8001e58 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	0c5b      	lsrs	r3, r3, #17
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001e12:	4413      	add	r3, r2
 8001e14:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001e18:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	4a0f      	ldr	r2, [pc, #60]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e1e:	fb02 f203 	mul.w	r2, r2, r3
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
 8001e2a:	e004      	b.n	8001e36 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	4a0c      	ldr	r2, [pc, #48]	; (8001e60 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001e30:	fb02 f303 	mul.w	r3, r2, r3
 8001e34:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e38:	623b      	str	r3, [r7, #32]
      break;
 8001e3a:	e002      	b.n	8001e42 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001e3c:	4b07      	ldr	r3, [pc, #28]	; (8001e5c <HAL_RCC_GetSysClockFreq+0xbc>)
 8001e3e:	623b      	str	r3, [r7, #32]
      break;
 8001e40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e42:	6a3b      	ldr	r3, [r7, #32]
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3728      	adds	r7, #40	; 0x28
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc90      	pop	{r4, r7}
 8001e4c:	4770      	bx	lr
 8001e4e:	bf00      	nop
 8001e50:	08005a3c 	.word	0x08005a3c
 8001e54:	08005a4c 	.word	0x08005a4c
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	007a1200 	.word	0x007a1200
 8001e60:	003d0900 	.word	0x003d0900

08001e64 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e68:	4b02      	ldr	r3, [pc, #8]	; (8001e74 <HAL_RCC_GetHCLKFreq+0x10>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
}
 8001e6c:	4618      	mov	r0, r3
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bc80      	pop	{r7}
 8001e72:	4770      	bx	lr
 8001e74:	20000038 	.word	0x20000038

08001e78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001e7c:	f7ff fff2 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001e80:	4601      	mov	r1, r0
 8001e82:	4b05      	ldr	r3, [pc, #20]	; (8001e98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	0a1b      	lsrs	r3, r3, #8
 8001e88:	f003 0307 	and.w	r3, r3, #7
 8001e8c:	4a03      	ldr	r2, [pc, #12]	; (8001e9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001e94:	4618      	mov	r0, r3
 8001e96:	bd80      	pop	{r7, pc}
 8001e98:	40021000 	.word	0x40021000
 8001e9c:	08005b18 	.word	0x08005b18

08001ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ea4:	f7ff ffde 	bl	8001e64 <HAL_RCC_GetHCLKFreq>
 8001ea8:	4601      	mov	r1, r0
 8001eaa:	4b05      	ldr	r3, [pc, #20]	; (8001ec0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	0adb      	lsrs	r3, r3, #11
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4a03      	ldr	r2, [pc, #12]	; (8001ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	08005b18 	.word	0x08005b18

08001ec8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ed0:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <RCC_Delay+0x34>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0a      	ldr	r2, [pc, #40]	; (8001f00 <RCC_Delay+0x38>)
 8001ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8001eda:	0a5b      	lsrs	r3, r3, #9
 8001edc:	687a      	ldr	r2, [r7, #4]
 8001ede:	fb02 f303 	mul.w	r3, r2, r3
 8001ee2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001ee4:	bf00      	nop
  }
  while (Delay --);
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	1e5a      	subs	r2, r3, #1
 8001eea:	60fa      	str	r2, [r7, #12]
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d1f9      	bne.n	8001ee4 <RCC_Delay+0x1c>
}
 8001ef0:	bf00      	nop
 8001ef2:	3714      	adds	r7, #20
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bc80      	pop	{r7}
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	20000038 	.word	0x20000038
 8001f00:	10624dd3 	.word	0x10624dd3

08001f04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b082      	sub	sp, #8
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d101      	bne.n	8001f16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001f12:	2301      	movs	r3, #1
 8001f14:	e03f      	b.n	8001f96 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d106      	bne.n	8001f30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2200      	movs	r2, #0
 8001f26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f7fe ffdc 	bl	8000ee8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2224      	movs	r2, #36	; 0x24
 8001f34:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68da      	ldr	r2, [r3, #12]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001f46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	f000 f90b 	bl	8002164 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	691a      	ldr	r2, [r3, #16]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001f5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	695a      	ldr	r2, [r3, #20]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001f6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	68da      	ldr	r2, [r3, #12]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001f7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2200      	movs	r2, #0
 8001f82:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2220      	movs	r2, #32
 8001f88:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001f94:	2300      	movs	r3, #0
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	3708      	adds	r7, #8
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	bd80      	pop	{r7, pc}

08001f9e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f9e:	b580      	push	{r7, lr}
 8001fa0:	b088      	sub	sp, #32
 8001fa2:	af02      	add	r7, sp, #8
 8001fa4:	60f8      	str	r0, [r7, #12]
 8001fa6:	60b9      	str	r1, [r7, #8]
 8001fa8:	603b      	str	r3, [r7, #0]
 8001faa:	4613      	mov	r3, r2
 8001fac:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b20      	cmp	r3, #32
 8001fbc:	f040 8083 	bne.w	80020c6 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001fc0:	68bb      	ldr	r3, [r7, #8]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <HAL_UART_Transmit+0x2e>
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e07b      	b.n	80020c8 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d101      	bne.n	8001fde <HAL_UART_Transmit+0x40>
 8001fda:	2302      	movs	r3, #2
 8001fdc:	e074      	b.n	80020c8 <HAL_UART_Transmit+0x12a>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2200      	movs	r2, #0
 8001fea:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001fec:	68fb      	ldr	r3, [r7, #12]
 8001fee:	2221      	movs	r2, #33	; 0x21
 8001ff0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001ff4:	f7ff f8f2 	bl	80011dc <HAL_GetTick>
 8001ff8:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	88fa      	ldrh	r2, [r7, #6]
 8001ffe:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	88fa      	ldrh	r2, [r7, #6]
 8002004:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002006:	e042      	b.n	800208e <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800200c:	b29b      	uxth	r3, r3
 800200e:	3b01      	subs	r3, #1
 8002010:	b29a      	uxth	r2, r3
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800201e:	d122      	bne.n	8002066 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	2200      	movs	r2, #0
 8002028:	2180      	movs	r1, #128	; 0x80
 800202a:	68f8      	ldr	r0, [r7, #12]
 800202c:	f000 f850 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d001      	beq.n	800203a <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	e046      	b.n	80020c8 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	881b      	ldrh	r3, [r3, #0]
 8002042:	461a      	mov	r2, r3
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800204c:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002056:	68bb      	ldr	r3, [r7, #8]
 8002058:	3302      	adds	r3, #2
 800205a:	60bb      	str	r3, [r7, #8]
 800205c:	e017      	b.n	800208e <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	3301      	adds	r3, #1
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	e013      	b.n	800208e <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002066:	683b      	ldr	r3, [r7, #0]
 8002068:	9300      	str	r3, [sp, #0]
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	2200      	movs	r2, #0
 800206e:	2180      	movs	r1, #128	; 0x80
 8002070:	68f8      	ldr	r0, [r7, #12]
 8002072:	f000 f82d 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 8002076:	4603      	mov	r3, r0
 8002078:	2b00      	cmp	r3, #0
 800207a:	d001      	beq.n	8002080 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 800207c:	2303      	movs	r3, #3
 800207e:	e023      	b.n	80020c8 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	1c5a      	adds	r2, r3, #1
 8002084:	60ba      	str	r2, [r7, #8]
 8002086:	781a      	ldrb	r2, [r3, #0]
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002092:	b29b      	uxth	r3, r3
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1b7      	bne.n	8002008 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	2200      	movs	r2, #0
 80020a0:	2140      	movs	r1, #64	; 0x40
 80020a2:	68f8      	ldr	r0, [r7, #12]
 80020a4:	f000 f814 	bl	80020d0 <UART_WaitOnFlagUntilTimeout>
 80020a8:	4603      	mov	r3, r0
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d001      	beq.n	80020b2 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e00a      	b.n	80020c8 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2220      	movs	r2, #32
 80020b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2200      	movs	r2, #0
 80020be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 80020c2:	2300      	movs	r3, #0
 80020c4:	e000      	b.n	80020c8 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 80020c6:	2302      	movs	r3, #2
  }
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}

080020d0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	60f8      	str	r0, [r7, #12]
 80020d8:	60b9      	str	r1, [r7, #8]
 80020da:	603b      	str	r3, [r7, #0]
 80020dc:	4613      	mov	r3, r2
 80020de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80020e0:	e02c      	b.n	800213c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020e2:	69bb      	ldr	r3, [r7, #24]
 80020e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80020e8:	d028      	beq.n	800213c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d007      	beq.n	8002100 <UART_WaitOnFlagUntilTimeout+0x30>
 80020f0:	f7ff f874 	bl	80011dc <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d21d      	bcs.n	800213c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	68da      	ldr	r2, [r3, #12]
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800210e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f022 0201 	bic.w	r2, r2, #1
 800211e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	2220      	movs	r2, #32
 8002124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2220      	movs	r2, #32
 800212c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8002138:	2303      	movs	r3, #3
 800213a:	e00f      	b.n	800215c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	4013      	ands	r3, r2
 8002146:	68ba      	ldr	r2, [r7, #8]
 8002148:	429a      	cmp	r2, r3
 800214a:	bf0c      	ite	eq
 800214c:	2301      	moveq	r3, #1
 800214e:	2300      	movne	r3, #0
 8002150:	b2db      	uxtb	r3, r3
 8002152:	461a      	mov	r2, r3
 8002154:	79fb      	ldrb	r3, [r7, #7]
 8002156:	429a      	cmp	r2, r3
 8002158:	d0c3      	beq.n	80020e2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800215a:	2300      	movs	r3, #0
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b084      	sub	sp, #16
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	691b      	ldr	r3, [r3, #16]
 8002172:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	68da      	ldr	r2, [r3, #12]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	430a      	orrs	r2, r1
 8002180:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	689a      	ldr	r2, [r3, #8]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	695b      	ldr	r3, [r3, #20]
 8002190:	4313      	orrs	r3, r2
 8002192:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	68db      	ldr	r3, [r3, #12]
 800219a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800219e:	f023 030c 	bic.w	r3, r3, #12
 80021a2:	687a      	ldr	r2, [r7, #4]
 80021a4:	6812      	ldr	r2, [r2, #0]
 80021a6:	68f9      	ldr	r1, [r7, #12]
 80021a8:	430b      	orrs	r3, r1
 80021aa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	695b      	ldr	r3, [r3, #20]
 80021b2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	699a      	ldr	r2, [r3, #24]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	430a      	orrs	r2, r1
 80021c0:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	4a52      	ldr	r2, [pc, #328]	; (8002310 <UART_SetConfig+0x1ac>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d14e      	bne.n	800226a <UART_SetConfig+0x106>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021cc:	f7ff fe68 	bl	8001ea0 <HAL_RCC_GetPCLK2Freq>
 80021d0:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021d2:	68ba      	ldr	r2, [r7, #8]
 80021d4:	4613      	mov	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	009a      	lsls	r2, r3, #2
 80021dc:	441a      	add	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e8:	4a4a      	ldr	r2, [pc, #296]	; (8002314 <UART_SetConfig+0x1b0>)
 80021ea:	fba2 2303 	umull	r2, r3, r2, r3
 80021ee:	095b      	lsrs	r3, r3, #5
 80021f0:	0119      	lsls	r1, r3, #4
 80021f2:	68ba      	ldr	r2, [r7, #8]
 80021f4:	4613      	mov	r3, r2
 80021f6:	009b      	lsls	r3, r3, #2
 80021f8:	4413      	add	r3, r2
 80021fa:	009a      	lsls	r2, r3, #2
 80021fc:	441a      	add	r2, r3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	009b      	lsls	r3, r3, #2
 8002204:	fbb2 f2f3 	udiv	r2, r2, r3
 8002208:	4b42      	ldr	r3, [pc, #264]	; (8002314 <UART_SetConfig+0x1b0>)
 800220a:	fba3 0302 	umull	r0, r3, r3, r2
 800220e:	095b      	lsrs	r3, r3, #5
 8002210:	2064      	movs	r0, #100	; 0x64
 8002212:	fb00 f303 	mul.w	r3, r0, r3
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	3332      	adds	r3, #50	; 0x32
 800221c:	4a3d      	ldr	r2, [pc, #244]	; (8002314 <UART_SetConfig+0x1b0>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002228:	4419      	add	r1, r3
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	4613      	mov	r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	4413      	add	r3, r2
 8002232:	009a      	lsls	r2, r3, #2
 8002234:	441a      	add	r2, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <UART_SetConfig+0x1b0>)
 8002242:	fba3 0302 	umull	r0, r3, r3, r2
 8002246:	095b      	lsrs	r3, r3, #5
 8002248:	2064      	movs	r0, #100	; 0x64
 800224a:	fb00 f303 	mul.w	r3, r0, r3
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	011b      	lsls	r3, r3, #4
 8002252:	3332      	adds	r3, #50	; 0x32
 8002254:	4a2f      	ldr	r2, [pc, #188]	; (8002314 <UART_SetConfig+0x1b0>)
 8002256:	fba2 2303 	umull	r2, r3, r2, r3
 800225a:	095b      	lsrs	r3, r3, #5
 800225c:	f003 020f 	and.w	r2, r3, #15
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	440a      	add	r2, r1
 8002266:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002268:	e04d      	b.n	8002306 <UART_SetConfig+0x1a2>
    pclk = HAL_RCC_GetPCLK1Freq();
 800226a:	f7ff fe05 	bl	8001e78 <HAL_RCC_GetPCLK1Freq>
 800226e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002270:	68ba      	ldr	r2, [r7, #8]
 8002272:	4613      	mov	r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	4413      	add	r3, r2
 8002278:	009a      	lsls	r2, r3, #2
 800227a:	441a      	add	r2, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	fbb2 f3f3 	udiv	r3, r2, r3
 8002286:	4a23      	ldr	r2, [pc, #140]	; (8002314 <UART_SetConfig+0x1b0>)
 8002288:	fba2 2303 	umull	r2, r3, r2, r3
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	0119      	lsls	r1, r3, #4
 8002290:	68ba      	ldr	r2, [r7, #8]
 8002292:	4613      	mov	r3, r2
 8002294:	009b      	lsls	r3, r3, #2
 8002296:	4413      	add	r3, r2
 8002298:	009a      	lsls	r2, r3, #2
 800229a:	441a      	add	r2, r3
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	685b      	ldr	r3, [r3, #4]
 80022a0:	009b      	lsls	r3, r3, #2
 80022a2:	fbb2 f2f3 	udiv	r2, r2, r3
 80022a6:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <UART_SetConfig+0x1b0>)
 80022a8:	fba3 0302 	umull	r0, r3, r3, r2
 80022ac:	095b      	lsrs	r3, r3, #5
 80022ae:	2064      	movs	r0, #100	; 0x64
 80022b0:	fb00 f303 	mul.w	r3, r0, r3
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	3332      	adds	r3, #50	; 0x32
 80022ba:	4a16      	ldr	r2, [pc, #88]	; (8002314 <UART_SetConfig+0x1b0>)
 80022bc:	fba2 2303 	umull	r2, r3, r2, r3
 80022c0:	095b      	lsrs	r3, r3, #5
 80022c2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80022c6:	4419      	add	r1, r3
 80022c8:	68ba      	ldr	r2, [r7, #8]
 80022ca:	4613      	mov	r3, r2
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	009a      	lsls	r2, r3, #2
 80022d2:	441a      	add	r2, r3
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	fbb2 f2f3 	udiv	r2, r2, r3
 80022de:	4b0d      	ldr	r3, [pc, #52]	; (8002314 <UART_SetConfig+0x1b0>)
 80022e0:	fba3 0302 	umull	r0, r3, r3, r2
 80022e4:	095b      	lsrs	r3, r3, #5
 80022e6:	2064      	movs	r0, #100	; 0x64
 80022e8:	fb00 f303 	mul.w	r3, r0, r3
 80022ec:	1ad3      	subs	r3, r2, r3
 80022ee:	011b      	lsls	r3, r3, #4
 80022f0:	3332      	adds	r3, #50	; 0x32
 80022f2:	4a08      	ldr	r2, [pc, #32]	; (8002314 <UART_SetConfig+0x1b0>)
 80022f4:	fba2 2303 	umull	r2, r3, r2, r3
 80022f8:	095b      	lsrs	r3, r3, #5
 80022fa:	f003 020f 	and.w	r2, r3, #15
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	440a      	add	r2, r1
 8002304:	609a      	str	r2, [r3, #8]
}
 8002306:	bf00      	nop
 8002308:	3710      	adds	r7, #16
 800230a:	46bd      	mov	sp, r7
 800230c:	bd80      	pop	{r7, pc}
 800230e:	bf00      	nop
 8002310:	40013800 	.word	0x40013800
 8002314:	51eb851f 	.word	0x51eb851f

08002318 <osKernelInitialize>:
}
#endif /* SysTick */

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8002318:	b480      	push	{r7}
 800231a:	b085      	sub	sp, #20
 800231c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800231e:	f3ef 8305 	mrs	r3, IPSR
 8002322:	60bb      	str	r3, [r7, #8]
  return(result);
 8002324:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002326:	2b00      	cmp	r3, #0
 8002328:	d10f      	bne.n	800234a <osKernelInitialize+0x32>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800232a:	f3ef 8310 	mrs	r3, PRIMASK
 800232e:	607b      	str	r3, [r7, #4]
  return(result);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d109      	bne.n	800234a <osKernelInitialize+0x32>
 8002336:	4b10      	ldr	r3, [pc, #64]	; (8002378 <osKernelInitialize+0x60>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	2b02      	cmp	r3, #2
 800233c:	d109      	bne.n	8002352 <osKernelInitialize+0x3a>
 */
__STATIC_FORCEINLINE uint32_t __get_BASEPRI(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800233e:	f3ef 8311 	mrs	r3, BASEPRI
 8002342:	603b      	str	r3, [r7, #0]
  return(result);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d003      	beq.n	8002352 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800234a:	f06f 0305 	mvn.w	r3, #5
 800234e:	60fb      	str	r3, [r7, #12]
 8002350:	e00c      	b.n	800236c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 8002352:	4b09      	ldr	r3, [pc, #36]	; (8002378 <osKernelInitialize+0x60>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d105      	bne.n	8002366 <osKernelInitialize+0x4e>
      #if defined(USE_FreeRTOS_HEAP_5)
        vPortDefineHeapRegions (xHeapRegions);
      #endif
      KernelState = osKernelReady;
 800235a:	4b07      	ldr	r3, [pc, #28]	; (8002378 <osKernelInitialize+0x60>)
 800235c:	2201      	movs	r2, #1
 800235e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8002360:	2300      	movs	r3, #0
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	e002      	b.n	800236c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 8002366:	f04f 33ff 	mov.w	r3, #4294967295
 800236a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800236c:	68fb      	ldr	r3, [r7, #12]
}
 800236e:	4618      	mov	r0, r3
 8002370:	3714      	adds	r7, #20
 8002372:	46bd      	mov	sp, r7
 8002374:	bc80      	pop	{r7}
 8002376:	4770      	bx	lr
 8002378:	200000d8 	.word	0x200000d8

0800237c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002382:	f3ef 8305 	mrs	r3, IPSR
 8002386:	60bb      	str	r3, [r7, #8]
  return(result);
 8002388:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800238a:	2b00      	cmp	r3, #0
 800238c:	d10f      	bne.n	80023ae <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800238e:	f3ef 8310 	mrs	r3, PRIMASK
 8002392:	607b      	str	r3, [r7, #4]
  return(result);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d109      	bne.n	80023ae <osKernelStart+0x32>
 800239a:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <osKernelStart+0x64>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	2b02      	cmp	r3, #2
 80023a0:	d109      	bne.n	80023b6 <osKernelStart+0x3a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80023a2:	f3ef 8311 	mrs	r3, BASEPRI
 80023a6:	603b      	str	r3, [r7, #0]
  return(result);
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d003      	beq.n	80023b6 <osKernelStart+0x3a>
    stat = osErrorISR;
 80023ae:	f06f 0305 	mvn.w	r3, #5
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	e00e      	b.n	80023d4 <osKernelStart+0x58>
  }
  else {
    if (KernelState == osKernelReady) {
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <osKernelStart+0x64>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2b01      	cmp	r3, #1
 80023bc:	d107      	bne.n	80023ce <osKernelStart+0x52>
      KernelState = osKernelRunning;
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <osKernelStart+0x64>)
 80023c0:	2202      	movs	r2, #2
 80023c2:	601a      	str	r2, [r3, #0]
      vTaskStartScheduler();
 80023c4:	f001 f944 	bl	8003650 <vTaskStartScheduler>
      stat = osOK;
 80023c8:	2300      	movs	r3, #0
 80023ca:	60fb      	str	r3, [r7, #12]
 80023cc:	e002      	b.n	80023d4 <osKernelStart+0x58>
    } else {
      stat = osError;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
 80023d2:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 80023d4:	68fb      	ldr	r3, [r7, #12]
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3710      	adds	r7, #16
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}
 80023de:	bf00      	nop
 80023e0:	200000d8 	.word	0x200000d8

080023e4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b092      	sub	sp, #72	; 0x48
 80023e8:	af04      	add	r7, sp, #16
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	60b9      	str	r1, [r7, #8]
 80023ee:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80023f4:	f3ef 8305 	mrs	r3, IPSR
 80023f8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80023fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  if (!IS_IRQ() && (func != NULL)) {
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	f040 8094 	bne.w	800252a <osThreadNew+0x146>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002402:	f3ef 8310 	mrs	r3, PRIMASK
 8002406:	623b      	str	r3, [r7, #32]
  return(result);
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	2b00      	cmp	r3, #0
 800240c:	f040 808d 	bne.w	800252a <osThreadNew+0x146>
 8002410:	4b48      	ldr	r3, [pc, #288]	; (8002534 <osThreadNew+0x150>)
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d106      	bne.n	8002426 <osThreadNew+0x42>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002418:	f3ef 8311 	mrs	r3, BASEPRI
 800241c:	61fb      	str	r3, [r7, #28]
  return(result);
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	2b00      	cmp	r3, #0
 8002422:	f040 8082 	bne.w	800252a <osThreadNew+0x146>
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	2b00      	cmp	r3, #0
 800242a:	d07e      	beq.n	800252a <osThreadNew+0x146>
    stack = configMINIMAL_STACK_SIZE;
 800242c:	2380      	movs	r3, #128	; 0x80
 800242e:	633b      	str	r3, [r7, #48]	; 0x30
    prio  = (UBaseType_t)osPriorityNormal;
 8002430:	2318      	movs	r3, #24
 8002432:	62fb      	str	r3, [r7, #44]	; 0x2c

    empty = '\0';
 8002434:	2300      	movs	r3, #0
 8002436:	76fb      	strb	r3, [r7, #27]
    name  = &empty;
 8002438:	f107 031b 	add.w	r3, r7, #27
 800243c:	637b      	str	r3, [r7, #52]	; 0x34
    mem   = -1;
 800243e:	f04f 33ff 	mov.w	r3, #4294967295
 8002442:	62bb      	str	r3, [r7, #40]	; 0x28

    if (attr != NULL) {
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d045      	beq.n	80024d6 <osThreadNew+0xf2>
      if (attr->name != NULL) {
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d002      	beq.n	8002458 <osThreadNew+0x74>
        name = attr->name;
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	637b      	str	r3, [r7, #52]	; 0x34
      }
      if (attr->priority != osPriorityNone) {
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	699b      	ldr	r3, [r3, #24]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <osThreadNew+0x82>
        prio = (UBaseType_t)attr->priority;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	699b      	ldr	r3, [r3, #24]
 8002464:	62fb      	str	r3, [r7, #44]	; 0x2c
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8002466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <osThreadNew+0x9a>
 800246c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800246e:	2b38      	cmp	r3, #56	; 0x38
 8002470:	d805      	bhi.n	800247e <osThreadNew+0x9a>
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	2b00      	cmp	r3, #0
 800247c:	d001      	beq.n	8002482 <osThreadNew+0x9e>
        return (NULL);
 800247e:	2300      	movs	r3, #0
 8002480:	e054      	b.n	800252c <osThreadNew+0x148>
      }

      if (attr->stack_size > 0U) {
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	695b      	ldr	r3, [r3, #20]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d003      	beq.n	8002492 <osThreadNew+0xae>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	695b      	ldr	r3, [r3, #20]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	633b      	str	r3, [r7, #48]	; 0x30
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00e      	beq.n	80024b8 <osThreadNew+0xd4>
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	2b5b      	cmp	r3, #91	; 0x5b
 80024a0:	d90a      	bls.n	80024b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d006      	beq.n	80024b8 <osThreadNew+0xd4>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	695b      	ldr	r3, [r3, #20]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d002      	beq.n	80024b8 <osThreadNew+0xd4>
        mem = 1;
 80024b2:	2301      	movs	r3, #1
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024b6:	e010      	b.n	80024da <osThreadNew+0xf6>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d10c      	bne.n	80024da <osThreadNew+0xf6>
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	68db      	ldr	r3, [r3, #12]
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d108      	bne.n	80024da <osThreadNew+0xf6>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	691b      	ldr	r3, [r3, #16]
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d104      	bne.n	80024da <osThreadNew+0xf6>
          mem = 0;
 80024d0:	2300      	movs	r3, #0
 80024d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d4:	e001      	b.n	80024da <osThreadNew+0xf6>
        }
      }
    }
    else {
      mem = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    if (mem == 1) {
 80024da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024dc:	2b01      	cmp	r3, #1
 80024de:	d110      	bne.n	8002502 <osThreadNew+0x11e>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 80024e4:	687a      	ldr	r2, [r7, #4]
 80024e6:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80024e8:	9202      	str	r2, [sp, #8]
 80024ea:	9301      	str	r3, [sp, #4]
 80024ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f000 fee2 	bl	80032c0 <xTaskCreateStatic>
 80024fc:	4603      	mov	r3, r0
 80024fe:	617b      	str	r3, [r7, #20]
 8002500:	e013      	b.n	800252a <osThreadNew+0x146>
    }
    else {
      if (mem == 0) {
 8002502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002504:	2b00      	cmp	r3, #0
 8002506:	d110      	bne.n	800252a <osThreadNew+0x146>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800250a:	b29a      	uxth	r2, r3
 800250c:	f107 0314 	add.w	r3, r7, #20
 8002510:	9301      	str	r3, [sp, #4]
 8002512:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002514:	9300      	str	r3, [sp, #0]
 8002516:	68bb      	ldr	r3, [r7, #8]
 8002518:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800251a:	68f8      	ldr	r0, [r7, #12]
 800251c:	f000 ff29 	bl	8003372 <xTaskCreate>
 8002520:	4603      	mov	r3, r0
 8002522:	2b01      	cmp	r3, #1
 8002524:	d001      	beq.n	800252a <osThreadNew+0x146>
          hTask = NULL;
 8002526:	2300      	movs	r3, #0
 8002528:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800252a:	697b      	ldr	r3, [r7, #20]
}
 800252c:	4618      	mov	r0, r3
 800252e:	3738      	adds	r7, #56	; 0x38
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	200000d8 	.word	0x200000d8

08002538 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 8002538:	b580      	push	{r7, lr}
 800253a:	b086      	sub	sp, #24
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002540:	f3ef 8305 	mrs	r3, IPSR
 8002544:	613b      	str	r3, [r7, #16]
  return(result);
 8002546:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002548:	2b00      	cmp	r3, #0
 800254a:	d10f      	bne.n	800256c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800254c:	f3ef 8310 	mrs	r3, PRIMASK
 8002550:	60fb      	str	r3, [r7, #12]
  return(result);
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d109      	bne.n	800256c <osDelay+0x34>
 8002558:	4b0d      	ldr	r3, [pc, #52]	; (8002590 <osDelay+0x58>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b02      	cmp	r3, #2
 800255e:	d109      	bne.n	8002574 <osDelay+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8002560:	f3ef 8311 	mrs	r3, BASEPRI
 8002564:	60bb      	str	r3, [r7, #8]
  return(result);
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <osDelay+0x3c>
    stat = osErrorISR;
 800256c:	f06f 0305 	mvn.w	r3, #5
 8002570:	617b      	str	r3, [r7, #20]
 8002572:	e007      	b.n	8002584 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 8002574:	2300      	movs	r3, #0
 8002576:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d002      	beq.n	8002584 <osDelay+0x4c>
      vTaskDelay(ticks);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f001 f832 	bl	80035e8 <vTaskDelay>
    }
  }

  return (stat);
 8002584:	697b      	ldr	r3, [r7, #20]
}
 8002586:	4618      	mov	r0, r3
 8002588:	3718      	adds	r7, #24
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}
 800258e:	bf00      	nop
 8002590:	200000d8 	.word	0x200000d8

08002594 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b08c      	sub	sp, #48	; 0x30
 8002598:	af02      	add	r7, sp, #8
 800259a:	60f8      	str	r0, [r7, #12]
 800259c:	60b9      	str	r1, [r7, #8]
 800259e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80025a4:	f3ef 8305 	mrs	r3, IPSR
 80025a8:	61bb      	str	r3, [r7, #24]
  return(result);
 80025aa:	69bb      	ldr	r3, [r7, #24]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d170      	bne.n	8002692 <osMessageQueueNew+0xfe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80025b0:	f3ef 8310 	mrs	r3, PRIMASK
 80025b4:	617b      	str	r3, [r7, #20]
  return(result);
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d16a      	bne.n	8002692 <osMessageQueueNew+0xfe>
 80025bc:	4b37      	ldr	r3, [pc, #220]	; (800269c <osMessageQueueNew+0x108>)
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d105      	bne.n	80025d0 <osMessageQueueNew+0x3c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 80025c4:	f3ef 8311 	mrs	r3, BASEPRI
 80025c8:	613b      	str	r3, [r7, #16]
  return(result);
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d160      	bne.n	8002692 <osMessageQueueNew+0xfe>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d05d      	beq.n	8002692 <osMessageQueueNew+0xfe>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d05a      	beq.n	8002692 <osMessageQueueNew+0xfe>
    mem = -1;
 80025dc:	f04f 33ff 	mov.w	r3, #4294967295
 80025e0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d029      	beq.n	800263c <osMessageQueueNew+0xa8>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689b      	ldr	r3, [r3, #8]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d012      	beq.n	8002616 <osMessageQueueNew+0x82>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	2b4f      	cmp	r3, #79	; 0x4f
 80025f6:	d90e      	bls.n	8002616 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d00a      	beq.n	8002616 <osMessageQueueNew+0x82>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	695a      	ldr	r2, [r3, #20]
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	68b9      	ldr	r1, [r7, #8]
 8002608:	fb01 f303 	mul.w	r3, r1, r3
 800260c:	429a      	cmp	r2, r3
 800260e:	d302      	bcc.n	8002616 <osMessageQueueNew+0x82>
        mem = 1;
 8002610:	2301      	movs	r3, #1
 8002612:	623b      	str	r3, [r7, #32]
 8002614:	e014      	b.n	8002640 <osMessageQueueNew+0xac>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	689b      	ldr	r3, [r3, #8]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d110      	bne.n	8002640 <osMessageQueueNew+0xac>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	68db      	ldr	r3, [r3, #12]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d10c      	bne.n	8002640 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800262a:	2b00      	cmp	r3, #0
 800262c:	d108      	bne.n	8002640 <osMessageQueueNew+0xac>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	695b      	ldr	r3, [r3, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d104      	bne.n	8002640 <osMessageQueueNew+0xac>
          mem = 0;
 8002636:	2300      	movs	r3, #0
 8002638:	623b      	str	r3, [r7, #32]
 800263a:	e001      	b.n	8002640 <osMessageQueueNew+0xac>
        }
      }
    }
    else {
      mem = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 8002640:	6a3b      	ldr	r3, [r7, #32]
 8002642:	2b01      	cmp	r3, #1
 8002644:	d10c      	bne.n	8002660 <osMessageQueueNew+0xcc>
      hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	691a      	ldr	r2, [r3, #16]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6899      	ldr	r1, [r3, #8]
 800264e:	2300      	movs	r3, #0
 8002650:	9300      	str	r3, [sp, #0]
 8002652:	460b      	mov	r3, r1
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f000 f96c 	bl	8002934 <xQueueGenericCreateStatic>
 800265c:	6278      	str	r0, [r7, #36]	; 0x24
 800265e:	e008      	b.n	8002672 <osMessageQueueNew+0xde>
    }
    else {
      if (mem == 0) {
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d105      	bne.n	8002672 <osMessageQueueNew+0xde>
        hQueue = xQueueCreate (msg_count, msg_size);
 8002666:	2200      	movs	r2, #0
 8002668:	68b9      	ldr	r1, [r7, #8]
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 f9d4 	bl	8002a18 <xQueueGenericCreate>
 8002670:	6278      	str	r0, [r7, #36]	; 0x24
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8002672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00c      	beq.n	8002692 <osMessageQueueNew+0xfe>
      if (attr != NULL) {
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2b00      	cmp	r3, #0
 800267c:	d003      	beq.n	8002686 <osMessageQueueNew+0xf2>
        name = attr->name;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	61fb      	str	r3, [r7, #28]
 8002684:	e001      	b.n	800268a <osMessageQueueNew+0xf6>
      } else {
        name = NULL;
 8002686:	2300      	movs	r3, #0
 8002688:	61fb      	str	r3, [r7, #28]
      }
      vQueueAddToRegistry (hQueue, name);
 800268a:	69f9      	ldr	r1, [r7, #28]
 800268c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800268e:	f000 fdbb 	bl	8003208 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002694:	4618      	mov	r0, r3
 8002696:	3728      	adds	r7, #40	; 0x28
 8002698:	46bd      	mov	sp, r7
 800269a:	bd80      	pop	{r7, pc}
 800269c:	200000d8 	.word	0x200000d8

080026a0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80026a0:	b480      	push	{r7}
 80026a2:	b085      	sub	sp, #20
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	60f8      	str	r0, [r7, #12]
 80026a8:	60b9      	str	r1, [r7, #8]
 80026aa:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4a06      	ldr	r2, [pc, #24]	; (80026c8 <vApplicationGetIdleTaskMemory+0x28>)
 80026b0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	4a05      	ldr	r2, [pc, #20]	; (80026cc <vApplicationGetIdleTaskMemory+0x2c>)
 80026b6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2280      	movs	r2, #128	; 0x80
 80026bc:	601a      	str	r2, [r3, #0]
}
 80026be:	bf00      	nop
 80026c0:	3714      	adds	r7, #20
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bc80      	pop	{r7}
 80026c6:	4770      	bx	lr
 80026c8:	200000dc 	.word	0x200000dc
 80026cc:	20000138 	.word	0x20000138

080026d0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	60f8      	str	r0, [r7, #12]
 80026d8:	60b9      	str	r1, [r7, #8]
 80026da:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4a07      	ldr	r2, [pc, #28]	; (80026fc <vApplicationGetTimerTaskMemory+0x2c>)
 80026e0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	4a06      	ldr	r2, [pc, #24]	; (8002700 <vApplicationGetTimerTaskMemory+0x30>)
 80026e6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f44f 7280 	mov.w	r2, #256	; 0x100
 80026ee:	601a      	str	r2, [r3, #0]
}
 80026f0:	bf00      	nop
 80026f2:	3714      	adds	r7, #20
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bc80      	pop	{r7}
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20000338 	.word	0x20000338
 8002700:	20000394 	.word	0x20000394

08002704 <vListInitialise>:
 8002704:	b480      	push	{r7}
 8002706:	b083      	sub	sp, #12
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f103 0208 	add.w	r2, r3, #8
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	605a      	str	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f04f 32ff 	mov.w	r2, #4294967295
 800271c:	609a      	str	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f103 0208 	add.w	r2, r3, #8
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	60da      	str	r2, [r3, #12]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	f103 0208 	add.w	r2, r3, #8
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	611a      	str	r2, [r3, #16]
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	601a      	str	r2, [r3, #0]
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr

08002742 <vListInitialiseItem>:
 8002742:	b480      	push	{r7}
 8002744:	b083      	sub	sp, #12
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2200      	movs	r2, #0
 800274e:	611a      	str	r2, [r3, #16]
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	bc80      	pop	{r7}
 8002758:	4770      	bx	lr

0800275a <vListInsertEnd>:
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	60fb      	str	r3, [r7, #12]
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	68fa      	ldr	r2, [r7, #12]
 800276e:	605a      	str	r2, [r3, #4]
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	609a      	str	r2, [r3, #8]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	683a      	ldr	r2, [r7, #0]
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	683a      	ldr	r2, [r7, #0]
 8002784:	609a      	str	r2, [r3, #8]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	687a      	ldr	r2, [r7, #4]
 800278a:	611a      	str	r2, [r3, #16]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	1c5a      	adds	r2, r3, #1
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	601a      	str	r2, [r3, #0]
 8002796:	bf00      	nop
 8002798:	3714      	adds	r7, #20
 800279a:	46bd      	mov	sp, r7
 800279c:	bc80      	pop	{r7}
 800279e:	4770      	bx	lr

080027a0 <vListInsert>:
 80027a0:	b480      	push	{r7}
 80027a2:	b085      	sub	sp, #20
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
 80027a8:	6039      	str	r1, [r7, #0]
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027b6:	d103      	bne.n	80027c0 <vListInsert+0x20>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	691b      	ldr	r3, [r3, #16]
 80027bc:	60fb      	str	r3, [r7, #12]
 80027be:	e00c      	b.n	80027da <vListInsert+0x3a>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	3308      	adds	r3, #8
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e002      	b.n	80027ce <vListInsert+0x2e>
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	60fb      	str	r3, [r7, #12]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	68ba      	ldr	r2, [r7, #8]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d2f6      	bcs.n	80027c8 <vListInsert+0x28>
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685a      	ldr	r2, [r3, #4]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	605a      	str	r2, [r3, #4]
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	683a      	ldr	r2, [r7, #0]
 80027e8:	609a      	str	r2, [r3, #8]
 80027ea:	683b      	ldr	r3, [r7, #0]
 80027ec:	68fa      	ldr	r2, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	611a      	str	r2, [r3, #16]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	1c5a      	adds	r2, r3, #1
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	601a      	str	r2, [r3, #0]
 8002806:	bf00      	nop
 8002808:	3714      	adds	r7, #20
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <uxListRemove>:
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	691b      	ldr	r3, [r3, #16]
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	687a      	ldr	r2, [r7, #4]
 8002824:	6892      	ldr	r2, [r2, #8]
 8002826:	609a      	str	r2, [r3, #8]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	687a      	ldr	r2, [r7, #4]
 800282e:	6852      	ldr	r2, [r2, #4]
 8002830:	605a      	str	r2, [r3, #4]
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	429a      	cmp	r2, r3
 800283a:	d103      	bne.n	8002844 <uxListRemove+0x34>
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	689a      	ldr	r2, [r3, #8]
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	605a      	str	r2, [r3, #4]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2200      	movs	r2, #0
 8002848:	611a      	str	r2, [r3, #16]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	1e5a      	subs	r2, r3, #1
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	601a      	str	r2, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	3714      	adds	r7, #20
 800285c:	46bd      	mov	sp, r7
 800285e:	bc80      	pop	{r7}
 8002860:	4770      	bx	lr
	...

08002864 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
 800286c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d109      	bne.n	800288c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8002878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800287c:	f383 8811 	msr	BASEPRI, r3
 8002880:	f3bf 8f6f 	isb	sy
 8002884:	f3bf 8f4f 	dsb	sy
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	e7fe      	b.n	800288a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800288c:	f002 f814 	bl	80048b8 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800289c:	fb01 f303 	mul.w	r3, r1, r3
 80028a0:	441a      	add	r2, r3
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2200      	movs	r2, #0
 80028aa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681a      	ldr	r2, [r3, #0]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028bc:	3b01      	subs	r3, #1
 80028be:	68f9      	ldr	r1, [r7, #12]
 80028c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80028c2:	fb01 f303 	mul.w	r3, r1, r3
 80028c6:	441a      	add	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	22ff      	movs	r2, #255	; 0xff
 80028d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	22ff      	movs	r2, #255	; 0xff
 80028d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80028dc:	683b      	ldr	r3, [r7, #0]
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d114      	bne.n	800290c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	691b      	ldr	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d01a      	beq.n	8002920 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	3310      	adds	r3, #16
 80028ee:	4618      	mov	r0, r3
 80028f0:	f001 f954 	bl	8003b9c <xTaskRemoveFromEventList>
 80028f4:	4603      	mov	r3, r0
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d012      	beq.n	8002920 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028fa:	4b0d      	ldr	r3, [pc, #52]	; (8002930 <xQueueGenericReset+0xcc>)
 80028fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002900:	601a      	str	r2, [r3, #0]
 8002902:	f3bf 8f4f 	dsb	sy
 8002906:	f3bf 8f6f 	isb	sy
 800290a:	e009      	b.n	8002920 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	3310      	adds	r3, #16
 8002910:	4618      	mov	r0, r3
 8002912:	f7ff fef7 	bl	8002704 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	3324      	adds	r3, #36	; 0x24
 800291a:	4618      	mov	r0, r3
 800291c:	f7ff fef2 	bl	8002704 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002920:	f001 fff8 	bl	8004914 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002924:	2301      	movs	r3, #1
}
 8002926:	4618      	mov	r0, r3
 8002928:	3710      	adds	r7, #16
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	e000ed04 	.word	0xe000ed04

08002934 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002934:	b580      	push	{r7, lr}
 8002936:	b08e      	sub	sp, #56	; 0x38
 8002938:	af02      	add	r7, sp, #8
 800293a:	60f8      	str	r0, [r7, #12]
 800293c:	60b9      	str	r1, [r7, #8]
 800293e:	607a      	str	r2, [r7, #4]
 8002940:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d109      	bne.n	800295c <xQueueGenericCreateStatic+0x28>
 8002948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800294c:	f383 8811 	msr	BASEPRI, r3
 8002950:	f3bf 8f6f 	isb	sy
 8002954:	f3bf 8f4f 	dsb	sy
 8002958:	62bb      	str	r3, [r7, #40]	; 0x28
 800295a:	e7fe      	b.n	800295a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	2b00      	cmp	r3, #0
 8002960:	d109      	bne.n	8002976 <xQueueGenericCreateStatic+0x42>
 8002962:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002966:	f383 8811 	msr	BASEPRI, r3
 800296a:	f3bf 8f6f 	isb	sy
 800296e:	f3bf 8f4f 	dsb	sy
 8002972:	627b      	str	r3, [r7, #36]	; 0x24
 8002974:	e7fe      	b.n	8002974 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d002      	beq.n	8002982 <xQueueGenericCreateStatic+0x4e>
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d001      	beq.n	8002986 <xQueueGenericCreateStatic+0x52>
 8002982:	2301      	movs	r3, #1
 8002984:	e000      	b.n	8002988 <xQueueGenericCreateStatic+0x54>
 8002986:	2300      	movs	r3, #0
 8002988:	2b00      	cmp	r3, #0
 800298a:	d109      	bne.n	80029a0 <xQueueGenericCreateStatic+0x6c>
 800298c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002990:	f383 8811 	msr	BASEPRI, r3
 8002994:	f3bf 8f6f 	isb	sy
 8002998:	f3bf 8f4f 	dsb	sy
 800299c:	623b      	str	r3, [r7, #32]
 800299e:	e7fe      	b.n	800299e <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d102      	bne.n	80029ac <xQueueGenericCreateStatic+0x78>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d101      	bne.n	80029b0 <xQueueGenericCreateStatic+0x7c>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <xQueueGenericCreateStatic+0x7e>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <xQueueGenericCreateStatic+0x96>
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	61fb      	str	r3, [r7, #28]
 80029c8:	e7fe      	b.n	80029c8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80029ca:	2350      	movs	r3, #80	; 0x50
 80029cc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	2b50      	cmp	r3, #80	; 0x50
 80029d2:	d009      	beq.n	80029e8 <xQueueGenericCreateStatic+0xb4>
 80029d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029d8:	f383 8811 	msr	BASEPRI, r3
 80029dc:	f3bf 8f6f 	isb	sy
 80029e0:	f3bf 8f4f 	dsb	sy
 80029e4:	61bb      	str	r3, [r7, #24]
 80029e6:	e7fe      	b.n	80029e6 <xQueueGenericCreateStatic+0xb2>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80029ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d00d      	beq.n	8002a0e <xQueueGenericCreateStatic+0xda>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a00:	9300      	str	r3, [sp, #0]
 8002a02:	4613      	mov	r3, r2
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	68b9      	ldr	r1, [r7, #8]
 8002a08:	68f8      	ldr	r0, [r7, #12]
 8002a0a:	f000 f842 	bl	8002a92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3730      	adds	r7, #48	; 0x30
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af02      	add	r7, sp, #8
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	4613      	mov	r3, r2
 8002a24:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d109      	bne.n	8002a40 <xQueueGenericCreate+0x28>
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	613b      	str	r3, [r7, #16]
 8002a3e:	e7fe      	b.n	8002a3e <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d102      	bne.n	8002a4c <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e004      	b.n	8002a56 <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	68ba      	ldr	r2, [r7, #8]
 8002a50:	fb02 f303 	mul.w	r3, r2, r3
 8002a54:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	3350      	adds	r3, #80	; 0x50
 8002a5a:	4618      	mov	r0, r3
 8002a5c:	f002 f822 	bl	8004aa4 <pvPortMalloc>
 8002a60:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d00f      	beq.n	8002a88 <xQueueGenericCreate+0x70>
		{
			/* Jump past the queue structure to find the pc_sw_version of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	3350      	adds	r3, #80	; 0x50
 8002a6c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8002a6e:	69bb      	ldr	r3, [r7, #24]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002a76:	79fa      	ldrb	r2, [r7, #7]
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	9300      	str	r3, [sp, #0]
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	68b9      	ldr	r1, [r7, #8]
 8002a82:	68f8      	ldr	r0, [r7, #12]
 8002a84:	f000 f805 	bl	8002a92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8002a88:	69bb      	ldr	r3, [r7, #24]
	}
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	3720      	adds	r7, #32
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	bd80      	pop	{r7, pc}

08002a92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8002a92:	b580      	push	{r7, lr}
 8002a94:	b084      	sub	sp, #16
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	60f8      	str	r0, [r7, #12]
 8002a9a:	60b9      	str	r1, [r7, #8]
 8002a9c:	607a      	str	r2, [r7, #4]
 8002a9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d103      	bne.n	8002aae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002aa6:	69bb      	ldr	r3, [r7, #24]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	e002      	b.n	8002ab4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	68fa      	ldr	r2, [r7, #12]
 8002ab8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002aba:	69bb      	ldr	r3, [r7, #24]
 8002abc:	68ba      	ldr	r2, [r7, #8]
 8002abe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002ac0:	2101      	movs	r1, #1
 8002ac2:	69b8      	ldr	r0, [r7, #24]
 8002ac4:	f7ff fece 	bl	8002864 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	78fa      	ldrb	r2, [r7, #3]
 8002acc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002ad0:	bf00      	nop
 8002ad2:	3710      	adds	r7, #16
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}

08002ad8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	b08e      	sub	sp, #56	; 0x38
 8002adc:	af00      	add	r7, sp, #0
 8002ade:	60f8      	str	r0, [r7, #12]
 8002ae0:	60b9      	str	r1, [r7, #8]
 8002ae2:	607a      	str	r2, [r7, #4]
 8002ae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d109      	bne.n	8002b08 <xQueueGenericSend+0x30>
 8002af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002af8:	f383 8811 	msr	BASEPRI, r3
 8002afc:	f3bf 8f6f 	isb	sy
 8002b00:	f3bf 8f4f 	dsb	sy
 8002b04:	62bb      	str	r3, [r7, #40]	; 0x28
 8002b06:	e7fe      	b.n	8002b06 <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d103      	bne.n	8002b16 <xQueueGenericSend+0x3e>
 8002b0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d101      	bne.n	8002b1a <xQueueGenericSend+0x42>
 8002b16:	2301      	movs	r3, #1
 8002b18:	e000      	b.n	8002b1c <xQueueGenericSend+0x44>
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d109      	bne.n	8002b34 <xQueueGenericSend+0x5c>
 8002b20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b24:	f383 8811 	msr	BASEPRI, r3
 8002b28:	f3bf 8f6f 	isb	sy
 8002b2c:	f3bf 8f4f 	dsb	sy
 8002b30:	627b      	str	r3, [r7, #36]	; 0x24
 8002b32:	e7fe      	b.n	8002b32 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d103      	bne.n	8002b42 <xQueueGenericSend+0x6a>
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d101      	bne.n	8002b46 <xQueueGenericSend+0x6e>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <xQueueGenericSend+0x70>
 8002b46:	2300      	movs	r3, #0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d109      	bne.n	8002b60 <xQueueGenericSend+0x88>
 8002b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b50:	f383 8811 	msr	BASEPRI, r3
 8002b54:	f3bf 8f6f 	isb	sy
 8002b58:	f3bf 8f4f 	dsb	sy
 8002b5c:	623b      	str	r3, [r7, #32]
 8002b5e:	e7fe      	b.n	8002b5e <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b60:	f001 f9d6 	bl	8003f10 <xTaskGetSchedulerState>
 8002b64:	4603      	mov	r3, r0
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d102      	bne.n	8002b70 <xQueueGenericSend+0x98>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <xQueueGenericSend+0x9c>
 8002b70:	2301      	movs	r3, #1
 8002b72:	e000      	b.n	8002b76 <xQueueGenericSend+0x9e>
 8002b74:	2300      	movs	r3, #0
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d109      	bne.n	8002b8e <xQueueGenericSend+0xb6>
 8002b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b7e:	f383 8811 	msr	BASEPRI, r3
 8002b82:	f3bf 8f6f 	isb	sy
 8002b86:	f3bf 8f4f 	dsb	sy
 8002b8a:	61fb      	str	r3, [r7, #28]
 8002b8c:	e7fe      	b.n	8002b8c <xQueueGenericSend+0xb4>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b8e:	f001 fe93 	bl	80048b8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9a:	429a      	cmp	r2, r3
 8002b9c:	d302      	bcc.n	8002ba4 <xQueueGenericSend+0xcc>
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	2b02      	cmp	r3, #2
 8002ba2:	d129      	bne.n	8002bf8 <xQueueGenericSend+0x120>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ba4:	683a      	ldr	r2, [r7, #0]
 8002ba6:	68b9      	ldr	r1, [r7, #8]
 8002ba8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002baa:	f000 fa1c 	bl	8002fe6 <prvCopyDataToQueue>
 8002bae:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002bb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	d010      	beq.n	8002bda <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bba:	3324      	adds	r3, #36	; 0x24
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	f000 ffed 	bl	8003b9c <xTaskRemoveFromEventList>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d013      	beq.n	8002bf0 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002bc8:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <xQueueGenericSend+0x1f0>)
 8002bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bce:	601a      	str	r2, [r3, #0]
 8002bd0:	f3bf 8f4f 	dsb	sy
 8002bd4:	f3bf 8f6f 	isb	sy
 8002bd8:	e00a      	b.n	8002bf0 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d007      	beq.n	8002bf0 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002be0:	4b39      	ldr	r3, [pc, #228]	; (8002cc8 <xQueueGenericSend+0x1f0>)
 8002be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002be6:	601a      	str	r2, [r3, #0]
 8002be8:	f3bf 8f4f 	dsb	sy
 8002bec:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002bf0:	f001 fe90 	bl	8004914 <vPortExitCritical>
				return pdPASS;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e063      	b.n	8002cc0 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d103      	bne.n	8002c06 <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bfe:	f001 fe89 	bl	8004914 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002c02:	2300      	movs	r3, #0
 8002c04:	e05c      	b.n	8002cc0 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002c06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d106      	bne.n	8002c1a <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002c0c:	f107 0314 	add.w	r3, r7, #20
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f825 	bl	8003c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002c16:	2301      	movs	r3, #1
 8002c18:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002c1a:	f001 fe7b 	bl	8004914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002c1e:	f000 fd7b 	bl	8003718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002c22:	f001 fe49 	bl	80048b8 <vPortEnterCritical>
 8002c26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c28:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002c2c:	b25b      	sxtb	r3, r3
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c32:	d103      	bne.n	8002c3c <xQueueGenericSend+0x164>
 8002c34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c36:	2200      	movs	r2, #0
 8002c38:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002c42:	b25b      	sxtb	r3, r3
 8002c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c48:	d103      	bne.n	8002c52 <xQueueGenericSend+0x17a>
 8002c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c52:	f001 fe5f 	bl	8004914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c56:	1d3a      	adds	r2, r7, #4
 8002c58:	f107 0314 	add.w	r3, r7, #20
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f001 f814 	bl	8003c8c <xTaskCheckForTimeOut>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d124      	bne.n	8002cb4 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002c6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c6c:	f000 fab3 	bl	80031d6 <prvIsQueueFull>
 8002c70:	4603      	mov	r3, r0
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d018      	beq.n	8002ca8 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002c76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c78:	3310      	adds	r3, #16
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	4611      	mov	r1, r2
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f000 ff3e 	bl	8003b00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002c84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c86:	f000 fa3e 	bl	8003106 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002c8a:	f000 fd53 	bl	8003734 <xTaskResumeAll>
 8002c8e:	4603      	mov	r3, r0
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	f47f af7c 	bne.w	8002b8e <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <xQueueGenericSend+0x1f0>)
 8002c98:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	f3bf 8f4f 	dsb	sy
 8002ca2:	f3bf 8f6f 	isb	sy
 8002ca6:	e772      	b.n	8002b8e <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002ca8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002caa:	f000 fa2c 	bl	8003106 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002cae:	f000 fd41 	bl	8003734 <xTaskResumeAll>
 8002cb2:	e76c      	b.n	8002b8e <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002cb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002cb6:	f000 fa26 	bl	8003106 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002cba:	f000 fd3b 	bl	8003734 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002cbe:	2300      	movs	r3, #0
		}
	}
}
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	3738      	adds	r7, #56	; 0x38
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}
 8002cc8:	e000ed04 	.word	0xe000ed04

08002ccc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08e      	sub	sp, #56	; 0x38
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002cde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d109      	bne.n	8002cf8 <xQueueGenericSendFromISR+0x2c>
 8002ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce8:	f383 8811 	msr	BASEPRI, r3
 8002cec:	f3bf 8f6f 	isb	sy
 8002cf0:	f3bf 8f4f 	dsb	sy
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
 8002cf6:	e7fe      	b.n	8002cf6 <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cf8:	68bb      	ldr	r3, [r7, #8]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d103      	bne.n	8002d06 <xQueueGenericSendFromISR+0x3a>
 8002cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d101      	bne.n	8002d0a <xQueueGenericSendFromISR+0x3e>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <xQueueGenericSendFromISR+0x40>
 8002d0a:	2300      	movs	r3, #0
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d109      	bne.n	8002d24 <xQueueGenericSendFromISR+0x58>
 8002d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d14:	f383 8811 	msr	BASEPRI, r3
 8002d18:	f3bf 8f6f 	isb	sy
 8002d1c:	f3bf 8f4f 	dsb	sy
 8002d20:	623b      	str	r3, [r7, #32]
 8002d22:	e7fe      	b.n	8002d22 <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d103      	bne.n	8002d32 <xQueueGenericSendFromISR+0x66>
 8002d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d2e:	2b01      	cmp	r3, #1
 8002d30:	d101      	bne.n	8002d36 <xQueueGenericSendFromISR+0x6a>
 8002d32:	2301      	movs	r3, #1
 8002d34:	e000      	b.n	8002d38 <xQueueGenericSendFromISR+0x6c>
 8002d36:	2300      	movs	r3, #0
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d109      	bne.n	8002d50 <xQueueGenericSendFromISR+0x84>
 8002d3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d40:	f383 8811 	msr	BASEPRI, r3
 8002d44:	f3bf 8f6f 	isb	sy
 8002d48:	f3bf 8f4f 	dsb	sy
 8002d4c:	61fb      	str	r3, [r7, #28]
 8002d4e:	e7fe      	b.n	8002d4e <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002d50:	f001 fe6c 	bl	8004a2c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002d54:	f3ef 8211 	mrs	r2, BASEPRI
 8002d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d5c:	f383 8811 	msr	BASEPRI, r3
 8002d60:	f3bf 8f6f 	isb	sy
 8002d64:	f3bf 8f4f 	dsb	sy
 8002d68:	61ba      	str	r2, [r7, #24]
 8002d6a:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002d6c:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002d6e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d72:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d302      	bcc.n	8002d82 <xQueueGenericSendFromISR+0xb6>
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	2b02      	cmp	r3, #2
 8002d80:	d12c      	bne.n	8002ddc <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d84:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d88:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	68b9      	ldr	r1, [r7, #8]
 8002d90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002d92:	f000 f928 	bl	8002fe6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002d96:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8002d9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d9e:	d112      	bne.n	8002dc6 <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d016      	beq.n	8002dd6 <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002da8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002daa:	3324      	adds	r3, #36	; 0x24
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fef5 	bl	8003b9c <xTaskRemoveFromEventList>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d00e      	beq.n	8002dd6 <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00b      	beq.n	8002dd6 <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	e007      	b.n	8002dd6 <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002dc6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8002dca:	3301      	adds	r3, #1
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	b25a      	sxtb	r2, r3
 8002dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8002dda:	e001      	b.n	8002de0 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
 8002de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de2:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002dea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002dec:	4618      	mov	r0, r3
 8002dee:	3738      	adds	r7, #56	; 0x38
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}

08002df4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b08c      	sub	sp, #48	; 0x30
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e00:	2300      	movs	r3, #0
 8002e02:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d109      	bne.n	8002e22 <xQueueReceive+0x2e>
	__asm volatile
 8002e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e12:	f383 8811 	msr	BASEPRI, r3
 8002e16:	f3bf 8f6f 	isb	sy
 8002e1a:	f3bf 8f4f 	dsb	sy
 8002e1e:	623b      	str	r3, [r7, #32]
 8002e20:	e7fe      	b.n	8002e20 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d103      	bne.n	8002e30 <xQueueReceive+0x3c>
 8002e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d101      	bne.n	8002e34 <xQueueReceive+0x40>
 8002e30:	2301      	movs	r3, #1
 8002e32:	e000      	b.n	8002e36 <xQueueReceive+0x42>
 8002e34:	2300      	movs	r3, #0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d109      	bne.n	8002e4e <xQueueReceive+0x5a>
 8002e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e3e:	f383 8811 	msr	BASEPRI, r3
 8002e42:	f3bf 8f6f 	isb	sy
 8002e46:	f3bf 8f4f 	dsb	sy
 8002e4a:	61fb      	str	r3, [r7, #28]
 8002e4c:	e7fe      	b.n	8002e4c <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e4e:	f001 f85f 	bl	8003f10 <xTaskGetSchedulerState>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d102      	bne.n	8002e5e <xQueueReceive+0x6a>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d101      	bne.n	8002e62 <xQueueReceive+0x6e>
 8002e5e:	2301      	movs	r3, #1
 8002e60:	e000      	b.n	8002e64 <xQueueReceive+0x70>
 8002e62:	2300      	movs	r3, #0
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d109      	bne.n	8002e7c <xQueueReceive+0x88>
 8002e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e6c:	f383 8811 	msr	BASEPRI, r3
 8002e70:	f3bf 8f6f 	isb	sy
 8002e74:	f3bf 8f4f 	dsb	sy
 8002e78:	61bb      	str	r3, [r7, #24]
 8002e7a:	e7fe      	b.n	8002e7a <xQueueReceive+0x86>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8002e7c:	f001 fd1c 	bl	80048b8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002e80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e84:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d01f      	beq.n	8002ecc <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002e8c:	68b9      	ldr	r1, [r7, #8]
 8002e8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e90:	f000 f913 	bl	80030ba <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e96:	1e5a      	subs	r2, r3, #1
 8002e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9a:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9e:	691b      	ldr	r3, [r3, #16]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d00f      	beq.n	8002ec4 <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ea4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ea6:	3310      	adds	r3, #16
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fe77 	bl	8003b9c <xTaskRemoveFromEventList>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d007      	beq.n	8002ec4 <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002eb4:	4b3c      	ldr	r3, [pc, #240]	; (8002fa8 <xQueueReceive+0x1b4>)
 8002eb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eba:	601a      	str	r2, [r3, #0]
 8002ebc:	f3bf 8f4f 	dsb	sy
 8002ec0:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ec4:	f001 fd26 	bl	8004914 <vPortExitCritical>
				return pdPASS;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	e069      	b.n	8002fa0 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d103      	bne.n	8002eda <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002ed2:	f001 fd1f 	bl	8004914 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	e062      	b.n	8002fa0 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d106      	bne.n	8002eee <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002ee0:	f107 0310 	add.w	r3, r7, #16
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	f000 febb 	bl	8003c60 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002eea:	2301      	movs	r3, #1
 8002eec:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002eee:	f001 fd11 	bl	8004914 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002ef2:	f000 fc11 	bl	8003718 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002ef6:	f001 fcdf 	bl	80048b8 <vPortEnterCritical>
 8002efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002efc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f00:	b25b      	sxtb	r3, r3
 8002f02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f06:	d103      	bne.n	8002f10 <xQueueReceive+0x11c>
 8002f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f16:	b25b      	sxtb	r3, r3
 8002f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f1c:	d103      	bne.n	8002f26 <xQueueReceive+0x132>
 8002f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f26:	f001 fcf5 	bl	8004914 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f2a:	1d3a      	adds	r2, r7, #4
 8002f2c:	f107 0310 	add.w	r3, r7, #16
 8002f30:	4611      	mov	r1, r2
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 feaa 	bl	8003c8c <xTaskCheckForTimeOut>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d123      	bne.n	8002f86 <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f40:	f000 f933 	bl	80031aa <prvIsQueueEmpty>
 8002f44:	4603      	mov	r3, r0
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d017      	beq.n	8002f7a <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f4c:	3324      	adds	r3, #36	; 0x24
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	4611      	mov	r1, r2
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fdd4 	bl	8003b00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002f58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f5a:	f000 f8d4 	bl	8003106 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002f5e:	f000 fbe9 	bl	8003734 <xTaskResumeAll>
 8002f62:	4603      	mov	r3, r0
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d189      	bne.n	8002e7c <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 8002f68:	4b0f      	ldr	r3, [pc, #60]	; (8002fa8 <xQueueReceive+0x1b4>)
 8002f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002f6e:	601a      	str	r2, [r3, #0]
 8002f70:	f3bf 8f4f 	dsb	sy
 8002f74:	f3bf 8f6f 	isb	sy
 8002f78:	e780      	b.n	8002e7c <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002f7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f7c:	f000 f8c3 	bl	8003106 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002f80:	f000 fbd8 	bl	8003734 <xTaskResumeAll>
 8002f84:	e77a      	b.n	8002e7c <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f88:	f000 f8bd 	bl	8003106 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002f8c:	f000 fbd2 	bl	8003734 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f92:	f000 f90a 	bl	80031aa <prvIsQueueEmpty>
 8002f96:	4603      	mov	r3, r0
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f43f af6f 	beq.w	8002e7c <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f9e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	3730      	adds	r7, #48	; 0x30
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	bd80      	pop	{r7, pc}
 8002fa8:	e000ed04 	.word	0xe000ed04

08002fac <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d109      	bne.n	8002fce <uxQueueMessagesWaiting+0x22>
 8002fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fbe:	f383 8811 	msr	BASEPRI, r3
 8002fc2:	f3bf 8f6f 	isb	sy
 8002fc6:	f3bf 8f4f 	dsb	sy
 8002fca:	60bb      	str	r3, [r7, #8]
 8002fcc:	e7fe      	b.n	8002fcc <uxQueueMessagesWaiting+0x20>

	taskENTER_CRITICAL();
 8002fce:	f001 fc73 	bl	80048b8 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fd6:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8002fd8:	f001 fc9c 	bl	8004914 <vPortExitCritical>

	return uxReturn;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8002fde:	4618      	mov	r0, r3
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}

08002fe6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002fe6:	b580      	push	{r7, lr}
 8002fe8:	b086      	sub	sp, #24
 8002fea:	af00      	add	r7, sp, #0
 8002fec:	60f8      	str	r0, [r7, #12]
 8002fee:	60b9      	str	r1, [r7, #8]
 8002ff0:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ffa:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003000:	2b00      	cmp	r3, #0
 8003002:	d10d      	bne.n	8003020 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d14d      	bne.n	80030a8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	4618      	mov	r0, r3
 8003012:	f000 ff9b 	bl	8003f4c <xTaskPriorityDisinherit>
 8003016:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	605a      	str	r2, [r3, #4]
 800301e:	e043      	b.n	80030a8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d119      	bne.n	800305a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	6898      	ldr	r0, [r3, #8]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302e:	461a      	mov	r2, r3
 8003030:	68b9      	ldr	r1, [r7, #8]
 8003032:	f001 ff4f 	bl	8004ed4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	689a      	ldr	r2, [r3, #8]
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800303e:	441a      	add	r2, r3
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	685b      	ldr	r3, [r3, #4]
 800304c:	429a      	cmp	r2, r3
 800304e:	d32b      	bcc.n	80030a8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	681a      	ldr	r2, [r3, #0]
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	609a      	str	r2, [r3, #8]
 8003058:	e026      	b.n	80030a8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	68d8      	ldr	r0, [r3, #12]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	461a      	mov	r2, r3
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	f001 ff35 	bl	8004ed4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	425b      	negs	r3, r3
 8003074:	441a      	add	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	68da      	ldr	r2, [r3, #12]
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	429a      	cmp	r2, r3
 8003084:	d207      	bcs.n	8003096 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	685a      	ldr	r2, [r3, #4]
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	425b      	negs	r3, r3
 8003090:	441a      	add	r2, r3
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2b02      	cmp	r3, #2
 800309a:	d105      	bne.n	80030a8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d002      	beq.n	80030a8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	3b01      	subs	r3, #1
 80030a6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	1c5a      	adds	r2, r3, #1
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030b0:	697b      	ldr	r3, [r7, #20]
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}

080030ba <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030ba:	b580      	push	{r7, lr}
 80030bc:	b082      	sub	sp, #8
 80030be:	af00      	add	r7, sp, #0
 80030c0:	6078      	str	r0, [r7, #4]
 80030c2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d018      	beq.n	80030fe <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	68da      	ldr	r2, [r3, #12]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d4:	441a      	add	r2, r3
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	68da      	ldr	r2, [r3, #12]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	429a      	cmp	r2, r3
 80030e4:	d303      	bcc.n	80030ee <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681a      	ldr	r2, [r3, #0]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68d9      	ldr	r1, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f6:	461a      	mov	r2, r3
 80030f8:	6838      	ldr	r0, [r7, #0]
 80030fa:	f001 feeb 	bl	8004ed4 <memcpy>
	}
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}

08003106 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003106:	b580      	push	{r7, lr}
 8003108:	b084      	sub	sp, #16
 800310a:	af00      	add	r7, sp, #0
 800310c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800310e:	f001 fbd3 	bl	80048b8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003118:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800311a:	e011      	b.n	8003140 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	2b00      	cmp	r3, #0
 8003122:	d012      	beq.n	800314a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	3324      	adds	r3, #36	; 0x24
 8003128:	4618      	mov	r0, r3
 800312a:	f000 fd37 	bl	8003b9c <xTaskRemoveFromEventList>
 800312e:	4603      	mov	r3, r0
 8003130:	2b00      	cmp	r3, #0
 8003132:	d001      	beq.n	8003138 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003134:	f000 fe0a 	bl	8003d4c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
 800313a:	3b01      	subs	r3, #1
 800313c:	b2db      	uxtb	r3, r3
 800313e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003144:	2b00      	cmp	r3, #0
 8003146:	dce9      	bgt.n	800311c <prvUnlockQueue+0x16>
 8003148:	e000      	b.n	800314c <prvUnlockQueue+0x46>
					break;
 800314a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003154:	f001 fbde 	bl	8004914 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003158:	f001 fbae 	bl	80048b8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003162:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003164:	e011      	b.n	800318a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d012      	beq.n	8003194 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	3310      	adds	r3, #16
 8003172:	4618      	mov	r0, r3
 8003174:	f000 fd12 	bl	8003b9c <xTaskRemoveFromEventList>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800317e:	f000 fde5 	bl	8003d4c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003182:	7bbb      	ldrb	r3, [r7, #14]
 8003184:	3b01      	subs	r3, #1
 8003186:	b2db      	uxtb	r3, r3
 8003188:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800318a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800318e:	2b00      	cmp	r3, #0
 8003190:	dce9      	bgt.n	8003166 <prvUnlockQueue+0x60>
 8003192:	e000      	b.n	8003196 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003194:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	22ff      	movs	r2, #255	; 0xff
 800319a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800319e:	f001 fbb9 	bl	8004914 <vPortExitCritical>
}
 80031a2:	bf00      	nop
 80031a4:	3710      	adds	r7, #16
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bd80      	pop	{r7, pc}

080031aa <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031aa:	b580      	push	{r7, lr}
 80031ac:	b084      	sub	sp, #16
 80031ae:	af00      	add	r7, sp, #0
 80031b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031b2:	f001 fb81 	bl	80048b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d102      	bne.n	80031c4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031be:	2301      	movs	r3, #1
 80031c0:	60fb      	str	r3, [r7, #12]
 80031c2:	e001      	b.n	80031c8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031c8:	f001 fba4 	bl	8004914 <vPortExitCritical>

	return xReturn;
 80031cc:	68fb      	ldr	r3, [r7, #12]
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3710      	adds	r7, #16
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}

080031d6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80031d6:	b580      	push	{r7, lr}
 80031d8:	b084      	sub	sp, #16
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031de:	f001 fb6b 	bl	80048b8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d102      	bne.n	80031f4 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80031ee:	2301      	movs	r3, #1
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e001      	b.n	80031f8 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80031f4:	2300      	movs	r3, #0
 80031f6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031f8:	f001 fb8c 	bl	8004914 <vPortExitCritical>

	return xReturn;
 80031fc:	68fb      	ldr	r3, [r7, #12]
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
	...

08003208 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003208:	b480      	push	{r7}
 800320a:	b085      	sub	sp, #20
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
 8003216:	e014      	b.n	8003242 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003218:	4a0e      	ldr	r2, [pc, #56]	; (8003254 <vQueueAddToRegistry+0x4c>)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d10b      	bne.n	800323c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003224:	490b      	ldr	r1, [pc, #44]	; (8003254 <vQueueAddToRegistry+0x4c>)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	683a      	ldr	r2, [r7, #0]
 800322a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800322e:	4a09      	ldr	r2, [pc, #36]	; (8003254 <vQueueAddToRegistry+0x4c>)
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	00db      	lsls	r3, r3, #3
 8003234:	4413      	add	r3, r2
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800323a:	e005      	b.n	8003248 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	3301      	adds	r3, #1
 8003240:	60fb      	str	r3, [r7, #12]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	2b07      	cmp	r3, #7
 8003246:	d9e7      	bls.n	8003218 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003248:	bf00      	nop
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	bc80      	pop	{r7}
 8003250:	4770      	bx	lr
 8003252:	bf00      	nop
 8003254:	20002ef8 	.word	0x20002ef8

08003258 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	60f8      	str	r0, [r7, #12]
 8003260:	60b9      	str	r1, [r7, #8]
 8003262:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003268:	f001 fb26 	bl	80048b8 <vPortEnterCritical>
 800326c:	697b      	ldr	r3, [r7, #20]
 800326e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003272:	b25b      	sxtb	r3, r3
 8003274:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003278:	d103      	bne.n	8003282 <vQueueWaitForMessageRestricted+0x2a>
 800327a:	697b      	ldr	r3, [r7, #20]
 800327c:	2200      	movs	r2, #0
 800327e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003288:	b25b      	sxtb	r3, r3
 800328a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800328e:	d103      	bne.n	8003298 <vQueueWaitForMessageRestricted+0x40>
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	2200      	movs	r2, #0
 8003294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003298:	f001 fb3c 	bl	8004914 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d106      	bne.n	80032b2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80032a4:	697b      	ldr	r3, [r7, #20]
 80032a6:	3324      	adds	r3, #36	; 0x24
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	68b9      	ldr	r1, [r7, #8]
 80032ac:	4618      	mov	r0, r3
 80032ae:	f000 fc4b 	bl	8003b48 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7ff ff27 	bl	8003106 <prvUnlockQueue>
	}
 80032b8:	bf00      	nop
 80032ba:	3718      	adds	r7, #24
 80032bc:	46bd      	mov	sp, r7
 80032be:	bd80      	pop	{r7, pc}

080032c0 <xTaskCreateStatic>:
							   const uint32_t ulStackDepth,
							   void *const pvParameters,
							   UBaseType_t uxPriority,
							   StackType_t *const puxStackBuffer,
							   StaticTask_t *const pxTaskBuffer)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b08e      	sub	sp, #56	; 0x38
 80032c4:	af04      	add	r7, sp, #16
 80032c6:	60f8      	str	r0, [r7, #12]
 80032c8:	60b9      	str	r1, [r7, #8]
 80032ca:	607a      	str	r2, [r7, #4]
 80032cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

	configASSERT(puxStackBuffer != NULL);
 80032ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d109      	bne.n	80032e8 <xTaskCreateStatic+0x28>
 80032d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032d8:	f383 8811 	msr	BASEPRI, r3
 80032dc:	f3bf 8f6f 	isb	sy
 80032e0:	f3bf 8f4f 	dsb	sy
 80032e4:	623b      	str	r3, [r7, #32]
 80032e6:	e7fe      	b.n	80032e6 <xTaskCreateStatic+0x26>
	configASSERT(pxTaskBuffer != NULL);
 80032e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d109      	bne.n	8003302 <xTaskCreateStatic+0x42>
 80032ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032f2:	f383 8811 	msr	BASEPRI, r3
 80032f6:	f3bf 8f6f 	isb	sy
 80032fa:	f3bf 8f4f 	dsb	sy
 80032fe:	61fb      	str	r3, [r7, #28]
 8003300:	e7fe      	b.n	8003300 <xTaskCreateStatic+0x40>
#if (configASSERT_DEFINED == 1)
	{
		/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
		volatile size_t xSize = sizeof(StaticTask_t);
 8003302:	235c      	movs	r3, #92	; 0x5c
 8003304:	613b      	str	r3, [r7, #16]
		configASSERT(xSize == sizeof(TCB_t));
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	2b5c      	cmp	r3, #92	; 0x5c
 800330a:	d009      	beq.n	8003320 <xTaskCreateStatic+0x60>
 800330c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003310:	f383 8811 	msr	BASEPRI, r3
 8003314:	f3bf 8f6f 	isb	sy
 8003318:	f3bf 8f4f 	dsb	sy
 800331c:	61bb      	str	r3, [r7, #24]
 800331e:	e7fe      	b.n	800331e <xTaskCreateStatic+0x5e>
	}
#endif /* configASSERT_DEFINED */

	if ((pxTaskBuffer != NULL) && (puxStackBuffer != NULL))
 8003320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003322:	2b00      	cmp	r3, #0
 8003324:	d01e      	beq.n	8003364 <xTaskCreateStatic+0xa4>
 8003326:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003328:	2b00      	cmp	r3, #0
 800332a:	d01b      	beq.n	8003364 <xTaskCreateStatic+0xa4>
	{
		/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
		pxNewTCB = (TCB_t *)pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800332c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800332e:	627b      	str	r3, [r7, #36]	; 0x24
		pxNewTCB->pxStack = (StackType_t *)puxStackBuffer;
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003334:	631a      	str	r2, [r3, #48]	; 0x30

#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
			pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	2202      	movs	r2, #2
 800333a:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		}
#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

		prvInitialiseNewTask(pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL);
 800333e:	2300      	movs	r3, #0
 8003340:	9303      	str	r3, [sp, #12]
 8003342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003344:	9302      	str	r3, [sp, #8]
 8003346:	f107 0314 	add.w	r3, r7, #20
 800334a:	9301      	str	r3, [sp, #4]
 800334c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334e:	9300      	str	r3, [sp, #0]
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	687a      	ldr	r2, [r7, #4]
 8003354:	68b9      	ldr	r1, [r7, #8]
 8003356:	68f8      	ldr	r0, [r7, #12]
 8003358:	f000 f850 	bl	80033fc <prvInitialiseNewTask>
		prvAddNewTaskToReadyList(pxNewTCB);
 800335c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800335e:	f000 f8d3 	bl	8003508 <prvAddNewTaskToReadyList>
 8003362:	e001      	b.n	8003368 <xTaskCreateStatic+0xa8>
	}
	else
	{
		xReturn = NULL;
 8003364:	2300      	movs	r3, #0
 8003366:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003368:	697b      	ldr	r3, [r7, #20]
}
 800336a:	4618      	mov	r0, r3
 800336c:	3728      	adds	r7, #40	; 0x28
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <xTaskCreate>:
					   const char *const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
					   const configSTACK_DEPTH_TYPE usStackDepth,
					   void *const pvParameters,
					   UBaseType_t uxPriority,
					   TaskHandle_t *const pxCreatedTask)
{
 8003372:	b580      	push	{r7, lr}
 8003374:	b08c      	sub	sp, #48	; 0x30
 8003376:	af04      	add	r7, sp, #16
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	603b      	str	r3, [r7, #0]
 800337e:	4613      	mov	r3, r2
 8003380:	80fb      	strh	r3, [r7, #6]
#else  /* portSTACK_GROWTH */
	{
		StackType_t *pxStack;

		/* Allocate space for the stack used by the task being created. */
		pxStack = (StackType_t *)pvPortMalloc((((size_t)usStackDepth) * sizeof(StackType_t))); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003382:	88fb      	ldrh	r3, [r7, #6]
 8003384:	009b      	lsls	r3, r3, #2
 8003386:	4618      	mov	r0, r3
 8003388:	f001 fb8c 	bl	8004aa4 <pvPortMalloc>
 800338c:	6178      	str	r0, [r7, #20]

		if (pxStack != NULL)
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00e      	beq.n	80033b2 <xTaskCreate+0x40>
		{
			/* Allocate space for the TCB. */
			pxNewTCB = (TCB_t *)pvPortMalloc(sizeof(TCB_t)); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8003394:	205c      	movs	r0, #92	; 0x5c
 8003396:	f001 fb85 	bl	8004aa4 <pvPortMalloc>
 800339a:	61f8      	str	r0, [r7, #28]

			if (pxNewTCB != NULL)
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <xTaskCreate+0x38>
			{
				/* Store the stack pc_sw_version in the TCB. */
				pxNewTCB->pxStack = pxStack;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	697a      	ldr	r2, [r7, #20]
 80033a6:	631a      	str	r2, [r3, #48]	; 0x30
 80033a8:	e005      	b.n	80033b6 <xTaskCreate+0x44>
			}
			else
			{
				/* The stack cannot be used as the TCB was not created.  Free
					it again. */
				vPortFree(pxStack);
 80033aa:	6978      	ldr	r0, [r7, #20]
 80033ac:	f001 fc3c 	bl	8004c28 <vPortFree>
 80033b0:	e001      	b.n	80033b6 <xTaskCreate+0x44>
			}
		}
		else
		{
			pxNewTCB = NULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	61fb      	str	r3, [r7, #28]
		}
	}
#endif /* portSTACK_GROWTH */

	if (pxNewTCB != NULL)
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d017      	beq.n	80033ec <xTaskCreate+0x7a>
	{
#if (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
			pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	2200      	movs	r2, #0
 80033c0:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
		}
#endif /* configSUPPORT_STATIC_ALLOCATION */

		prvInitialiseNewTask(pxTaskCode, pcName, (uint32_t)usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL);
 80033c4:	88fa      	ldrh	r2, [r7, #6]
 80033c6:	2300      	movs	r3, #0
 80033c8:	9303      	str	r3, [sp, #12]
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	9302      	str	r3, [sp, #8]
 80033ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033d4:	9300      	str	r3, [sp, #0]
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	68b9      	ldr	r1, [r7, #8]
 80033da:	68f8      	ldr	r0, [r7, #12]
 80033dc:	f000 f80e 	bl	80033fc <prvInitialiseNewTask>
		prvAddNewTaskToReadyList(pxNewTCB);
 80033e0:	69f8      	ldr	r0, [r7, #28]
 80033e2:	f000 f891 	bl	8003508 <prvAddNewTaskToReadyList>
		xReturn = pdPASS;
 80033e6:	2301      	movs	r3, #1
 80033e8:	61bb      	str	r3, [r7, #24]
 80033ea:	e002      	b.n	80033f2 <xTaskCreate+0x80>
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80033ec:	f04f 33ff 	mov.w	r3, #4294967295
 80033f0:	61bb      	str	r3, [r7, #24]
	}

	return xReturn;
 80033f2:	69bb      	ldr	r3, [r7, #24]
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3720      	adds	r7, #32
 80033f8:	46bd      	mov	sp, r7
 80033fa:	bd80      	pop	{r7, pc}

080033fc <prvInitialiseNewTask>:
								 void *const pvParameters,
								 UBaseType_t uxPriority,
								 TaskHandle_t *const pxCreatedTask,
								 TCB_t *pxNewTCB,
								 const MemoryRegion_t *const xRegions)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b088      	sub	sp, #32
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
 8003408:	603b      	str	r3, [r7, #0]

/* Avoid dependency on memset() if it is not required. */
#if (tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1)
	{
		/* Fill the stack with a known value to assist debugging. */
		(void)memset(pxNewTCB->pxStack, (int)tskSTACK_FILL_BYTE, (size_t)ulStackDepth * sizeof(StackType_t));
 800340a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	009b      	lsls	r3, r3, #2
 8003412:	461a      	mov	r2, r3
 8003414:	21a5      	movs	r1, #165	; 0xa5
 8003416:	f001 fd68 	bl	8004eea <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
#if (portSTACK_GROWTH < 0)
	{
		pxTopOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
 800341a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800341c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003424:	3b01      	subs	r3, #1
 8003426:	009b      	lsls	r3, r3, #2
 8003428:	4413      	add	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = (StackType_t *)(((portPOINTER_SIZE_TYPE)pxTopOfStack) & (~((portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK))); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	f023 0307 	bic.w	r3, r3, #7
 8003432:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT((((portPOINTER_SIZE_TYPE)pxTopOfStack & (portPOINTER_SIZE_TYPE)portBYTE_ALIGNMENT_MASK) == 0UL));
 8003434:	69bb      	ldr	r3, [r7, #24]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	2b00      	cmp	r3, #0
 800343c:	d009      	beq.n	8003452 <prvInitialiseNewTask+0x56>
 800343e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003442:	f383 8811 	msr	BASEPRI, r3
 8003446:	f3bf 8f6f 	isb	sy
 800344a:	f3bf 8f4f 	dsb	sy
 800344e:	617b      	str	r3, [r7, #20]
 8003450:	e7fe      	b.n	8003450 <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + (ulStackDepth - (uint32_t)1);
	}
#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++)
 8003452:	2300      	movs	r3, #0
 8003454:	61fb      	str	r3, [r7, #28]
 8003456:	e012      	b.n	800347e <prvInitialiseNewTask+0x82>
	{
		pxNewTCB->pcTaskName[x] = pcName[x];
 8003458:	68ba      	ldr	r2, [r7, #8]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	4413      	add	r3, r2
 800345e:	7819      	ldrb	r1, [r3, #0]
 8003460:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003462:	69fb      	ldr	r3, [r7, #28]
 8003464:	4413      	add	r3, r2
 8003466:	3334      	adds	r3, #52	; 0x34
 8003468:	460a      	mov	r2, r1
 800346a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if (pcName[x] == 0x00)
 800346c:	68ba      	ldr	r2, [r7, #8]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	4413      	add	r3, r2
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d006      	beq.n	8003486 <prvInitialiseNewTask+0x8a>
	for (x = (UBaseType_t)0; x < (UBaseType_t)configMAX_TASK_NAME_LEN; x++)
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	3301      	adds	r3, #1
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	2b0f      	cmp	r3, #15
 8003482:	d9e9      	bls.n	8003458 <prvInitialiseNewTask+0x5c>
 8003484:	e000      	b.n	8003488 <prvInitialiseNewTask+0x8c>
		{
			break;
 8003486:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[configMAX_TASK_NAME_LEN - 1] = '\0';
 8003488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800348a:	2200      	movs	r2, #0
 800348c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if (uxPriority >= (UBaseType_t)configMAX_PRIORITIES)
 8003490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003492:	2b37      	cmp	r3, #55	; 0x37
 8003494:	d901      	bls.n	800349a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = (UBaseType_t)configMAX_PRIORITIES - (UBaseType_t)1U;
 8003496:	2337      	movs	r3, #55	; 0x37
 8003498:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800349a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800349c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800349e:	62da      	str	r2, [r3, #44]	; 0x2c
#if (configUSE_MUTEXES == 1)
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80034a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034a4:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	2200      	movs	r2, #0
 80034aa:	651a      	str	r2, [r3, #80]	; 0x50
	}
#endif /* configUSE_MUTEXES */

	vListInitialiseItem(&(pxNewTCB->xStateListItem));
 80034ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ae:	3304      	adds	r3, #4
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff f946 	bl	8002742 <vListInitialiseItem>
	vListInitialiseItem(&(pxNewTCB->xEventListItem));
 80034b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b8:	3318      	adds	r3, #24
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7ff f941 	bl	8002742 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xStateListItem), pxNewTCB);
 80034c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034c4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE(&(pxNewTCB->xEventListItem), (TickType_t)configMAX_PRIORITIES - (TickType_t)uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80034c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80034cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034ce:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER(&(pxNewTCB->xEventListItem), pxNewTCB);
 80034d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034d4:	625a      	str	r2, [r3, #36]	; 0x24
	}
#endif

#if (configUSE_TASK_NOTIFICATIONS == 1)
	{
		pxNewTCB->ulNotifiedValue = 0;
 80034d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034d8:	2200      	movs	r2, #0
 80034da:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80034dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged);
	}
#else  /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack(pxTopOfStack, pxTaskCode, pvParameters);
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	68f9      	ldr	r1, [r7, #12]
 80034e8:	69b8      	ldr	r0, [r7, #24]
 80034ea:	f001 f8f9 	bl	80046e0 <pxPortInitialiseStack>
 80034ee:	4602      	mov	r2, r0
 80034f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034f2:	601a      	str	r2, [r3, #0]
	}
#endif /* portUSING_MPU_WRAPPERS */

	if ((void *)pxCreatedTask != NULL)
 80034f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d002      	beq.n	8003500 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = (TaskHandle_t)pxNewTCB;
 80034fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003500:	bf00      	nop
 8003502:	3720      	adds	r7, #32
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}

08003508 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList(TCB_t *pxNewTCB)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003510:	f001 f9d2 	bl	80048b8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003514:	4b2d      	ldr	r3, [pc, #180]	; (80035cc <prvAddNewTaskToReadyList+0xc4>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	4a2c      	ldr	r2, [pc, #176]	; (80035cc <prvAddNewTaskToReadyList+0xc4>)
 800351c:	6013      	str	r3, [r2, #0]
		if (pxCurrentTCB == NULL)
 800351e:	4b2c      	ldr	r3, [pc, #176]	; (80035d0 <prvAddNewTaskToReadyList+0xc8>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2b00      	cmp	r3, #0
 8003524:	d109      	bne.n	800353a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003526:	4a2a      	ldr	r2, [pc, #168]	; (80035d0 <prvAddNewTaskToReadyList+0xc8>)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6013      	str	r3, [r2, #0]

			if (uxCurrentNumberOfTasks == (UBaseType_t)1)
 800352c:	4b27      	ldr	r3, [pc, #156]	; (80035cc <prvAddNewTaskToReadyList+0xc4>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d110      	bne.n	8003556 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003534:	f000 fc2e 	bl	8003d94 <prvInitialiseTaskLists>
 8003538:	e00d      	b.n	8003556 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if (xSchedulerRunning == pdFALSE)
 800353a:	4b26      	ldr	r3, [pc, #152]	; (80035d4 <prvAddNewTaskToReadyList+0xcc>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d109      	bne.n	8003556 <prvAddNewTaskToReadyList+0x4e>
			{
				if (pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority)
 8003542:	4b23      	ldr	r3, [pc, #140]	; (80035d0 <prvAddNewTaskToReadyList+0xc8>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	429a      	cmp	r2, r3
 800354e:	d802      	bhi.n	8003556 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003550:	4a1f      	ldr	r2, [pc, #124]	; (80035d0 <prvAddNewTaskToReadyList+0xc8>)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8003556:	4b20      	ldr	r3, [pc, #128]	; (80035d8 <prvAddNewTaskToReadyList+0xd0>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	3301      	adds	r3, #1
 800355c:	4a1e      	ldr	r2, [pc, #120]	; (80035d8 <prvAddNewTaskToReadyList+0xd0>)
 800355e:	6013      	str	r3, [r2, #0]

#if (configUSE_TRACE_FACILITY == 1)
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003560:	4b1d      	ldr	r3, [pc, #116]	; (80035d8 <prvAddNewTaskToReadyList+0xd0>)
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	645a      	str	r2, [r3, #68]	; 0x44
		}
#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE(pxNewTCB);

		prvAddTaskToReadyList(pxNewTCB);
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800356c:	4b1b      	ldr	r3, [pc, #108]	; (80035dc <prvAddNewTaskToReadyList+0xd4>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	429a      	cmp	r2, r3
 8003572:	d903      	bls.n	800357c <prvAddNewTaskToReadyList+0x74>
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003578:	4a18      	ldr	r2, [pc, #96]	; (80035dc <prvAddNewTaskToReadyList+0xd4>)
 800357a:	6013      	str	r3, [r2, #0]
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003580:	4613      	mov	r3, r2
 8003582:	009b      	lsls	r3, r3, #2
 8003584:	4413      	add	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4a15      	ldr	r2, [pc, #84]	; (80035e0 <prvAddNewTaskToReadyList+0xd8>)
 800358a:	441a      	add	r2, r3
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	3304      	adds	r3, #4
 8003590:	4619      	mov	r1, r3
 8003592:	4610      	mov	r0, r2
 8003594:	f7ff f8e1 	bl	800275a <vListInsertEnd>

		portSETUP_TCB(pxNewTCB);
	}
	taskEXIT_CRITICAL();
 8003598:	f001 f9bc 	bl	8004914 <vPortExitCritical>

	if (xSchedulerRunning != pdFALSE)
 800359c:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <prvAddNewTaskToReadyList+0xcc>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00e      	beq.n	80035c2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if (pxCurrentTCB->uxPriority < pxNewTCB->uxPriority)
 80035a4:	4b0a      	ldr	r3, [pc, #40]	; (80035d0 <prvAddNewTaskToReadyList+0xc8>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d207      	bcs.n	80035c2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80035b2:	4b0c      	ldr	r3, [pc, #48]	; (80035e4 <prvAddNewTaskToReadyList+0xdc>)
 80035b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b8:	601a      	str	r2, [r3, #0]
 80035ba:	f3bf 8f4f 	dsb	sy
 80035be:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035c2:	bf00      	nop
 80035c4:	3708      	adds	r7, #8
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}
 80035ca:	bf00      	nop
 80035cc:	20000c68 	.word	0x20000c68
 80035d0:	20000794 	.word	0x20000794
 80035d4:	20000c74 	.word	0x20000c74
 80035d8:	20000c84 	.word	0x20000c84
 80035dc:	20000c70 	.word	0x20000c70
 80035e0:	20000798 	.word	0x20000798
 80035e4:	e000ed04 	.word	0xe000ed04

080035e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelay == 1)

void vTaskDelay(const TickType_t xTicksToDelay)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80035f0:	2300      	movs	r3, #0
 80035f2:	60fb      	str	r3, [r7, #12]

	/* A delay time of zero just forces a reschedule. */
	if (xTicksToDelay > (TickType_t)0U)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d016      	beq.n	8003628 <vTaskDelay+0x40>
	{
		configASSERT(uxSchedulerSuspended == 0);
 80035fa:	4b13      	ldr	r3, [pc, #76]	; (8003648 <vTaskDelay+0x60>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d009      	beq.n	8003616 <vTaskDelay+0x2e>
 8003602:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003606:	f383 8811 	msr	BASEPRI, r3
 800360a:	f3bf 8f6f 	isb	sy
 800360e:	f3bf 8f4f 	dsb	sy
 8003612:	60bb      	str	r3, [r7, #8]
 8003614:	e7fe      	b.n	8003614 <vTaskDelay+0x2c>
		vTaskSuspendAll();
 8003616:	f000 f87f 	bl	8003718 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
			prvAddCurrentTaskToDelayedList(xTicksToDelay, pdFALSE);
 800361a:	2100      	movs	r1, #0
 800361c:	6878      	ldr	r0, [r7, #4]
 800361e:	f000 fd01 	bl	8004024 <prvAddCurrentTaskToDelayedList>
		}
		xAlreadyYielded = xTaskResumeAll();
 8003622:	f000 f887 	bl	8003734 <xTaskResumeAll>
 8003626:	60f8      	str	r0, [r7, #12]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
	if (xAlreadyYielded == pdFALSE)
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d107      	bne.n	800363e <vTaskDelay+0x56>
	{
		portYIELD_WITHIN_API();
 800362e:	4b07      	ldr	r3, [pc, #28]	; (800364c <vTaskDelay+0x64>)
 8003630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	f3bf 8f4f 	dsb	sy
 800363a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
 8003646:	bf00      	nop
 8003648:	20000c90 	.word	0x20000c90
 800364c:	e000ed04 	.word	0xe000ed04

08003650 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler(void)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af04      	add	r7, sp, #16
	BaseType_t xReturn;

/* Add the idle task at the lowest priority. */
#if (configSUPPORT_STATIC_ALLOCATION == 1)
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8003656:	2300      	movs	r3, #0
 8003658:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800365a:	2300      	movs	r3, #0
 800365c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory(&pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize);
 800365e:	463a      	mov	r2, r7
 8003660:	1d39      	adds	r1, r7, #4
 8003662:	f107 0308 	add.w	r3, r7, #8
 8003666:	4618      	mov	r0, r3
 8003668:	f7ff f81a 	bl	80026a0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(prvIdleTask,
 800366c:	6839      	ldr	r1, [r7, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68ba      	ldr	r2, [r7, #8]
 8003672:	9202      	str	r2, [sp, #8]
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	2300      	movs	r3, #0
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	2300      	movs	r3, #0
 800367c:	460a      	mov	r2, r1
 800367e:	4920      	ldr	r1, [pc, #128]	; (8003700 <vTaskStartScheduler+0xb0>)
 8003680:	4820      	ldr	r0, [pc, #128]	; (8003704 <vTaskStartScheduler+0xb4>)
 8003682:	f7ff fe1d 	bl	80032c0 <xTaskCreateStatic>
 8003686:	4602      	mov	r2, r0
 8003688:	4b1f      	ldr	r3, [pc, #124]	; (8003708 <vTaskStartScheduler+0xb8>)
 800368a:	601a      	str	r2, [r3, #0]
											(void *)NULL, /*lint !e961.  The cast is not redundant for all compilers. */
											(tskIDLE_PRIORITY | portPRIVILEGE_BIT),
											pxIdleTaskStackBuffer,
											pxIdleTaskTCBBuffer); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if (xIdleTaskHandle != NULL)
 800368c:	4b1e      	ldr	r3, [pc, #120]	; (8003708 <vTaskStartScheduler+0xb8>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d002      	beq.n	800369a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003694:	2301      	movs	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	e001      	b.n	800369e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800369a:	2300      	movs	r3, #0
 800369c:	617b      	str	r3, [r7, #20]
	}
#endif /* configSUPPORT_STATIC_ALLOCATION */

#if (configUSE_TIMERS == 1)
	{
		if (xReturn == pdPASS)
 800369e:	697b      	ldr	r3, [r7, #20]
 80036a0:	2b01      	cmp	r3, #1
 80036a2:	d102      	bne.n	80036aa <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80036a4:	f000 fd12 	bl	80040cc <xTimerCreateTimerTask>
 80036a8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configUSE_TIMERS */

	if (xReturn == pdPASS)
 80036aa:	697b      	ldr	r3, [r7, #20]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d115      	bne.n	80036dc <vTaskStartScheduler+0x8c>
 80036b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036b4:	f383 8811 	msr	BASEPRI, r3
 80036b8:	f3bf 8f6f 	isb	sy
 80036bc:	f3bf 8f4f 	dsb	sy
 80036c0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
		}
#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80036c2:	4b12      	ldr	r3, [pc, #72]	; (800370c <vTaskStartScheduler+0xbc>)
 80036c4:	f04f 32ff 	mov.w	r2, #4294967295
 80036c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80036ca:	4b11      	ldr	r3, [pc, #68]	; (8003710 <vTaskStartScheduler+0xc0>)
 80036cc:	2201      	movs	r2, #1
 80036ce:	601a      	str	r2, [r3, #0]
		xTickCount = (TickType_t)0U;
 80036d0:	4b10      	ldr	r3, [pc, #64]	; (8003714 <vTaskStartScheduler+0xc4>)
 80036d2:	2200      	movs	r2, #0
 80036d4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if (xPortStartScheduler() != pdFALSE)
 80036d6:	f001 f87f 	bl	80047d8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	(void)xIdleTaskHandle;
}
 80036da:	e00d      	b.n	80036f8 <vTaskStartScheduler+0xa8>
		configASSERT(xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY);
 80036dc:	697b      	ldr	r3, [r7, #20]
 80036de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e2:	d109      	bne.n	80036f8 <vTaskStartScheduler+0xa8>
 80036e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e8:	f383 8811 	msr	BASEPRI, r3
 80036ec:	f3bf 8f6f 	isb	sy
 80036f0:	f3bf 8f4f 	dsb	sy
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	e7fe      	b.n	80036f6 <vTaskStartScheduler+0xa6>
}
 80036f8:	bf00      	nop
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	08005a50 	.word	0x08005a50
 8003704:	08003d65 	.word	0x08003d65
 8003708:	20000c8c 	.word	0x20000c8c
 800370c:	20000c88 	.word	0x20000c88
 8003710:	20000c74 	.word	0x20000c74
 8003714:	20000c6c 	.word	0x20000c6c

08003718 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll(void)
{
 8003718:	b480      	push	{r7}
 800371a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800371c:	4b04      	ldr	r3, [pc, #16]	; (8003730 <vTaskSuspendAll+0x18>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	3301      	adds	r3, #1
 8003722:	4a03      	ldr	r2, [pc, #12]	; (8003730 <vTaskSuspendAll+0x18>)
 8003724:	6013      	str	r3, [r2, #0]
}
 8003726:	bf00      	nop
 8003728:	46bd      	mov	sp, r7
 800372a:	bc80      	pop	{r7}
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	20000c90 	.word	0x20000c90

08003734 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll(void)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
	TCB_t *pxTCB = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	60fb      	str	r3, [r7, #12]
	BaseType_t xAlreadyYielded = pdFALSE;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT(uxSchedulerSuspended);
 8003742:	4b41      	ldr	r3, [pc, #260]	; (8003848 <xTaskResumeAll+0x114>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <xTaskResumeAll+0x2a>
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	603b      	str	r3, [r7, #0]
 800375c:	e7fe      	b.n	800375c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800375e:	f001 f8ab 	bl	80048b8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003762:	4b39      	ldr	r3, [pc, #228]	; (8003848 <xTaskResumeAll+0x114>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	3b01      	subs	r3, #1
 8003768:	4a37      	ldr	r2, [pc, #220]	; (8003848 <xTaskResumeAll+0x114>)
 800376a:	6013      	str	r3, [r2, #0]

		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE)
 800376c:	4b36      	ldr	r3, [pc, #216]	; (8003848 <xTaskResumeAll+0x114>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d162      	bne.n	800383a <xTaskResumeAll+0x106>
		{
			if (uxCurrentNumberOfTasks > (UBaseType_t)0U)
 8003774:	4b35      	ldr	r3, [pc, #212]	; (800384c <xTaskResumeAll+0x118>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d05e      	beq.n	800383a <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE)
 800377c:	e02f      	b.n	80037de <xTaskResumeAll+0xaa>
				{
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xPendingReadyList));
 800377e:	4b34      	ldr	r3, [pc, #208]	; (8003850 <xTaskResumeAll+0x11c>)
 8003780:	68db      	ldr	r3, [r3, #12]
 8003782:	68db      	ldr	r3, [r3, #12]
 8003784:	60fb      	str	r3, [r7, #12]
					(void)uxListRemove(&(pxTCB->xEventListItem));
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	3318      	adds	r3, #24
 800378a:	4618      	mov	r0, r3
 800378c:	f7ff f840 	bl	8002810 <uxListRemove>
					(void)uxListRemove(&(pxTCB->xStateListItem));
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	3304      	adds	r3, #4
 8003794:	4618      	mov	r0, r3
 8003796:	f7ff f83b 	bl	8002810 <uxListRemove>
					prvAddTaskToReadyList(pxTCB);
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800379e:	4b2d      	ldr	r3, [pc, #180]	; (8003854 <xTaskResumeAll+0x120>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d903      	bls.n	80037ae <xTaskResumeAll+0x7a>
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	4a2a      	ldr	r2, [pc, #168]	; (8003854 <xTaskResumeAll+0x120>)
 80037ac:	6013      	str	r3, [r2, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b2:	4613      	mov	r3, r2
 80037b4:	009b      	lsls	r3, r3, #2
 80037b6:	4413      	add	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4a27      	ldr	r2, [pc, #156]	; (8003858 <xTaskResumeAll+0x124>)
 80037bc:	441a      	add	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	3304      	adds	r3, #4
 80037c2:	4619      	mov	r1, r3
 80037c4:	4610      	mov	r0, r2
 80037c6:	f7fe ffc8 	bl	800275a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority)
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ce:	4b23      	ldr	r3, [pc, #140]	; (800385c <xTaskResumeAll+0x128>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d302      	bcc.n	80037de <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 80037d8:	4b21      	ldr	r3, [pc, #132]	; (8003860 <xTaskResumeAll+0x12c>)
 80037da:	2201      	movs	r2, #1
 80037dc:	601a      	str	r2, [r3, #0]
				while (listLIST_IS_EMPTY(&xPendingReadyList) == pdFALSE)
 80037de:	4b1c      	ldr	r3, [pc, #112]	; (8003850 <xTaskResumeAll+0x11c>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1cb      	bne.n	800377e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (pxTCB != NULL)
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d001      	beq.n	80037f0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80037ec:	f000 fb6c 	bl	8003ec8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80037f0:	4b1c      	ldr	r3, [pc, #112]	; (8003864 <xTaskResumeAll+0x130>)
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	607b      	str	r3, [r7, #4]

					if (uxPendedCounts > (UBaseType_t)0U)
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d010      	beq.n	800381e <xTaskResumeAll+0xea>
					{
						do
						{
							if (xTaskIncrementTick() != pdFALSE)
 80037fc:	f000 f866 	bl	80038cc <xTaskIncrementTick>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d002      	beq.n	800380c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 8003806:	4b16      	ldr	r3, [pc, #88]	; (8003860 <xTaskResumeAll+0x12c>)
 8003808:	2201      	movs	r2, #1
 800380a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	3b01      	subs	r3, #1
 8003810:	607b      	str	r3, [r7, #4]
						} while (uxPendedCounts > (UBaseType_t)0U);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1f1      	bne.n	80037fc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 8003818:	4b12      	ldr	r3, [pc, #72]	; (8003864 <xTaskResumeAll+0x130>)
 800381a:	2200      	movs	r2, #0
 800381c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if (xYieldPending != pdFALSE)
 800381e:	4b10      	ldr	r3, [pc, #64]	; (8003860 <xTaskResumeAll+0x12c>)
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d009      	beq.n	800383a <xTaskResumeAll+0x106>
				{
#if (configUSE_PREEMPTION != 0)
					{
						xAlreadyYielded = pdTRUE;
 8003826:	2301      	movs	r3, #1
 8003828:	60bb      	str	r3, [r7, #8]
					}
#endif
					taskYIELD_IF_USING_PREEMPTION();
 800382a:	4b0f      	ldr	r3, [pc, #60]	; (8003868 <xTaskResumeAll+0x134>)
 800382c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003830:	601a      	str	r2, [r3, #0]
 8003832:	f3bf 8f4f 	dsb	sy
 8003836:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800383a:	f001 f86b 	bl	8004914 <vPortExitCritical>

	return xAlreadyYielded;
 800383e:	68bb      	ldr	r3, [r7, #8]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	20000c90 	.word	0x20000c90
 800384c:	20000c68 	.word	0x20000c68
 8003850:	20000c28 	.word	0x20000c28
 8003854:	20000c70 	.word	0x20000c70
 8003858:	20000798 	.word	0x20000798
 800385c:	20000794 	.word	0x20000794
 8003860:	20000c7c 	.word	0x20000c7c
 8003864:	20000c78 	.word	0x20000c78
 8003868:	e000ed04 	.word	0xe000ed04

0800386c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount(void)
{
 800386c:	b480      	push	{r7}
 800386e:	b083      	sub	sp, #12
 8003870:	af00      	add	r7, sp, #0
	TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003872:	4b04      	ldr	r3, [pc, #16]	; (8003884 <xTaskGetTickCount+0x18>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003878:	687b      	ldr	r3, [r7, #4]
}
 800387a:	4618      	mov	r0, r3
 800387c:	370c      	adds	r7, #12
 800387e:	46bd      	mov	sp, r7
 8003880:	bc80      	pop	{r7}
 8003882:	4770      	bx	lr
 8003884:	20000c6c 	.word	0x20000c6c

08003888 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName(TaskHandle_t xTaskToQuery) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle(xTaskToQuery);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d102      	bne.n	800389c <pcTaskGetName+0x14>
 8003896:	4b0c      	ldr	r3, [pc, #48]	; (80038c8 <pcTaskGetName+0x40>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	e000      	b.n	800389e <pcTaskGetName+0x16>
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	60fb      	str	r3, [r7, #12]
	configASSERT(pxTCB);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <pcTaskGetName+0x32>
 80038a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038aa:	f383 8811 	msr	BASEPRI, r3
 80038ae:	f3bf 8f6f 	isb	sy
 80038b2:	f3bf 8f4f 	dsb	sy
 80038b6:	60bb      	str	r3, [r7, #8]
 80038b8:	e7fe      	b.n	80038b8 <pcTaskGetName+0x30>
	return &(pxTCB->pcTaskName[0]);
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	3334      	adds	r3, #52	; 0x34
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3714      	adds	r7, #20
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bc80      	pop	{r7}
 80038c6:	4770      	bx	lr
 80038c8:	20000794 	.word	0x20000794

080038cc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick(void)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;
	TickType_t xItemValue;
	BaseType_t xSwitchRequired = pdFALSE;
 80038d2:	2300      	movs	r3, #0
 80038d4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK(xTickCount);
	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE)
 80038d6:	4b51      	ldr	r3, [pc, #324]	; (8003a1c <xTaskIncrementTick+0x150>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f040 808d 	bne.w	80039fa <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + (TickType_t)1;
 80038e0:	4b4f      	ldr	r3, [pc, #316]	; (8003a20 <xTaskIncrementTick+0x154>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	3301      	adds	r3, #1
 80038e6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80038e8:	4a4d      	ldr	r2, [pc, #308]	; (8003a20 <xTaskIncrementTick+0x154>)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	6013      	str	r3, [r2, #0]

		if (xConstTickCount == (TickType_t)0U) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d11f      	bne.n	8003934 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 80038f4:	4b4b      	ldr	r3, [pc, #300]	; (8003a24 <xTaskIncrementTick+0x158>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d009      	beq.n	8003912 <xTaskIncrementTick+0x46>
 80038fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003902:	f383 8811 	msr	BASEPRI, r3
 8003906:	f3bf 8f6f 	isb	sy
 800390a:	f3bf 8f4f 	dsb	sy
 800390e:	603b      	str	r3, [r7, #0]
 8003910:	e7fe      	b.n	8003910 <xTaskIncrementTick+0x44>
 8003912:	4b44      	ldr	r3, [pc, #272]	; (8003a24 <xTaskIncrementTick+0x158>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	60fb      	str	r3, [r7, #12]
 8003918:	4b43      	ldr	r3, [pc, #268]	; (8003a28 <xTaskIncrementTick+0x15c>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a41      	ldr	r2, [pc, #260]	; (8003a24 <xTaskIncrementTick+0x158>)
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	4a41      	ldr	r2, [pc, #260]	; (8003a28 <xTaskIncrementTick+0x15c>)
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	6013      	str	r3, [r2, #0]
 8003926:	4b41      	ldr	r3, [pc, #260]	; (8003a2c <xTaskIncrementTick+0x160>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	3301      	adds	r3, #1
 800392c:	4a3f      	ldr	r2, [pc, #252]	; (8003a2c <xTaskIncrementTick+0x160>)
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	f000 faca 	bl	8003ec8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if (xConstTickCount >= xNextTaskUnblockTime)
 8003934:	4b3e      	ldr	r3, [pc, #248]	; (8003a30 <xTaskIncrementTick+0x164>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	429a      	cmp	r2, r3
 800393c:	d34e      	bcc.n	80039dc <xTaskIncrementTick+0x110>
		{
			for (;;)
			{
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE)
 800393e:	4b39      	ldr	r3, [pc, #228]	; (8003a24 <xTaskIncrementTick+0x158>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d101      	bne.n	800394c <xTaskIncrementTick+0x80>
 8003948:	2301      	movs	r3, #1
 800394a:	e000      	b.n	800394e <xTaskIncrementTick+0x82>
 800394c:	2300      	movs	r3, #0
 800394e:	2b00      	cmp	r3, #0
 8003950:	d004      	beq.n	800395c <xTaskIncrementTick+0x90>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <xTaskIncrementTick+0x164>)
 8003954:	f04f 32ff 	mov.w	r2, #4294967295
 8003958:	601a      	str	r2, [r3, #0]
					break;
 800395a:	e03f      	b.n	80039dc <xTaskIncrementTick+0x110>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
 800395c:	4b31      	ldr	r3, [pc, #196]	; (8003a24 <xTaskIncrementTick+0x158>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	68db      	ldr	r3, [r3, #12]
 8003964:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE(&(pxTCB->xStateListItem));
 8003966:	68bb      	ldr	r3, [r7, #8]
 8003968:	685b      	ldr	r3, [r3, #4]
 800396a:	607b      	str	r3, [r7, #4]

					if (xConstTickCount < xItemValue)
 800396c:	693a      	ldr	r2, [r7, #16]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	429a      	cmp	r2, r3
 8003972:	d203      	bcs.n	800397c <xTaskIncrementTick+0xb0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003974:	4a2e      	ldr	r2, [pc, #184]	; (8003a30 <xTaskIncrementTick+0x164>)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6013      	str	r3, [r2, #0]
						break;
 800397a:	e02f      	b.n	80039dc <xTaskIncrementTick+0x110>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					(void)uxListRemove(&(pxTCB->xStateListItem));
 800397c:	68bb      	ldr	r3, [r7, #8]
 800397e:	3304      	adds	r3, #4
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe ff45 	bl	8002810 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if (listLIST_ITEM_CONTAINER(&(pxTCB->xEventListItem)) != NULL)
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800398a:	2b00      	cmp	r3, #0
 800398c:	d004      	beq.n	8003998 <xTaskIncrementTick+0xcc>
					{
						(void)uxListRemove(&(pxTCB->xEventListItem));
 800398e:	68bb      	ldr	r3, [r7, #8]
 8003990:	3318      	adds	r3, #24
 8003992:	4618      	mov	r0, r3
 8003994:	f7fe ff3c 	bl	8002810 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList(pxTCB);
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800399c:	4b25      	ldr	r3, [pc, #148]	; (8003a34 <xTaskIncrementTick+0x168>)
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	429a      	cmp	r2, r3
 80039a2:	d903      	bls.n	80039ac <xTaskIncrementTick+0xe0>
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a8:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <xTaskIncrementTick+0x168>)
 80039aa:	6013      	str	r3, [r2, #0]
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039b0:	4613      	mov	r3, r2
 80039b2:	009b      	lsls	r3, r3, #2
 80039b4:	4413      	add	r3, r2
 80039b6:	009b      	lsls	r3, r3, #2
 80039b8:	4a1f      	ldr	r2, [pc, #124]	; (8003a38 <xTaskIncrementTick+0x16c>)
 80039ba:	441a      	add	r2, r3
 80039bc:	68bb      	ldr	r3, [r7, #8]
 80039be:	3304      	adds	r3, #4
 80039c0:	4619      	mov	r1, r3
 80039c2:	4610      	mov	r0, r2
 80039c4:	f7fe fec9 	bl	800275a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if (pxTCB->uxPriority >= pxCurrentTCB->uxPriority)
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039cc:	4b1b      	ldr	r3, [pc, #108]	; (8003a3c <xTaskIncrementTick+0x170>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d3b3      	bcc.n	800393e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 80039d6:	2301      	movs	r3, #1
 80039d8:	617b      	str	r3, [r7, #20]
				if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE)
 80039da:	e7b0      	b.n	800393e <xTaskIncrementTick+0x72>
/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
#if ((configUSE_PREEMPTION == 1) && (configUSE_TIME_SLICING == 1))
		{
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[pxCurrentTCB->uxPriority])) > (UBaseType_t)1)
 80039dc:	4b17      	ldr	r3, [pc, #92]	; (8003a3c <xTaskIncrementTick+0x170>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80039e2:	4915      	ldr	r1, [pc, #84]	; (8003a38 <xTaskIncrementTick+0x16c>)
 80039e4:	4613      	mov	r3, r2
 80039e6:	009b      	lsls	r3, r3, #2
 80039e8:	4413      	add	r3, r2
 80039ea:	009b      	lsls	r3, r3, #2
 80039ec:	440b      	add	r3, r1
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	2b01      	cmp	r3, #1
 80039f2:	d907      	bls.n	8003a04 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 80039f4:	2301      	movs	r3, #1
 80039f6:	617b      	str	r3, [r7, #20]
 80039f8:	e004      	b.n	8003a04 <xTaskIncrementTick+0x138>
		}
#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80039fa:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <xTaskIncrementTick+0x174>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3301      	adds	r3, #1
 8003a00:	4a0f      	ldr	r2, [pc, #60]	; (8003a40 <xTaskIncrementTick+0x174>)
 8003a02:	6013      	str	r3, [r2, #0]
#endif
	}

#if (configUSE_PREEMPTION == 1)
	{
		if (xYieldPending != pdFALSE)
 8003a04:	4b0f      	ldr	r3, [pc, #60]	; (8003a44 <xTaskIncrementTick+0x178>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d001      	beq.n	8003a10 <xTaskIncrementTick+0x144>
		{
			xSwitchRequired = pdTRUE;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8003a10:	697b      	ldr	r3, [r7, #20]
}
 8003a12:	4618      	mov	r0, r3
 8003a14:	3718      	adds	r7, #24
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	20000c90 	.word	0x20000c90
 8003a20:	20000c6c 	.word	0x20000c6c
 8003a24:	20000c20 	.word	0x20000c20
 8003a28:	20000c24 	.word	0x20000c24
 8003a2c:	20000c80 	.word	0x20000c80
 8003a30:	20000c88 	.word	0x20000c88
 8003a34:	20000c70 	.word	0x20000c70
 8003a38:	20000798 	.word	0x20000798
 8003a3c:	20000794 	.word	0x20000794
 8003a40:	20000c78 	.word	0x20000c78
 8003a44:	20000c7c 	.word	0x20000c7c

08003a48 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext(void)
{
 8003a48:	b480      	push	{r7}
 8003a4a:	b085      	sub	sp, #20
 8003a4c:	af00      	add	r7, sp, #0
	if (uxSchedulerSuspended != (UBaseType_t)pdFALSE)
 8003a4e:	4b27      	ldr	r3, [pc, #156]	; (8003aec <vTaskSwitchContext+0xa4>)
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d003      	beq.n	8003a5e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003a56:	4b26      	ldr	r3, [pc, #152]	; (8003af0 <vTaskSwitchContext+0xa8>)
 8003a58:	2201      	movs	r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &(pxCurrentTCB->xNewLib_reent);
		}
#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003a5c:	e040      	b.n	8003ae0 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8003a5e:	4b24      	ldr	r3, [pc, #144]	; (8003af0 <vTaskSwitchContext+0xa8>)
 8003a60:	2200      	movs	r2, #0
 8003a62:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8003a64:	4b23      	ldr	r3, [pc, #140]	; (8003af4 <vTaskSwitchContext+0xac>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	60fb      	str	r3, [r7, #12]
 8003a6a:	e00f      	b.n	8003a8c <vTaskSwitchContext+0x44>
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d109      	bne.n	8003a86 <vTaskSwitchContext+0x3e>
 8003a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a76:	f383 8811 	msr	BASEPRI, r3
 8003a7a:	f3bf 8f6f 	isb	sy
 8003a7e:	f3bf 8f4f 	dsb	sy
 8003a82:	607b      	str	r3, [r7, #4]
 8003a84:	e7fe      	b.n	8003a84 <vTaskSwitchContext+0x3c>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	60fb      	str	r3, [r7, #12]
 8003a8c:	491a      	ldr	r1, [pc, #104]	; (8003af8 <vTaskSwitchContext+0xb0>)
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	4613      	mov	r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	009b      	lsls	r3, r3, #2
 8003a98:	440b      	add	r3, r1
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d0e5      	beq.n	8003a6c <vTaskSwitchContext+0x24>
 8003aa0:	68fa      	ldr	r2, [r7, #12]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	009b      	lsls	r3, r3, #2
 8003aa6:	4413      	add	r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <vTaskSwitchContext+0xb0>)
 8003aac:	4413      	add	r3, r2
 8003aae:	60bb      	str	r3, [r7, #8]
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	685a      	ldr	r2, [r3, #4]
 8003ab6:	68bb      	ldr	r3, [r7, #8]
 8003ab8:	605a      	str	r2, [r3, #4]
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	68bb      	ldr	r3, [r7, #8]
 8003ac0:	3308      	adds	r3, #8
 8003ac2:	429a      	cmp	r2, r3
 8003ac4:	d104      	bne.n	8003ad0 <vTaskSwitchContext+0x88>
 8003ac6:	68bb      	ldr	r3, [r7, #8]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	685a      	ldr	r2, [r3, #4]
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	68db      	ldr	r3, [r3, #12]
 8003ad6:	4a09      	ldr	r2, [pc, #36]	; (8003afc <vTaskSwitchContext+0xb4>)
 8003ad8:	6013      	str	r3, [r2, #0]
 8003ada:	4a06      	ldr	r2, [pc, #24]	; (8003af4 <vTaskSwitchContext+0xac>)
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6013      	str	r3, [r2, #0]
}
 8003ae0:	bf00      	nop
 8003ae2:	3714      	adds	r7, #20
 8003ae4:	46bd      	mov	sp, r7
 8003ae6:	bc80      	pop	{r7}
 8003ae8:	4770      	bx	lr
 8003aea:	bf00      	nop
 8003aec:	20000c90 	.word	0x20000c90
 8003af0:	20000c7c 	.word	0x20000c7c
 8003af4:	20000c70 	.word	0x20000c70
 8003af8:	20000798 	.word	0x20000798
 8003afc:	20000794 	.word	0x20000794

08003b00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList(List_t *const pxEventList, const TickType_t xTicksToWait)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
	configASSERT(pxEventList);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d109      	bne.n	8003b24 <vTaskPlaceOnEventList+0x24>
 8003b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b14:	f383 8811 	msr	BASEPRI, r3
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	f3bf 8f4f 	dsb	sy
 8003b20:	60fb      	str	r3, [r7, #12]
 8003b22:	e7fe      	b.n	8003b22 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert(pxEventList, &(pxCurrentTCB->xEventListItem));
 8003b24:	4b07      	ldr	r3, [pc, #28]	; (8003b44 <vTaskPlaceOnEventList+0x44>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	3318      	adds	r3, #24
 8003b2a:	4619      	mov	r1, r3
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f7fe fe37 	bl	80027a0 <vListInsert>

	prvAddCurrentTaskToDelayedList(xTicksToWait, pdTRUE);
 8003b32:	2101      	movs	r1, #1
 8003b34:	6838      	ldr	r0, [r7, #0]
 8003b36:	f000 fa75 	bl	8004024 <prvAddCurrentTaskToDelayedList>
}
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000794 	.word	0x20000794

08003b48 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if (configUSE_TIMERS == 1)

void vTaskPlaceOnEventListRestricted(List_t *const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b086      	sub	sp, #24
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	60f8      	str	r0, [r7, #12]
 8003b50:	60b9      	str	r1, [r7, #8]
 8003b52:	607a      	str	r2, [r7, #4]
	configASSERT(pxEventList);
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <vTaskPlaceOnEventListRestricted+0x26>
 8003b5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5e:	f383 8811 	msr	BASEPRI, r3
 8003b62:	f3bf 8f6f 	isb	sy
 8003b66:	f3bf 8f4f 	dsb	sy
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e7fe      	b.n	8003b6c <vTaskPlaceOnEventListRestricted+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
	vListInsertEnd(pxEventList, &(pxCurrentTCB->xEventListItem));
 8003b6e:	4b0a      	ldr	r3, [pc, #40]	; (8003b98 <vTaskPlaceOnEventListRestricted+0x50>)
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	3318      	adds	r3, #24
 8003b74:	4619      	mov	r1, r3
 8003b76:	68f8      	ldr	r0, [r7, #12]
 8003b78:	f7fe fdef 	bl	800275a <vListInsertEnd>

	/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
	if (xWaitIndefinitely != pdFALSE)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d002      	beq.n	8003b88 <vTaskPlaceOnEventListRestricted+0x40>
	{
		xTicksToWait = portMAX_DELAY;
 8003b82:	f04f 33ff 	mov.w	r3, #4294967295
 8003b86:	60bb      	str	r3, [r7, #8]
	}

	traceTASK_DELAY_UNTIL((xTickCount + xTicksToWait));
	prvAddCurrentTaskToDelayedList(xTicksToWait, xWaitIndefinitely);
 8003b88:	6879      	ldr	r1, [r7, #4]
 8003b8a:	68b8      	ldr	r0, [r7, #8]
 8003b8c:	f000 fa4a 	bl	8004024 <prvAddCurrentTaskToDelayedList>
}
 8003b90:	bf00      	nop
 8003b92:	3718      	adds	r7, #24
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	20000794 	.word	0x20000794

08003b9c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList(const List_t *const pxEventList)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b086      	sub	sp, #24
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxEventList);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	68db      	ldr	r3, [r3, #12]
 8003baa:	613b      	str	r3, [r7, #16]
	configASSERT(pxUnblockedTCB);
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d109      	bne.n	8003bc6 <xTaskRemoveFromEventList+0x2a>
 8003bb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb6:	f383 8811 	msr	BASEPRI, r3
 8003bba:	f3bf 8f6f 	isb	sy
 8003bbe:	f3bf 8f4f 	dsb	sy
 8003bc2:	60fb      	str	r3, [r7, #12]
 8003bc4:	e7fe      	b.n	8003bc4 <xTaskRemoveFromEventList+0x28>
	(void)uxListRemove(&(pxUnblockedTCB->xEventListItem));
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3318      	adds	r3, #24
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f7fe fe20 	bl	8002810 <uxListRemove>

	if (uxSchedulerSuspended == (UBaseType_t)pdFALSE)
 8003bd0:	4b1d      	ldr	r3, [pc, #116]	; (8003c48 <xTaskRemoveFromEventList+0xac>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d11d      	bne.n	8003c14 <xTaskRemoveFromEventList+0x78>
	{
		(void)uxListRemove(&(pxUnblockedTCB->xStateListItem));
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	3304      	adds	r3, #4
 8003bdc:	4618      	mov	r0, r3
 8003bde:	f7fe fe17 	bl	8002810 <uxListRemove>
		prvAddTaskToReadyList(pxUnblockedTCB);
 8003be2:	693b      	ldr	r3, [r7, #16]
 8003be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003be6:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <xTaskRemoveFromEventList+0xb0>)
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d903      	bls.n	8003bf6 <xTaskRemoveFromEventList+0x5a>
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf2:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <xTaskRemoveFromEventList+0xb0>)
 8003bf4:	6013      	str	r3, [r2, #0]
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bfa:	4613      	mov	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4413      	add	r3, r2
 8003c00:	009b      	lsls	r3, r3, #2
 8003c02:	4a13      	ldr	r2, [pc, #76]	; (8003c50 <xTaskRemoveFromEventList+0xb4>)
 8003c04:	441a      	add	r2, r3
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	3304      	adds	r3, #4
 8003c0a:	4619      	mov	r1, r3
 8003c0c:	4610      	mov	r0, r2
 8003c0e:	f7fe fda4 	bl	800275a <vListInsertEnd>
 8003c12:	e005      	b.n	8003c20 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd(&(xPendingReadyList), &(pxUnblockedTCB->xEventListItem));
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	3318      	adds	r3, #24
 8003c18:	4619      	mov	r1, r3
 8003c1a:	480e      	ldr	r0, [pc, #56]	; (8003c54 <xTaskRemoveFromEventList+0xb8>)
 8003c1c:	f7fe fd9d 	bl	800275a <vListInsertEnd>
	}

	if (pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority)
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c24:	4b0c      	ldr	r3, [pc, #48]	; (8003c58 <xTaskRemoveFromEventList+0xbc>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c2a:	429a      	cmp	r2, r3
 8003c2c:	d905      	bls.n	8003c3a <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c32:	4b0a      	ldr	r3, [pc, #40]	; (8003c5c <xTaskRemoveFromEventList+0xc0>)
 8003c34:	2201      	movs	r2, #1
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	e001      	b.n	8003c3e <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
#endif

	return xReturn;
 8003c3e:	697b      	ldr	r3, [r7, #20]
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3718      	adds	r7, #24
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}
 8003c48:	20000c90 	.word	0x20000c90
 8003c4c:	20000c70 	.word	0x20000c70
 8003c50:	20000798 	.word	0x20000798
 8003c54:	20000c28 	.word	0x20000c28
 8003c58:	20000794 	.word	0x20000794
 8003c5c:	20000c7c 	.word	0x20000c7c

08003c60 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState(TimeOut_t *const pxTimeOut)
{
 8003c60:	b480      	push	{r7}
 8003c62:	b083      	sub	sp, #12
 8003c64:	af00      	add	r7, sp, #0
 8003c66:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003c68:	4b06      	ldr	r3, [pc, #24]	; (8003c84 <vTaskInternalSetTimeOutState+0x24>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003c70:	4b05      	ldr	r3, [pc, #20]	; (8003c88 <vTaskInternalSetTimeOutState+0x28>)
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	605a      	str	r2, [r3, #4]
}
 8003c78:	bf00      	nop
 8003c7a:	370c      	adds	r7, #12
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bc80      	pop	{r7}
 8003c80:	4770      	bx	lr
 8003c82:	bf00      	nop
 8003c84:	20000c80 	.word	0x20000c80
 8003c88:	20000c6c 	.word	0x20000c6c

08003c8c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut(TimeOut_t *const pxTimeOut, TickType_t *const pxTicksToWait)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;

	configASSERT(pxTimeOut);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d109      	bne.n	8003cb0 <xTaskCheckForTimeOut+0x24>
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	613b      	str	r3, [r7, #16]
 8003cae:	e7fe      	b.n	8003cae <xTaskCheckForTimeOut+0x22>
	configASSERT(pxTicksToWait);
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d109      	bne.n	8003cca <xTaskCheckForTimeOut+0x3e>
 8003cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cba:	f383 8811 	msr	BASEPRI, r3
 8003cbe:	f3bf 8f6f 	isb	sy
 8003cc2:	f3bf 8f4f 	dsb	sy
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e7fe      	b.n	8003cc8 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8003cca:	f000 fdf5 	bl	80048b8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003cce:	4b1d      	ldr	r3, [pc, #116]	; (8003d44 <xTaskCheckForTimeOut+0xb8>)
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	69ba      	ldr	r2, [r7, #24]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	617b      	str	r3, [r7, #20]
		}
		else
#endif

#if (INCLUDE_vTaskSuspend == 1)
			if (*pxTicksToWait == portMAX_DELAY)
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ce6:	d102      	bne.n	8003cee <xTaskCheckForTimeOut+0x62>
		{
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
			xReturn = pdFALSE;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	61fb      	str	r3, [r7, #28]
 8003cec:	e023      	b.n	8003d36 <xTaskCheckForTimeOut+0xaa>
		}
		else
#endif

			if ((xNumOfOverflows != pxTimeOut->xOverflowCount) && (xConstTickCount >= pxTimeOut->xTimeOnEntering)) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b15      	ldr	r3, [pc, #84]	; (8003d48 <xTaskCheckForTimeOut+0xbc>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d007      	beq.n	8003d0a <xTaskCheckForTimeOut+0x7e>
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	69ba      	ldr	r2, [r7, #24]
 8003d00:	429a      	cmp	r2, r3
 8003d02:	d302      	bcc.n	8003d0a <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003d04:	2301      	movs	r3, #1
 8003d06:	61fb      	str	r3, [r7, #28]
 8003d08:	e015      	b.n	8003d36 <xTaskCheckForTimeOut+0xaa>
		}
		else if (xElapsedTime < *pxTicksToWait) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003d0a:	683b      	ldr	r3, [r7, #0]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	697a      	ldr	r2, [r7, #20]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d20b      	bcs.n	8003d2c <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	1ad2      	subs	r2, r2, r3
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState(pxTimeOut);
 8003d20:	6878      	ldr	r0, [r7, #4]
 8003d22:	f7ff ff9d 	bl	8003c60 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003d26:	2300      	movs	r3, #0
 8003d28:	61fb      	str	r3, [r7, #28]
 8003d2a:	e004      	b.n	8003d36 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	2200      	movs	r2, #0
 8003d30:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003d32:	2301      	movs	r3, #1
 8003d34:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003d36:	f000 fded 	bl	8004914 <vPortExitCritical>

	return xReturn;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3720      	adds	r7, #32
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}
 8003d44:	20000c6c 	.word	0x20000c6c
 8003d48:	20000c80 	.word	0x20000c80

08003d4c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield(void)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003d50:	4b03      	ldr	r3, [pc, #12]	; (8003d60 <vTaskMissedYield+0x14>)
 8003d52:	2201      	movs	r2, #1
 8003d54:	601a      	str	r2, [r3, #0]
}
 8003d56:	bf00      	nop
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bc80      	pop	{r7}
 8003d5c:	4770      	bx	lr
 8003d5e:	bf00      	nop
 8003d60:	20000c7c 	.word	0x20000c7c

08003d64 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION(prvIdleTask, pvParameters)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]

	for (;;)
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003d6c:	f000 f852 	bl	8003e14 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if (listCURRENT_LIST_LENGTH(&(pxReadyTasksLists[tskIDLE_PRIORITY])) > (UBaseType_t)1)
 8003d70:	4b06      	ldr	r3, [pc, #24]	; (8003d8c <prvIdleTask+0x28>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d9f9      	bls.n	8003d6c <prvIdleTask+0x8>
			{
				taskYIELD();
 8003d78:	4b05      	ldr	r3, [pc, #20]	; (8003d90 <prvIdleTask+0x2c>)
 8003d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	f3bf 8f4f 	dsb	sy
 8003d84:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003d88:	e7f0      	b.n	8003d6c <prvIdleTask+0x8>
 8003d8a:	bf00      	nop
 8003d8c:	20000798 	.word	0x20000798
 8003d90:	e000ed04 	.word	0xe000ed04

08003d94 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists(void)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
	UBaseType_t uxPriority;

	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++)
 8003d9a:	2300      	movs	r3, #0
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	e00c      	b.n	8003dba <prvInitialiseTaskLists+0x26>
	{
		vListInitialise(&(pxReadyTasksLists[uxPriority]));
 8003da0:	687a      	ldr	r2, [r7, #4]
 8003da2:	4613      	mov	r3, r2
 8003da4:	009b      	lsls	r3, r3, #2
 8003da6:	4413      	add	r3, r2
 8003da8:	009b      	lsls	r3, r3, #2
 8003daa:	4a12      	ldr	r2, [pc, #72]	; (8003df4 <prvInitialiseTaskLists+0x60>)
 8003dac:	4413      	add	r3, r2
 8003dae:	4618      	mov	r0, r3
 8003db0:	f7fe fca8 	bl	8002704 <vListInitialise>
	for (uxPriority = (UBaseType_t)0U; uxPriority < (UBaseType_t)configMAX_PRIORITIES; uxPriority++)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3301      	adds	r3, #1
 8003db8:	607b      	str	r3, [r7, #4]
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2b37      	cmp	r3, #55	; 0x37
 8003dbe:	d9ef      	bls.n	8003da0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise(&xDelayedTaskList1);
 8003dc0:	480d      	ldr	r0, [pc, #52]	; (8003df8 <prvInitialiseTaskLists+0x64>)
 8003dc2:	f7fe fc9f 	bl	8002704 <vListInitialise>
	vListInitialise(&xDelayedTaskList2);
 8003dc6:	480d      	ldr	r0, [pc, #52]	; (8003dfc <prvInitialiseTaskLists+0x68>)
 8003dc8:	f7fe fc9c 	bl	8002704 <vListInitialise>
	vListInitialise(&xPendingReadyList);
 8003dcc:	480c      	ldr	r0, [pc, #48]	; (8003e00 <prvInitialiseTaskLists+0x6c>)
 8003dce:	f7fe fc99 	bl	8002704 <vListInitialise>

#if (INCLUDE_vTaskDelete == 1)
	{
		vListInitialise(&xTasksWaitingTermination);
 8003dd2:	480c      	ldr	r0, [pc, #48]	; (8003e04 <prvInitialiseTaskLists+0x70>)
 8003dd4:	f7fe fc96 	bl	8002704 <vListInitialise>
	}
#endif /* INCLUDE_vTaskDelete */

#if (INCLUDE_vTaskSuspend == 1)
	{
		vListInitialise(&xSuspendedTaskList);
 8003dd8:	480b      	ldr	r0, [pc, #44]	; (8003e08 <prvInitialiseTaskLists+0x74>)
 8003dda:	f7fe fc93 	bl	8002704 <vListInitialise>
	}
#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003dde:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <prvInitialiseTaskLists+0x78>)
 8003de0:	4a05      	ldr	r2, [pc, #20]	; (8003df8 <prvInitialiseTaskLists+0x64>)
 8003de2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003de4:	4b0a      	ldr	r3, [pc, #40]	; (8003e10 <prvInitialiseTaskLists+0x7c>)
 8003de6:	4a05      	ldr	r2, [pc, #20]	; (8003dfc <prvInitialiseTaskLists+0x68>)
 8003de8:	601a      	str	r2, [r3, #0]
}
 8003dea:	bf00      	nop
 8003dec:	3708      	adds	r7, #8
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd80      	pop	{r7, pc}
 8003df2:	bf00      	nop
 8003df4:	20000798 	.word	0x20000798
 8003df8:	20000bf8 	.word	0x20000bf8
 8003dfc:	20000c0c 	.word	0x20000c0c
 8003e00:	20000c28 	.word	0x20000c28
 8003e04:	20000c3c 	.word	0x20000c3c
 8003e08:	20000c54 	.word	0x20000c54
 8003e0c:	20000c20 	.word	0x20000c20
 8003e10:	20000c24 	.word	0x20000c24

08003e14 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U)
 8003e1a:	e019      	b.n	8003e50 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003e1c:	f000 fd4c 	bl	80048b8 <vPortEnterCritical>
			{
				pxTCB = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY((&xTasksWaitingTermination));
 8003e20:	4b0f      	ldr	r3, [pc, #60]	; (8003e60 <prvCheckTasksWaitingTermination+0x4c>)
 8003e22:	68db      	ldr	r3, [r3, #12]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	607b      	str	r3, [r7, #4]
				(void)uxListRemove(&(pxTCB->xStateListItem));
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	3304      	adds	r3, #4
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	f7fe fcef 	bl	8002810 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003e32:	4b0c      	ldr	r3, [pc, #48]	; (8003e64 <prvCheckTasksWaitingTermination+0x50>)
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3b01      	subs	r3, #1
 8003e38:	4a0a      	ldr	r2, [pc, #40]	; (8003e64 <prvCheckTasksWaitingTermination+0x50>)
 8003e3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003e3c:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <prvCheckTasksWaitingTermination+0x54>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3b01      	subs	r3, #1
 8003e42:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <prvCheckTasksWaitingTermination+0x54>)
 8003e44:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003e46:	f000 fd65 	bl	8004914 <vPortExitCritical>

			prvDeleteTCB(pxTCB);
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f000 f80e 	bl	8003e6c <prvDeleteTCB>
		while (uxDeletedTasksWaitingCleanUp > (UBaseType_t)0U)
 8003e50:	4b05      	ldr	r3, [pc, #20]	; (8003e68 <prvCheckTasksWaitingTermination+0x54>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d1e1      	bne.n	8003e1c <prvCheckTasksWaitingTermination+0x8>
		}
	}
#endif /* INCLUDE_vTaskDelete */
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20000c3c 	.word	0x20000c3c
 8003e64:	20000c68 	.word	0x20000c68
 8003e68:	20000c50 	.word	0x20000c50

08003e6c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if (INCLUDE_vTaskDelete == 1)

static void prvDeleteTCB(TCB_t *pxTCB)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
#elif (tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0) /*lint !e731 Macro has been consolidated for readability reasons. */
	{
		/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
		if (pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d108      	bne.n	8003e90 <prvDeleteTCB+0x24>
		{
			/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
			vPortFree(pxTCB->pxStack);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fed0 	bl	8004c28 <vPortFree>
			vPortFree(pxTCB);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 fecd 	bl	8004c28 <vPortFree>
			configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
			mtCOVERAGE_TEST_MARKER();
		}
	}
#endif												   /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8003e8e:	e017      	b.n	8003ec0 <prvDeleteTCB+0x54>
		else if (pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d103      	bne.n	8003ea2 <prvDeleteTCB+0x36>
			vPortFree(pxTCB);
 8003e9a:	6878      	ldr	r0, [r7, #4]
 8003e9c:	f000 fec4 	bl	8004c28 <vPortFree>
}
 8003ea0:	e00e      	b.n	8003ec0 <prvDeleteTCB+0x54>
			configASSERT(pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8003ea8:	2b02      	cmp	r3, #2
 8003eaa:	d009      	beq.n	8003ec0 <prvDeleteTCB+0x54>
 8003eac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eb0:	f383 8811 	msr	BASEPRI, r3
 8003eb4:	f3bf 8f6f 	isb	sy
 8003eb8:	f3bf 8f4f 	dsb	sy
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	e7fe      	b.n	8003ebe <prvDeleteTCB+0x52>
}
 8003ec0:	bf00      	nop
 8003ec2:	3710      	adds	r7, #16
 8003ec4:	46bd      	mov	sp, r7
 8003ec6:	bd80      	pop	{r7, pc}

08003ec8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime(void)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b083      	sub	sp, #12
 8003ecc:	af00      	add	r7, sp, #0
	TCB_t *pxTCB;

	if (listLIST_IS_EMPTY(pxDelayedTaskList) != pdFALSE)
 8003ece:	4b0e      	ldr	r3, [pc, #56]	; (8003f08 <prvResetNextTaskUnblockTime+0x40>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	d101      	bne.n	8003edc <prvResetNextTaskUnblockTime+0x14>
 8003ed8:	2301      	movs	r3, #1
 8003eda:	e000      	b.n	8003ede <prvResetNextTaskUnblockTime+0x16>
 8003edc:	2300      	movs	r3, #0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d004      	beq.n	8003eec <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003ee2:	4b0a      	ldr	r3, [pc, #40]	; (8003f0c <prvResetNextTaskUnblockTime+0x44>)
 8003ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee8:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		(pxTCB) = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
	}
}
 8003eea:	e008      	b.n	8003efe <prvResetNextTaskUnblockTime+0x36>
		(pxTCB) = (TCB_t *)listGET_OWNER_OF_HEAD_ENTRY(pxDelayedTaskList);
 8003eec:	4b06      	ldr	r3, [pc, #24]	; (8003f08 <prvResetNextTaskUnblockTime+0x40>)
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	68db      	ldr	r3, [r3, #12]
 8003ef2:	68db      	ldr	r3, [r3, #12]
 8003ef4:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE(&((pxTCB)->xStateListItem));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	685b      	ldr	r3, [r3, #4]
 8003efa:	4a04      	ldr	r2, [pc, #16]	; (8003f0c <prvResetNextTaskUnblockTime+0x44>)
 8003efc:	6013      	str	r3, [r2, #0]
}
 8003efe:	bf00      	nop
 8003f00:	370c      	adds	r7, #12
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bc80      	pop	{r7}
 8003f06:	4770      	bx	lr
 8003f08:	20000c20 	.word	0x20000c20
 8003f0c:	20000c88 	.word	0x20000c88

08003f10 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ((INCLUDE_xTaskGetSchedulerState == 1) || (configUSE_TIMERS == 1))

BaseType_t xTaskGetSchedulerState(void)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

	if (xSchedulerRunning == pdFALSE)
 8003f16:	4b0b      	ldr	r3, [pc, #44]	; (8003f44 <xTaskGetSchedulerState+0x34>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d102      	bne.n	8003f24 <xTaskGetSchedulerState+0x14>
	{
		xReturn = taskSCHEDULER_NOT_STARTED;
 8003f1e:	2301      	movs	r3, #1
 8003f20:	607b      	str	r3, [r7, #4]
 8003f22:	e008      	b.n	8003f36 <xTaskGetSchedulerState+0x26>
	}
	else
	{
		if (uxSchedulerSuspended == (UBaseType_t)pdFALSE)
 8003f24:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <xTaskGetSchedulerState+0x38>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d102      	bne.n	8003f32 <xTaskGetSchedulerState+0x22>
		{
			xReturn = taskSCHEDULER_RUNNING;
 8003f2c:	2302      	movs	r3, #2
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	e001      	b.n	8003f36 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			xReturn = taskSCHEDULER_SUSPENDED;
 8003f32:	2300      	movs	r3, #0
 8003f34:	607b      	str	r3, [r7, #4]
		}
	}

	return xReturn;
 8003f36:	687b      	ldr	r3, [r7, #4]
}
 8003f38:	4618      	mov	r0, r3
 8003f3a:	370c      	adds	r7, #12
 8003f3c:	46bd      	mov	sp, r7
 8003f3e:	bc80      	pop	{r7}
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	20000c74 	.word	0x20000c74
 8003f48:	20000c90 	.word	0x20000c90

08003f4c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if (configUSE_MUTEXES == 1)

BaseType_t xTaskPriorityDisinherit(TaskHandle_t const pxMutexHolder)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b086      	sub	sp, #24
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
	TCB_t *const pxTCB = (TCB_t *)pxMutexHolder;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	617b      	str	r3, [r7, #20]

	if (pxMutexHolder != NULL)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d054      	beq.n	800400c <xTaskPriorityDisinherit+0xc0>
	{
		/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
		configASSERT(pxTCB == pxCurrentTCB);
 8003f62:	4b2d      	ldr	r3, [pc, #180]	; (8004018 <xTaskPriorityDisinherit+0xcc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	693a      	ldr	r2, [r7, #16]
 8003f68:	429a      	cmp	r2, r3
 8003f6a:	d009      	beq.n	8003f80 <xTaskPriorityDisinherit+0x34>
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	60fb      	str	r3, [r7, #12]
 8003f7e:	e7fe      	b.n	8003f7e <xTaskPriorityDisinherit+0x32>
		configASSERT(pxTCB->uxMutexesHeld);
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d109      	bne.n	8003f9c <xTaskPriorityDisinherit+0x50>
 8003f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f8c:	f383 8811 	msr	BASEPRI, r3
 8003f90:	f3bf 8f6f 	isb	sy
 8003f94:	f3bf 8f4f 	dsb	sy
 8003f98:	60bb      	str	r3, [r7, #8]
 8003f9a:	e7fe      	b.n	8003f9a <xTaskPriorityDisinherit+0x4e>
		(pxTCB->uxMutexesHeld)--;
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	693b      	ldr	r3, [r7, #16]
 8003fa4:	651a      	str	r2, [r3, #80]	; 0x50

		/* Has the holder of the mutex inherited the priority of another
			task? */
		if (pxTCB->uxPriority != pxTCB->uxBasePriority)
 8003fa6:	693b      	ldr	r3, [r7, #16]
 8003fa8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003faa:	693b      	ldr	r3, [r7, #16]
 8003fac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d02c      	beq.n	800400c <xTaskPriorityDisinherit+0xc0>
		{
			/* Only disinherit if no other mutexes are held. */
			if (pxTCB->uxMutexesHeld == (UBaseType_t)0)
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d128      	bne.n	800400c <xTaskPriorityDisinherit+0xc0>
				/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
				if (uxListRemove(&(pxTCB->xStateListItem)) == (UBaseType_t)0)
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	3304      	adds	r3, #4
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f7fe fc26 	bl	8002810 <uxListRemove>
				}

				/* Disinherit the priority before adding the task into the
					new	ready list. */
				traceTASK_PRIORITY_DISINHERIT(pxTCB, pxTCB->uxBasePriority);
				pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c

				/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
				listSET_LIST_ITEM_VALUE(&(pxTCB->xEventListItem), (TickType_t)configMAX_PRIORITIES - (TickType_t)pxTCB->uxPriority); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fd0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	619a      	str	r2, [r3, #24]
				prvAddTaskToReadyList(pxTCB);
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fdc:	4b0f      	ldr	r3, [pc, #60]	; (800401c <xTaskPriorityDisinherit+0xd0>)
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d903      	bls.n	8003fec <xTaskPriorityDisinherit+0xa0>
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe8:	4a0c      	ldr	r2, [pc, #48]	; (800401c <xTaskPriorityDisinherit+0xd0>)
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff0:	4613      	mov	r3, r2
 8003ff2:	009b      	lsls	r3, r3, #2
 8003ff4:	4413      	add	r3, r2
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	4a09      	ldr	r2, [pc, #36]	; (8004020 <xTaskPriorityDisinherit+0xd4>)
 8003ffa:	441a      	add	r2, r3
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	3304      	adds	r3, #4
 8004000:	4619      	mov	r1, r3
 8004002:	4610      	mov	r0, r2
 8004004:	f7fe fba9 	bl	800275a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
				xReturn = pdTRUE;
 8004008:	2301      	movs	r3, #1
 800400a:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800400c:	697b      	ldr	r3, [r7, #20]
}
 800400e:	4618      	mov	r0, r3
 8004010:	3718      	adds	r7, #24
 8004012:	46bd      	mov	sp, r7
 8004014:	bd80      	pop	{r7, pc}
 8004016:	bf00      	nop
 8004018:	20000794 	.word	0x20000794
 800401c:	20000c70 	.word	0x20000c70
 8004020:	20000798 	.word	0x20000798

08004024 <prvAddCurrentTaskToDelayedList>:

#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList(TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	6078      	str	r0, [r7, #4]
 800402c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	const TickType_t xConstTickCount = xTickCount;
 800402e:	4b21      	ldr	r3, [pc, #132]	; (80040b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	60fb      	str	r3, [r7, #12]
	}
#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if (uxListRemove(&(pxCurrentTCB->xStateListItem)) == (UBaseType_t)0)
 8004034:	4b20      	ldr	r3, [pc, #128]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f7fe fbe8 	bl	8002810 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

#if (INCLUDE_vTaskSuspend == 1)
	{
		if ((xTicksToWait == portMAX_DELAY) && (xCanBlockIndefinitely != pdFALSE))
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d10a      	bne.n	800405e <prvAddCurrentTaskToDelayedList+0x3a>
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d007      	beq.n	800405e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd(&xSuspendedTaskList, &(pxCurrentTCB->xStateListItem));
 800404e:	4b1a      	ldr	r3, [pc, #104]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3304      	adds	r3, #4
 8004054:	4619      	mov	r1, r3
 8004056:	4819      	ldr	r0, [pc, #100]	; (80040bc <prvAddCurrentTaskToDelayedList+0x98>)
 8004058:	f7fe fb7f 	bl	800275a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		(void)xCanBlockIndefinitely;
	}
#endif /* INCLUDE_vTaskSuspend */
}
 800405c:	e026      	b.n	80040ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800405e:	68fa      	ldr	r2, [r7, #12]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4413      	add	r3, r2
 8004064:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE(&(pxCurrentTCB->xStateListItem), xTimeToWake);
 8004066:	4b14      	ldr	r3, [pc, #80]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68ba      	ldr	r2, [r7, #8]
 800406c:	605a      	str	r2, [r3, #4]
			if (xTimeToWake < xConstTickCount)
 800406e:	68ba      	ldr	r2, [r7, #8]
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	429a      	cmp	r2, r3
 8004074:	d209      	bcs.n	800408a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert(pxOverflowDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 8004076:	4b12      	ldr	r3, [pc, #72]	; (80040c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4b0f      	ldr	r3, [pc, #60]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	3304      	adds	r3, #4
 8004080:	4619      	mov	r1, r3
 8004082:	4610      	mov	r0, r2
 8004084:	f7fe fb8c 	bl	80027a0 <vListInsert>
}
 8004088:	e010      	b.n	80040ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert(pxDelayedTaskList, &(pxCurrentTCB->xStateListItem));
 800408a:	4b0e      	ldr	r3, [pc, #56]	; (80040c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	4b0a      	ldr	r3, [pc, #40]	; (80040b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3304      	adds	r3, #4
 8004094:	4619      	mov	r1, r3
 8004096:	4610      	mov	r0, r2
 8004098:	f7fe fb82 	bl	80027a0 <vListInsert>
				if (xTimeToWake < xNextTaskUnblockTime)
 800409c:	4b0a      	ldr	r3, [pc, #40]	; (80040c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	68ba      	ldr	r2, [r7, #8]
 80040a2:	429a      	cmp	r2, r3
 80040a4:	d202      	bcs.n	80040ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80040a6:	4a08      	ldr	r2, [pc, #32]	; (80040c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	6013      	str	r3, [r2, #0]
}
 80040ac:	bf00      	nop
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	20000c6c 	.word	0x20000c6c
 80040b8:	20000794 	.word	0x20000794
 80040bc:	20000c54 	.word	0x20000c54
 80040c0:	20000c24 	.word	0x20000c24
 80040c4:	20000c20 	.word	0x20000c20
 80040c8:	20000c88 	.word	0x20000c88

080040cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b08a      	sub	sp, #40	; 0x28
 80040d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80040d2:	2300      	movs	r3, #0
 80040d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80040d6:	f000 fac3 	bl	8004660 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80040da:	4b1c      	ldr	r3, [pc, #112]	; (800414c <xTimerCreateTimerTask+0x80>)
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d021      	beq.n	8004126 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80040e2:	2300      	movs	r3, #0
 80040e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80040e6:	2300      	movs	r3, #0
 80040e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80040ea:	1d3a      	adds	r2, r7, #4
 80040ec:	f107 0108 	add.w	r1, r7, #8
 80040f0:	f107 030c 	add.w	r3, r7, #12
 80040f4:	4618      	mov	r0, r3
 80040f6:	f7fe faeb 	bl	80026d0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80040fa:	6879      	ldr	r1, [r7, #4]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	9202      	str	r2, [sp, #8]
 8004102:	9301      	str	r3, [sp, #4]
 8004104:	2302      	movs	r3, #2
 8004106:	9300      	str	r3, [sp, #0]
 8004108:	2300      	movs	r3, #0
 800410a:	460a      	mov	r2, r1
 800410c:	4910      	ldr	r1, [pc, #64]	; (8004150 <xTimerCreateTimerTask+0x84>)
 800410e:	4811      	ldr	r0, [pc, #68]	; (8004154 <xTimerCreateTimerTask+0x88>)
 8004110:	f7ff f8d6 	bl	80032c0 <xTaskCreateStatic>
 8004114:	4602      	mov	r2, r0
 8004116:	4b10      	ldr	r3, [pc, #64]	; (8004158 <xTimerCreateTimerTask+0x8c>)
 8004118:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800411a:	4b0f      	ldr	r3, [pc, #60]	; (8004158 <xTimerCreateTimerTask+0x8c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d001      	beq.n	8004126 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004122:	2301      	movs	r3, #1
 8004124:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d109      	bne.n	8004140 <xTimerCreateTimerTask+0x74>
 800412c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004130:	f383 8811 	msr	BASEPRI, r3
 8004134:	f3bf 8f6f 	isb	sy
 8004138:	f3bf 8f4f 	dsb	sy
 800413c:	613b      	str	r3, [r7, #16]
 800413e:	e7fe      	b.n	800413e <xTimerCreateTimerTask+0x72>
	return xReturn;
 8004140:	697b      	ldr	r3, [r7, #20]
}
 8004142:	4618      	mov	r0, r3
 8004144:	3718      	adds	r7, #24
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}
 800414a:	bf00      	nop
 800414c:	20000cc4 	.word	0x20000cc4
 8004150:	08005a58 	.word	0x08005a58
 8004154:	08004275 	.word	0x08004275
 8004158:	20000cc8 	.word	0x20000cc8

0800415c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800415c:	b580      	push	{r7, lr}
 800415e:	b08a      	sub	sp, #40	; 0x28
 8004160:	af00      	add	r7, sp, #0
 8004162:	60f8      	str	r0, [r7, #12]
 8004164:	60b9      	str	r1, [r7, #8]
 8004166:	607a      	str	r2, [r7, #4]
 8004168:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800416a:	2300      	movs	r3, #0
 800416c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d109      	bne.n	8004188 <xTimerGenericCommand+0x2c>
 8004174:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004178:	f383 8811 	msr	BASEPRI, r3
 800417c:	f3bf 8f6f 	isb	sy
 8004180:	f3bf 8f4f 	dsb	sy
 8004184:	623b      	str	r3, [r7, #32]
 8004186:	e7fe      	b.n	8004186 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004188:	4b19      	ldr	r3, [pc, #100]	; (80041f0 <xTimerGenericCommand+0x94>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d02a      	beq.n	80041e6 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800419c:	68bb      	ldr	r3, [r7, #8]
 800419e:	2b05      	cmp	r3, #5
 80041a0:	dc18      	bgt.n	80041d4 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80041a2:	f7ff feb5 	bl	8003f10 <xTaskGetSchedulerState>
 80041a6:	4603      	mov	r3, r0
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d109      	bne.n	80041c0 <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80041ac:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <xTimerGenericCommand+0x94>)
 80041ae:	6818      	ldr	r0, [r3, #0]
 80041b0:	f107 0110 	add.w	r1, r7, #16
 80041b4:	2300      	movs	r3, #0
 80041b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80041b8:	f7fe fc8e 	bl	8002ad8 <xQueueGenericSend>
 80041bc:	6278      	str	r0, [r7, #36]	; 0x24
 80041be:	e012      	b.n	80041e6 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80041c0:	4b0b      	ldr	r3, [pc, #44]	; (80041f0 <xTimerGenericCommand+0x94>)
 80041c2:	6818      	ldr	r0, [r3, #0]
 80041c4:	f107 0110 	add.w	r1, r7, #16
 80041c8:	2300      	movs	r3, #0
 80041ca:	2200      	movs	r2, #0
 80041cc:	f7fe fc84 	bl	8002ad8 <xQueueGenericSend>
 80041d0:	6278      	str	r0, [r7, #36]	; 0x24
 80041d2:	e008      	b.n	80041e6 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80041d4:	4b06      	ldr	r3, [pc, #24]	; (80041f0 <xTimerGenericCommand+0x94>)
 80041d6:	6818      	ldr	r0, [r3, #0]
 80041d8:	f107 0110 	add.w	r1, r7, #16
 80041dc:	2300      	movs	r3, #0
 80041de:	683a      	ldr	r2, [r7, #0]
 80041e0:	f7fe fd74 	bl	8002ccc <xQueueGenericSendFromISR>
 80041e4:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80041e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041e8:	4618      	mov	r0, r3
 80041ea:	3728      	adds	r7, #40	; 0x28
 80041ec:	46bd      	mov	sp, r7
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	20000cc4 	.word	0x20000cc4

080041f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b088      	sub	sp, #32
 80041f8:	af02      	add	r7, sp, #8
 80041fa:	6078      	str	r0, [r7, #4]
 80041fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041fe:	4b1c      	ldr	r3, [pc, #112]	; (8004270 <prvProcessExpiredTimer+0x7c>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	3304      	adds	r3, #4
 800420c:	4618      	mov	r0, r3
 800420e:	f7fe faff 	bl	8002810 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8004212:	697b      	ldr	r3, [r7, #20]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	2b01      	cmp	r3, #1
 8004218:	d121      	bne.n	800425e <prvProcessExpiredTimer+0x6a>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	699a      	ldr	r2, [r3, #24]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	18d1      	adds	r1, r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	683a      	ldr	r2, [r7, #0]
 8004226:	6978      	ldr	r0, [r7, #20]
 8004228:	f000 f8c8 	bl	80043bc <prvInsertTimerInActiveList>
 800422c:	4603      	mov	r3, r0
 800422e:	2b00      	cmp	r3, #0
 8004230:	d015      	beq.n	800425e <prvProcessExpiredTimer+0x6a>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004232:	2300      	movs	r3, #0
 8004234:	9300      	str	r3, [sp, #0]
 8004236:	2300      	movs	r3, #0
 8004238:	687a      	ldr	r2, [r7, #4]
 800423a:	2100      	movs	r1, #0
 800423c:	6978      	ldr	r0, [r7, #20]
 800423e:	f7ff ff8d 	bl	800415c <xTimerGenericCommand>
 8004242:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004244:	693b      	ldr	r3, [r7, #16]
 8004246:	2b00      	cmp	r3, #0
 8004248:	d109      	bne.n	800425e <prvProcessExpiredTimer+0x6a>
 800424a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800424e:	f383 8811 	msr	BASEPRI, r3
 8004252:	f3bf 8f6f 	isb	sy
 8004256:	f3bf 8f4f 	dsb	sy
 800425a:	60fb      	str	r3, [r7, #12]
 800425c:	e7fe      	b.n	800425c <prvProcessExpiredTimer+0x68>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004262:	6978      	ldr	r0, [r7, #20]
 8004264:	4798      	blx	r3
}
 8004266:	bf00      	nop
 8004268:	3718      	adds	r7, #24
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}
 800426e:	bf00      	nop
 8004270:	20000cbc 	.word	0x20000cbc

08004274 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 8004274:	b580      	push	{r7, lr}
 8004276:	b084      	sub	sp, #16
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800427c:	f107 0308 	add.w	r3, r7, #8
 8004280:	4618      	mov	r0, r3
 8004282:	f000 f857 	bl	8004334 <prvGetNextExpireTime>
 8004286:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	4619      	mov	r1, r3
 800428c:	68f8      	ldr	r0, [r7, #12]
 800428e:	f000 f803 	bl	8004298 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004292:	f000 f8d5 	bl	8004440 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004296:	e7f1      	b.n	800427c <prvTimerTask+0x8>

08004298 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b084      	sub	sp, #16
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80042a2:	f7ff fa39 	bl	8003718 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042a6:	f107 0308 	add.w	r3, r7, #8
 80042aa:	4618      	mov	r0, r3
 80042ac:	f000 f866 	bl	800437c <prvSampleTimeNow>
 80042b0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80042b2:	68bb      	ldr	r3, [r7, #8]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d130      	bne.n	800431a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <prvProcessTimerOrBlockTask+0x3c>
 80042be:	687a      	ldr	r2, [r7, #4]
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	429a      	cmp	r2, r3
 80042c4:	d806      	bhi.n	80042d4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80042c6:	f7ff fa35 	bl	8003734 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80042ca:	68f9      	ldr	r1, [r7, #12]
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff ff91 	bl	80041f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80042d2:	e024      	b.n	800431e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d008      	beq.n	80042ec <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80042da:	4b13      	ldr	r3, [pc, #76]	; (8004328 <prvProcessTimerOrBlockTask+0x90>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf0c      	ite	eq
 80042e4:	2301      	moveq	r3, #1
 80042e6:	2300      	movne	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80042ec:	4b0f      	ldr	r3, [pc, #60]	; (800432c <prvProcessTimerOrBlockTask+0x94>)
 80042ee:	6818      	ldr	r0, [r3, #0]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	683a      	ldr	r2, [r7, #0]
 80042f8:	4619      	mov	r1, r3
 80042fa:	f7fe ffad 	bl	8003258 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80042fe:	f7ff fa19 	bl	8003734 <xTaskResumeAll>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d10a      	bne.n	800431e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004308:	4b09      	ldr	r3, [pc, #36]	; (8004330 <prvProcessTimerOrBlockTask+0x98>)
 800430a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800430e:	601a      	str	r2, [r3, #0]
 8004310:	f3bf 8f4f 	dsb	sy
 8004314:	f3bf 8f6f 	isb	sy
}
 8004318:	e001      	b.n	800431e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800431a:	f7ff fa0b 	bl	8003734 <xTaskResumeAll>
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}
 8004326:	bf00      	nop
 8004328:	20000cc0 	.word	0x20000cc0
 800432c:	20000cc4 	.word	0x20000cc4
 8004330:	e000ed04 	.word	0xe000ed04

08004334 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800433c:	4b0e      	ldr	r3, [pc, #56]	; (8004378 <prvGetNextExpireTime+0x44>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	bf0c      	ite	eq
 8004346:	2301      	moveq	r3, #1
 8004348:	2300      	movne	r3, #0
 800434a:	b2db      	uxtb	r3, r3
 800434c:	461a      	mov	r2, r3
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d105      	bne.n	8004366 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800435a:	4b07      	ldr	r3, [pc, #28]	; (8004378 <prvGetNextExpireTime+0x44>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68db      	ldr	r3, [r3, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	e001      	b.n	800436a <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800436a:	68fb      	ldr	r3, [r7, #12]
}
 800436c:	4618      	mov	r0, r3
 800436e:	3714      	adds	r7, #20
 8004370:	46bd      	mov	sp, r7
 8004372:	bc80      	pop	{r7}
 8004374:	4770      	bx	lr
 8004376:	bf00      	nop
 8004378:	20000cbc 	.word	0x20000cbc

0800437c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b084      	sub	sp, #16
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004384:	f7ff fa72 	bl	800386c <xTaskGetTickCount>
 8004388:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800438a:	4b0b      	ldr	r3, [pc, #44]	; (80043b8 <prvSampleTimeNow+0x3c>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68fa      	ldr	r2, [r7, #12]
 8004390:	429a      	cmp	r2, r3
 8004392:	d205      	bcs.n	80043a0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004394:	f000 f904 	bl	80045a0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2201      	movs	r2, #1
 800439c:	601a      	str	r2, [r3, #0]
 800439e:	e002      	b.n	80043a6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2200      	movs	r2, #0
 80043a4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80043a6:	4a04      	ldr	r2, [pc, #16]	; (80043b8 <prvSampleTimeNow+0x3c>)
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80043ac:	68fb      	ldr	r3, [r7, #12]
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3710      	adds	r7, #16
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd80      	pop	{r7, pc}
 80043b6:	bf00      	nop
 80043b8:	20000ccc 	.word	0x20000ccc

080043bc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80043bc:	b580      	push	{r7, lr}
 80043be:	b086      	sub	sp, #24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
 80043c8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80043ca:	2300      	movs	r3, #0
 80043cc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	68ba      	ldr	r2, [r7, #8]
 80043d2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	68fa      	ldr	r2, [r7, #12]
 80043d8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80043da:	68ba      	ldr	r2, [r7, #8]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	429a      	cmp	r2, r3
 80043e0:	d812      	bhi.n	8004408 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	1ad2      	subs	r2, r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d302      	bcc.n	80043f6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80043f0:	2301      	movs	r3, #1
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e01b      	b.n	800442e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80043f6:	4b10      	ldr	r3, [pc, #64]	; (8004438 <prvInsertTimerInActiveList+0x7c>)
 80043f8:	681a      	ldr	r2, [r3, #0]
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3304      	adds	r3, #4
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f7fe f9cd 	bl	80027a0 <vListInsert>
 8004406:	e012      	b.n	800442e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004408:	687a      	ldr	r2, [r7, #4]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	429a      	cmp	r2, r3
 800440e:	d206      	bcs.n	800441e <prvInsertTimerInActiveList+0x62>
 8004410:	68ba      	ldr	r2, [r7, #8]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	429a      	cmp	r2, r3
 8004416:	d302      	bcc.n	800441e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004418:	2301      	movs	r3, #1
 800441a:	617b      	str	r3, [r7, #20]
 800441c:	e007      	b.n	800442e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800441e:	4b07      	ldr	r3, [pc, #28]	; (800443c <prvInsertTimerInActiveList+0x80>)
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	3304      	adds	r3, #4
 8004426:	4619      	mov	r1, r3
 8004428:	4610      	mov	r0, r2
 800442a:	f7fe f9b9 	bl	80027a0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800442e:	697b      	ldr	r3, [r7, #20]
}
 8004430:	4618      	mov	r0, r3
 8004432:	3718      	adds	r7, #24
 8004434:	46bd      	mov	sp, r7
 8004436:	bd80      	pop	{r7, pc}
 8004438:	20000cc0 	.word	0x20000cc0
 800443c:	20000cbc 	.word	0x20000cbc

08004440 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b08e      	sub	sp, #56	; 0x38
 8004444:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004446:	e099      	b.n	800457c <prvProcessReceivedCommands+0x13c>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2b00      	cmp	r3, #0
 800444c:	da17      	bge.n	800447e <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800444e:	1d3b      	adds	r3, r7, #4
 8004450:	3304      	adds	r3, #4
 8004452:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004456:	2b00      	cmp	r3, #0
 8004458:	d109      	bne.n	800446e <prvProcessReceivedCommands+0x2e>
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	61fb      	str	r3, [r7, #28]
 800446c:	e7fe      	b.n	800446c <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800446e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004474:	6850      	ldr	r0, [r2, #4]
 8004476:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004478:	6892      	ldr	r2, [r2, #8]
 800447a:	4611      	mov	r1, r2
 800447c:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2b00      	cmp	r3, #0
 8004482:	db7a      	blt.n	800457a <prvProcessReceivedCommands+0x13a>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004488:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448a:	695b      	ldr	r3, [r3, #20]
 800448c:	2b00      	cmp	r3, #0
 800448e:	d004      	beq.n	800449a <prvProcessReceivedCommands+0x5a>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004490:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004492:	3304      	adds	r3, #4
 8004494:	4618      	mov	r0, r3
 8004496:	f7fe f9bb 	bl	8002810 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800449a:	463b      	mov	r3, r7
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff ff6d 	bl	800437c <prvSampleTimeNow>
 80044a2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b09      	cmp	r3, #9
 80044a8:	d868      	bhi.n	800457c <prvProcessReceivedCommands+0x13c>
 80044aa:	a201      	add	r2, pc, #4	; (adr r2, 80044b0 <prvProcessReceivedCommands+0x70>)
 80044ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b0:	080044d9 	.word	0x080044d9
 80044b4:	080044d9 	.word	0x080044d9
 80044b8:	080044d9 	.word	0x080044d9
 80044bc:	0800457d 	.word	0x0800457d
 80044c0:	08004533 	.word	0x08004533
 80044c4:	08004569 	.word	0x08004569
 80044c8:	080044d9 	.word	0x080044d9
 80044cc:	080044d9 	.word	0x080044d9
 80044d0:	0800457d 	.word	0x0800457d
 80044d4:	08004533 	.word	0x08004533
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80044d8:	68ba      	ldr	r2, [r7, #8]
 80044da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044dc:	699b      	ldr	r3, [r3, #24]
 80044de:	18d1      	adds	r1, r2, r3
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044e6:	f7ff ff69 	bl	80043bc <prvInsertTimerInActiveList>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d045      	beq.n	800457c <prvProcessReceivedCommands+0x13c>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f6:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80044f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044fa:	69db      	ldr	r3, [r3, #28]
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d13d      	bne.n	800457c <prvProcessReceivedCommands+0x13c>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004504:	699b      	ldr	r3, [r3, #24]
 8004506:	441a      	add	r2, r3
 8004508:	2300      	movs	r3, #0
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	2300      	movs	r3, #0
 800450e:	2100      	movs	r1, #0
 8004510:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004512:	f7ff fe23 	bl	800415c <xTimerGenericCommand>
 8004516:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004518:	6a3b      	ldr	r3, [r7, #32]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d12e      	bne.n	800457c <prvProcessReceivedCommands+0x13c>
 800451e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004522:	f383 8811 	msr	BASEPRI, r3
 8004526:	f3bf 8f6f 	isb	sy
 800452a:	f3bf 8f4f 	dsb	sy
 800452e:	61bb      	str	r3, [r7, #24]
 8004530:	e7fe      	b.n	8004530 <prvProcessReceivedCommands+0xf0>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004532:	68ba      	ldr	r2, [r7, #8]
 8004534:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004536:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800453a:	699b      	ldr	r3, [r3, #24]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d109      	bne.n	8004554 <prvProcessReceivedCommands+0x114>
 8004540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004544:	f383 8811 	msr	BASEPRI, r3
 8004548:	f3bf 8f6f 	isb	sy
 800454c:	f3bf 8f4f 	dsb	sy
 8004550:	617b      	str	r3, [r7, #20]
 8004552:	e7fe      	b.n	8004552 <prvProcessReceivedCommands+0x112>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004556:	699a      	ldr	r2, [r3, #24]
 8004558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455a:	18d1      	adds	r1, r2, r3
 800455c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004560:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004562:	f7ff ff2b 	bl	80043bc <prvInsertTimerInActiveList>
					break;
 8004566:	e009      	b.n	800457c <prvProcessReceivedCommands+0x13c>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800456a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d104      	bne.n	800457c <prvProcessReceivedCommands+0x13c>
						{
							vPortFree( pxTimer );
 8004572:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004574:	f000 fb58 	bl	8004c28 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004578:	e000      	b.n	800457c <prvProcessReceivedCommands+0x13c>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800457a:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <prvProcessReceivedCommands+0x15c>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	1d39      	adds	r1, r7, #4
 8004582:	2200      	movs	r2, #0
 8004584:	4618      	mov	r0, r3
 8004586:	f7fe fc35 	bl	8002df4 <xQueueReceive>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	f47f af5b 	bne.w	8004448 <prvProcessReceivedCommands+0x8>
	}
}
 8004592:	bf00      	nop
 8004594:	3730      	adds	r7, #48	; 0x30
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000cc4 	.word	0x20000cc4

080045a0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80045a0:	b580      	push	{r7, lr}
 80045a2:	b088      	sub	sp, #32
 80045a4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80045a6:	e044      	b.n	8004632 <prvSwitchTimerLists+0x92>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045a8:	4b2b      	ldr	r3, [pc, #172]	; (8004658 <prvSwitchTimerLists+0xb8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	68db      	ldr	r3, [r3, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 80045b2:	4b29      	ldr	r3, [pc, #164]	; (8004658 <prvSwitchTimerLists+0xb8>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	68db      	ldr	r3, [r3, #12]
 80045b8:	68db      	ldr	r3, [r3, #12]
 80045ba:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	3304      	adds	r3, #4
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fe f925 	bl	8002810 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ca:	68f8      	ldr	r0, [r7, #12]
 80045cc:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	69db      	ldr	r3, [r3, #28]
 80045d2:	2b01      	cmp	r3, #1
 80045d4:	d12d      	bne.n	8004632 <prvSwitchTimerLists+0x92>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	699b      	ldr	r3, [r3, #24]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4413      	add	r3, r2
 80045de:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	693b      	ldr	r3, [r7, #16]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d90e      	bls.n	8004606 <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	68fa      	ldr	r2, [r7, #12]
 80045f2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80045f4:	4b18      	ldr	r3, [pc, #96]	; (8004658 <prvSwitchTimerLists+0xb8>)
 80045f6:	681a      	ldr	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3304      	adds	r3, #4
 80045fc:	4619      	mov	r1, r3
 80045fe:	4610      	mov	r0, r2
 8004600:	f7fe f8ce 	bl	80027a0 <vListInsert>
 8004604:	e015      	b.n	8004632 <prvSwitchTimerLists+0x92>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004606:	2300      	movs	r3, #0
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	2300      	movs	r3, #0
 800460c:	693a      	ldr	r2, [r7, #16]
 800460e:	2100      	movs	r1, #0
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f7ff fda3 	bl	800415c <xTimerGenericCommand>
 8004616:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d109      	bne.n	8004632 <prvSwitchTimerLists+0x92>
 800461e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004622:	f383 8811 	msr	BASEPRI, r3
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	f3bf 8f4f 	dsb	sy
 800462e:	603b      	str	r3, [r7, #0]
 8004630:	e7fe      	b.n	8004630 <prvSwitchTimerLists+0x90>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004632:	4b09      	ldr	r3, [pc, #36]	; (8004658 <prvSwitchTimerLists+0xb8>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d1b5      	bne.n	80045a8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800463c:	4b06      	ldr	r3, [pc, #24]	; (8004658 <prvSwitchTimerLists+0xb8>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <prvSwitchTimerLists+0xbc>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	4a04      	ldr	r2, [pc, #16]	; (8004658 <prvSwitchTimerLists+0xb8>)
 8004648:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800464a:	4a04      	ldr	r2, [pc, #16]	; (800465c <prvSwitchTimerLists+0xbc>)
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	6013      	str	r3, [r2, #0]
}
 8004650:	bf00      	nop
 8004652:	3718      	adds	r7, #24
 8004654:	46bd      	mov	sp, r7
 8004656:	bd80      	pop	{r7, pc}
 8004658:	20000cbc 	.word	0x20000cbc
 800465c:	20000cc0 	.word	0x20000cc0

08004660 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004660:	b580      	push	{r7, lr}
 8004662:	b082      	sub	sp, #8
 8004664:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004666:	f000 f927 	bl	80048b8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800466a:	4b15      	ldr	r3, [pc, #84]	; (80046c0 <prvCheckForValidListAndQueue+0x60>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d120      	bne.n	80046b4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004672:	4814      	ldr	r0, [pc, #80]	; (80046c4 <prvCheckForValidListAndQueue+0x64>)
 8004674:	f7fe f846 	bl	8002704 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004678:	4813      	ldr	r0, [pc, #76]	; (80046c8 <prvCheckForValidListAndQueue+0x68>)
 800467a:	f7fe f843 	bl	8002704 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800467e:	4b13      	ldr	r3, [pc, #76]	; (80046cc <prvCheckForValidListAndQueue+0x6c>)
 8004680:	4a10      	ldr	r2, [pc, #64]	; (80046c4 <prvCheckForValidListAndQueue+0x64>)
 8004682:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004684:	4b12      	ldr	r3, [pc, #72]	; (80046d0 <prvCheckForValidListAndQueue+0x70>)
 8004686:	4a10      	ldr	r2, [pc, #64]	; (80046c8 <prvCheckForValidListAndQueue+0x68>)
 8004688:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800468a:	2300      	movs	r3, #0
 800468c:	9300      	str	r3, [sp, #0]
 800468e:	4b11      	ldr	r3, [pc, #68]	; (80046d4 <prvCheckForValidListAndQueue+0x74>)
 8004690:	4a11      	ldr	r2, [pc, #68]	; (80046d8 <prvCheckForValidListAndQueue+0x78>)
 8004692:	2110      	movs	r1, #16
 8004694:	200a      	movs	r0, #10
 8004696:	f7fe f94d 	bl	8002934 <xQueueGenericCreateStatic>
 800469a:	4602      	mov	r2, r0
 800469c:	4b08      	ldr	r3, [pc, #32]	; (80046c0 <prvCheckForValidListAndQueue+0x60>)
 800469e:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80046a0:	4b07      	ldr	r3, [pc, #28]	; (80046c0 <prvCheckForValidListAndQueue+0x60>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d005      	beq.n	80046b4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80046a8:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <prvCheckForValidListAndQueue+0x60>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	490b      	ldr	r1, [pc, #44]	; (80046dc <prvCheckForValidListAndQueue+0x7c>)
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7fe fdaa 	bl	8003208 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80046b4:	f000 f92e 	bl	8004914 <vPortExitCritical>
}
 80046b8:	bf00      	nop
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000cc4 	.word	0x20000cc4
 80046c4:	20000c94 	.word	0x20000c94
 80046c8:	20000ca8 	.word	0x20000ca8
 80046cc:	20000cbc 	.word	0x20000cbc
 80046d0:	20000cc0 	.word	0x20000cc0
 80046d4:	20000d70 	.word	0x20000d70
 80046d8:	20000cd0 	.word	0x20000cd0
 80046dc:	08005a60 	.word	0x08005a60

080046e0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60f8      	str	r0, [r7, #12]
 80046e8:	60b9      	str	r1, [r7, #8]
 80046ea:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	3b04      	subs	r3, #4
 80046f0:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80046f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	3b04      	subs	r3, #4
 80046fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	f023 0201 	bic.w	r2, r3, #1
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	3b04      	subs	r3, #4
 800470e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004710:	4a08      	ldr	r2, [pc, #32]	; (8004734 <pxPortInitialiseStack+0x54>)
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	3b14      	subs	r3, #20
 800471a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	3b20      	subs	r3, #32
 8004726:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004728:	68fb      	ldr	r3, [r7, #12]
}
 800472a:	4618      	mov	r0, r3
 800472c:	3714      	adds	r7, #20
 800472e:	46bd      	mov	sp, r7
 8004730:	bc80      	pop	{r7}
 8004732:	4770      	bx	lr
 8004734:	08004739 	.word	0x08004739

08004738 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800473e:	2300      	movs	r3, #0
 8004740:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004742:	4b10      	ldr	r3, [pc, #64]	; (8004784 <prvTaskExitError+0x4c>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800474a:	d009      	beq.n	8004760 <prvTaskExitError+0x28>
 800474c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004750:	f383 8811 	msr	BASEPRI, r3
 8004754:	f3bf 8f6f 	isb	sy
 8004758:	f3bf 8f4f 	dsb	sy
 800475c:	60fb      	str	r3, [r7, #12]
 800475e:	e7fe      	b.n	800475e <prvTaskExitError+0x26>
 8004760:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004764:	f383 8811 	msr	BASEPRI, r3
 8004768:	f3bf 8f6f 	isb	sy
 800476c:	f3bf 8f4f 	dsb	sy
 8004770:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004772:	bf00      	nop
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d0fc      	beq.n	8004774 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800477a:	bf00      	nop
 800477c:	3714      	adds	r7, #20
 800477e:	46bd      	mov	sp, r7
 8004780:	bc80      	pop	{r7}
 8004782:	4770      	bx	lr
 8004784:	20000044 	.word	0x20000044
	...

08004790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004790:	4b07      	ldr	r3, [pc, #28]	; (80047b0 <pxCurrentTCBConst2>)
 8004792:	6819      	ldr	r1, [r3, #0]
 8004794:	6808      	ldr	r0, [r1, #0]
 8004796:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800479a:	f380 8809 	msr	PSP, r0
 800479e:	f3bf 8f6f 	isb	sy
 80047a2:	f04f 0000 	mov.w	r0, #0
 80047a6:	f380 8811 	msr	BASEPRI, r0
 80047aa:	f04e 0e0d 	orr.w	lr, lr, #13
 80047ae:	4770      	bx	lr

080047b0 <pxCurrentTCBConst2>:
 80047b0:	20000794 	.word	0x20000794
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80047b4:	bf00      	nop
 80047b6:	bf00      	nop

080047b8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80047b8:	4806      	ldr	r0, [pc, #24]	; (80047d4 <prvPortStartFirstTask+0x1c>)
 80047ba:	6800      	ldr	r0, [r0, #0]
 80047bc:	6800      	ldr	r0, [r0, #0]
 80047be:	f380 8808 	msr	MSP, r0
 80047c2:	b662      	cpsie	i
 80047c4:	b661      	cpsie	f
 80047c6:	f3bf 8f4f 	dsb	sy
 80047ca:	f3bf 8f6f 	isb	sy
 80047ce:	df00      	svc	0
 80047d0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80047d2:	bf00      	nop
 80047d4:	e000ed08 	.word	0xe000ed08

080047d8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80047d8:	b580      	push	{r7, lr}
 80047da:	b084      	sub	sp, #16
 80047dc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80047de:	4b31      	ldr	r3, [pc, #196]	; (80048a4 <xPortStartScheduler+0xcc>)
 80047e0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	b2db      	uxtb	r3, r3
 80047e8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	22ff      	movs	r2, #255	; 0xff
 80047ee:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	781b      	ldrb	r3, [r3, #0]
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80047f8:	78fb      	ldrb	r3, [r7, #3]
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004800:	b2da      	uxtb	r2, r3
 8004802:	4b29      	ldr	r3, [pc, #164]	; (80048a8 <xPortStartScheduler+0xd0>)
 8004804:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004806:	4b29      	ldr	r3, [pc, #164]	; (80048ac <xPortStartScheduler+0xd4>)
 8004808:	2207      	movs	r2, #7
 800480a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800480c:	e009      	b.n	8004822 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800480e:	4b27      	ldr	r3, [pc, #156]	; (80048ac <xPortStartScheduler+0xd4>)
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	3b01      	subs	r3, #1
 8004814:	4a25      	ldr	r2, [pc, #148]	; (80048ac <xPortStartScheduler+0xd4>)
 8004816:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004818:	78fb      	ldrb	r3, [r7, #3]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	005b      	lsls	r3, r3, #1
 800481e:	b2db      	uxtb	r3, r3
 8004820:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004822:	78fb      	ldrb	r3, [r7, #3]
 8004824:	b2db      	uxtb	r3, r3
 8004826:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800482a:	2b80      	cmp	r3, #128	; 0x80
 800482c:	d0ef      	beq.n	800480e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800482e:	4b1f      	ldr	r3, [pc, #124]	; (80048ac <xPortStartScheduler+0xd4>)
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	f1c3 0307 	rsb	r3, r3, #7
 8004836:	2b04      	cmp	r3, #4
 8004838:	d009      	beq.n	800484e <xPortStartScheduler+0x76>
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	60bb      	str	r3, [r7, #8]
 800484c:	e7fe      	b.n	800484c <xPortStartScheduler+0x74>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800484e:	4b17      	ldr	r3, [pc, #92]	; (80048ac <xPortStartScheduler+0xd4>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	021b      	lsls	r3, r3, #8
 8004854:	4a15      	ldr	r2, [pc, #84]	; (80048ac <xPortStartScheduler+0xd4>)
 8004856:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004858:	4b14      	ldr	r3, [pc, #80]	; (80048ac <xPortStartScheduler+0xd4>)
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004860:	4a12      	ldr	r2, [pc, #72]	; (80048ac <xPortStartScheduler+0xd4>)
 8004862:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	b2da      	uxtb	r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800486c:	4b10      	ldr	r3, [pc, #64]	; (80048b0 <xPortStartScheduler+0xd8>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a0f      	ldr	r2, [pc, #60]	; (80048b0 <xPortStartScheduler+0xd8>)
 8004872:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004876:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004878:	4b0d      	ldr	r3, [pc, #52]	; (80048b0 <xPortStartScheduler+0xd8>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4a0c      	ldr	r2, [pc, #48]	; (80048b0 <xPortStartScheduler+0xd8>)
 800487e:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004882:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004884:	f000 f8b0 	bl	80049e8 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <xPortStartScheduler+0xdc>)
 800488a:	2200      	movs	r2, #0
 800488c:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800488e:	f7ff ff93 	bl	80047b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004892:	f7ff f8d9 	bl	8003a48 <vTaskSwitchContext>
	prvTaskExitError();
 8004896:	f7ff ff4f 	bl	8004738 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800489a:	2300      	movs	r3, #0
}
 800489c:	4618      	mov	r0, r3
 800489e:	3710      	adds	r7, #16
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	e000e400 	.word	0xe000e400
 80048a8:	20000dc0 	.word	0x20000dc0
 80048ac:	20000dc4 	.word	0x20000dc4
 80048b0:	e000ed20 	.word	0xe000ed20
 80048b4:	20000044 	.word	0x20000044

080048b8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80048b8:	b480      	push	{r7}
 80048ba:	b083      	sub	sp, #12
 80048bc:	af00      	add	r7, sp, #0
 80048be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c2:	f383 8811 	msr	BASEPRI, r3
 80048c6:	f3bf 8f6f 	isb	sy
 80048ca:	f3bf 8f4f 	dsb	sy
 80048ce:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80048d0:	4b0e      	ldr	r3, [pc, #56]	; (800490c <vPortEnterCritical+0x54>)
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	3301      	adds	r3, #1
 80048d6:	4a0d      	ldr	r2, [pc, #52]	; (800490c <vPortEnterCritical+0x54>)
 80048d8:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80048da:	4b0c      	ldr	r3, [pc, #48]	; (800490c <vPortEnterCritical+0x54>)
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	2b01      	cmp	r3, #1
 80048e0:	d10e      	bne.n	8004900 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80048e2:	4b0b      	ldr	r3, [pc, #44]	; (8004910 <vPortEnterCritical+0x58>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	b2db      	uxtb	r3, r3
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d009      	beq.n	8004900 <vPortEnterCritical+0x48>
 80048ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048f0:	f383 8811 	msr	BASEPRI, r3
 80048f4:	f3bf 8f6f 	isb	sy
 80048f8:	f3bf 8f4f 	dsb	sy
 80048fc:	603b      	str	r3, [r7, #0]
 80048fe:	e7fe      	b.n	80048fe <vPortEnterCritical+0x46>
	}
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000044 	.word	0x20000044
 8004910:	e000ed04 	.word	0xe000ed04

08004914 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800491a:	4b10      	ldr	r3, [pc, #64]	; (800495c <vPortExitCritical+0x48>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d109      	bne.n	8004936 <vPortExitCritical+0x22>
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	607b      	str	r3, [r7, #4]
 8004934:	e7fe      	b.n	8004934 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 8004936:	4b09      	ldr	r3, [pc, #36]	; (800495c <vPortExitCritical+0x48>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	3b01      	subs	r3, #1
 800493c:	4a07      	ldr	r2, [pc, #28]	; (800495c <vPortExitCritical+0x48>)
 800493e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004940:	4b06      	ldr	r3, [pc, #24]	; (800495c <vPortExitCritical+0x48>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d104      	bne.n	8004952 <vPortExitCritical+0x3e>
 8004948:	2300      	movs	r3, #0
 800494a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8004952:	bf00      	nop
 8004954:	370c      	adds	r7, #12
 8004956:	46bd      	mov	sp, r7
 8004958:	bc80      	pop	{r7}
 800495a:	4770      	bx	lr
 800495c:	20000044 	.word	0x20000044

08004960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004960:	f3ef 8009 	mrs	r0, PSP
 8004964:	f3bf 8f6f 	isb	sy
 8004968:	4b0d      	ldr	r3, [pc, #52]	; (80049a0 <pxCurrentTCBConst>)
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004970:	6010      	str	r0, [r2, #0]
 8004972:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004976:	f04f 0050 	mov.w	r0, #80	; 0x50
 800497a:	f380 8811 	msr	BASEPRI, r0
 800497e:	f7ff f863 	bl	8003a48 <vTaskSwitchContext>
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f380 8811 	msr	BASEPRI, r0
 800498a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800498e:	6819      	ldr	r1, [r3, #0]
 8004990:	6808      	ldr	r0, [r1, #0]
 8004992:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004996:	f380 8809 	msr	PSP, r0
 800499a:	f3bf 8f6f 	isb	sy
 800499e:	4770      	bx	lr

080049a0 <pxCurrentTCBConst>:
 80049a0:	20000794 	.word	0x20000794
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80049a4:	bf00      	nop
 80049a6:	bf00      	nop

080049a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
	__asm volatile
 80049ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b2:	f383 8811 	msr	BASEPRI, r3
 80049b6:	f3bf 8f6f 	isb	sy
 80049ba:	f3bf 8f4f 	dsb	sy
 80049be:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80049c0:	f7fe ff84 	bl	80038cc <xTaskIncrementTick>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d003      	beq.n	80049d2 <xPortSysTickHandler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80049ca:	4b06      	ldr	r3, [pc, #24]	; (80049e4 <xPortSysTickHandler+0x3c>)
 80049cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	2300      	movs	r3, #0
 80049d4:	603b      	str	r3, [r7, #0]
	__asm volatile
 80049d6:	683b      	ldr	r3, [r7, #0]
 80049d8:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 80049dc:	bf00      	nop
 80049de:	3708      	adds	r7, #8
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	e000ed04 	.word	0xe000ed04

080049e8 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80049e8:	b480      	push	{r7}
 80049ea:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80049ec:	4b0a      	ldr	r3, [pc, #40]	; (8004a18 <vPortSetupTimerInterrupt+0x30>)
 80049ee:	2200      	movs	r2, #0
 80049f0:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80049f2:	4b0a      	ldr	r3, [pc, #40]	; (8004a1c <vPortSetupTimerInterrupt+0x34>)
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <vPortSetupTimerInterrupt+0x38>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	4a09      	ldr	r2, [pc, #36]	; (8004a24 <vPortSetupTimerInterrupt+0x3c>)
 80049fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004a02:	099b      	lsrs	r3, r3, #6
 8004a04:	4a08      	ldr	r2, [pc, #32]	; (8004a28 <vPortSetupTimerInterrupt+0x40>)
 8004a06:	3b01      	subs	r3, #1
 8004a08:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a0a:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <vPortSetupTimerInterrupt+0x30>)
 8004a0c:	2207      	movs	r2, #7
 8004a0e:	601a      	str	r2, [r3, #0]
}
 8004a10:	bf00      	nop
 8004a12:	46bd      	mov	sp, r7
 8004a14:	bc80      	pop	{r7}
 8004a16:	4770      	bx	lr
 8004a18:	e000e010 	.word	0xe000e010
 8004a1c:	e000e018 	.word	0xe000e018
 8004a20:	20000038 	.word	0x20000038
 8004a24:	10624dd3 	.word	0x10624dd3
 8004a28:	e000e014 	.word	0xe000e014

08004a2c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004a2c:	b480      	push	{r7}
 8004a2e:	b085      	sub	sp, #20
 8004a30:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004a32:	f3ef 8305 	mrs	r3, IPSR
 8004a36:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2b0f      	cmp	r3, #15
 8004a3c:	d913      	bls.n	8004a66 <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004a3e:	4a15      	ldr	r2, [pc, #84]	; (8004a94 <vPortValidateInterruptPriority+0x68>)
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	4413      	add	r3, r2
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004a48:	4b13      	ldr	r3, [pc, #76]	; (8004a98 <vPortValidateInterruptPriority+0x6c>)
 8004a4a:	781b      	ldrb	r3, [r3, #0]
 8004a4c:	7afa      	ldrb	r2, [r7, #11]
 8004a4e:	429a      	cmp	r2, r3
 8004a50:	d209      	bcs.n	8004a66 <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 8004a52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a56:	f383 8811 	msr	BASEPRI, r3
 8004a5a:	f3bf 8f6f 	isb	sy
 8004a5e:	f3bf 8f4f 	dsb	sy
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	e7fe      	b.n	8004a64 <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a66:	4b0d      	ldr	r3, [pc, #52]	; (8004a9c <vPortValidateInterruptPriority+0x70>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a6e:	4b0c      	ldr	r3, [pc, #48]	; (8004aa0 <vPortValidateInterruptPriority+0x74>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	429a      	cmp	r2, r3
 8004a74:	d909      	bls.n	8004a8a <vPortValidateInterruptPriority+0x5e>
 8004a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a7a:	f383 8811 	msr	BASEPRI, r3
 8004a7e:	f3bf 8f6f 	isb	sy
 8004a82:	f3bf 8f4f 	dsb	sy
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	e7fe      	b.n	8004a88 <vPortValidateInterruptPriority+0x5c>
	}
 8004a8a:	bf00      	nop
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bc80      	pop	{r7}
 8004a92:	4770      	bx	lr
 8004a94:	e000e3f0 	.word	0xe000e3f0
 8004a98:	20000dc0 	.word	0x20000dc0
 8004a9c:	e000ed0c 	.word	0xe000ed0c
 8004aa0:	20000dc4 	.word	0x20000dc4

08004aa4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b08a      	sub	sp, #40	; 0x28
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004aac:	2300      	movs	r3, #0
 8004aae:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004ab0:	f7fe fe32 	bl	8003718 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004ab4:	4b57      	ldr	r3, [pc, #348]	; (8004c14 <pvPortMalloc+0x170>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d101      	bne.n	8004ac0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004abc:	f000 f90c 	bl	8004cd8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004ac0:	4b55      	ldr	r3, [pc, #340]	; (8004c18 <pvPortMalloc+0x174>)
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	f040 808c 	bne.w	8004be6 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d01c      	beq.n	8004b0e <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8004ad4:	2208      	movs	r2, #8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4413      	add	r3, r2
 8004ada:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f003 0307 	and.w	r3, r3, #7
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d013      	beq.n	8004b0e <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f023 0307 	bic.w	r3, r3, #7
 8004aec:	3308      	adds	r3, #8
 8004aee:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f003 0307 	and.w	r3, r3, #7
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <pvPortMalloc+0x6a>
 8004afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004afe:	f383 8811 	msr	BASEPRI, r3
 8004b02:	f3bf 8f6f 	isb	sy
 8004b06:	f3bf 8f4f 	dsb	sy
 8004b0a:	617b      	str	r3, [r7, #20]
 8004b0c:	e7fe      	b.n	8004b0c <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d068      	beq.n	8004be6 <pvPortMalloc+0x142>
 8004b14:	4b41      	ldr	r3, [pc, #260]	; (8004c1c <pvPortMalloc+0x178>)
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	429a      	cmp	r2, r3
 8004b1c:	d863      	bhi.n	8004be6 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004b1e:	4b40      	ldr	r3, [pc, #256]	; (8004c20 <pvPortMalloc+0x17c>)
 8004b20:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004b22:	4b3f      	ldr	r3, [pc, #252]	; (8004c20 <pvPortMalloc+0x17c>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b28:	e004      	b.n	8004b34 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b36:	685b      	ldr	r3, [r3, #4]
 8004b38:	687a      	ldr	r2, [r7, #4]
 8004b3a:	429a      	cmp	r2, r3
 8004b3c:	d903      	bls.n	8004b46 <pvPortMalloc+0xa2>
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d1f1      	bne.n	8004b2a <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004b46:	4b33      	ldr	r3, [pc, #204]	; (8004c14 <pvPortMalloc+0x170>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d04a      	beq.n	8004be6 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004b50:	6a3b      	ldr	r3, [r7, #32]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	2208      	movs	r2, #8
 8004b56:	4413      	add	r3, r2
 8004b58:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5c:	681a      	ldr	r2, [r3, #0]
 8004b5e:	6a3b      	ldr	r3, [r7, #32]
 8004b60:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b64:	685a      	ldr	r2, [r3, #4]
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	1ad2      	subs	r2, r2, r3
 8004b6a:	2308      	movs	r3, #8
 8004b6c:	005b      	lsls	r3, r3, #1
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d91e      	bls.n	8004bb0 <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	4413      	add	r3, r2
 8004b78:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	f003 0307 	and.w	r3, r3, #7
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d009      	beq.n	8004b98 <pvPortMalloc+0xf4>
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	613b      	str	r3, [r7, #16]
 8004b96:	e7fe      	b.n	8004b96 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b9a:	685a      	ldr	r2, [r3, #4]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	1ad2      	subs	r2, r2, r3
 8004ba0:	69bb      	ldr	r3, [r7, #24]
 8004ba2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004baa:	69b8      	ldr	r0, [r7, #24]
 8004bac:	f000 f8f6 	bl	8004d9c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bb0:	4b1a      	ldr	r3, [pc, #104]	; (8004c1c <pvPortMalloc+0x178>)
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	4a18      	ldr	r2, [pc, #96]	; (8004c1c <pvPortMalloc+0x178>)
 8004bbc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bbe:	4b17      	ldr	r3, [pc, #92]	; (8004c1c <pvPortMalloc+0x178>)
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4b18      	ldr	r3, [pc, #96]	; (8004c24 <pvPortMalloc+0x180>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	429a      	cmp	r2, r3
 8004bc8:	d203      	bcs.n	8004bd2 <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bca:	4b14      	ldr	r3, [pc, #80]	; (8004c1c <pvPortMalloc+0x178>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	4a15      	ldr	r2, [pc, #84]	; (8004c24 <pvPortMalloc+0x180>)
 8004bd0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	4b10      	ldr	r3, [pc, #64]	; (8004c18 <pvPortMalloc+0x174>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	431a      	orrs	r2, r3
 8004bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bde:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	2200      	movs	r2, #0
 8004be4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004be6:	f7fe fda5 	bl	8003734 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004bea:	69fb      	ldr	r3, [r7, #28]
 8004bec:	f003 0307 	and.w	r3, r3, #7
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d009      	beq.n	8004c08 <pvPortMalloc+0x164>
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	60fb      	str	r3, [r7, #12]
 8004c06:	e7fe      	b.n	8004c06 <pvPortMalloc+0x162>
	return pvReturn;
 8004c08:	69fb      	ldr	r3, [r7, #28]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3728      	adds	r7, #40	; 0x28
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	20002dd0 	.word	0x20002dd0
 8004c18:	20002ddc 	.word	0x20002ddc
 8004c1c:	20002dd4 	.word	0x20002dd4
 8004c20:	20002dc8 	.word	0x20002dc8
 8004c24:	20002dd8 	.word	0x20002dd8

08004c28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d046      	beq.n	8004cc8 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004c3a:	2308      	movs	r3, #8
 8004c3c:	425b      	negs	r3, r3
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	4413      	add	r3, r2
 8004c42:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	4b20      	ldr	r3, [pc, #128]	; (8004cd0 <vPortFree+0xa8>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	4013      	ands	r3, r2
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d109      	bne.n	8004c6a <vPortFree+0x42>
 8004c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c5a:	f383 8811 	msr	BASEPRI, r3
 8004c5e:	f3bf 8f6f 	isb	sy
 8004c62:	f3bf 8f4f 	dsb	sy
 8004c66:	60fb      	str	r3, [r7, #12]
 8004c68:	e7fe      	b.n	8004c68 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d009      	beq.n	8004c86 <vPortFree+0x5e>
 8004c72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c76:	f383 8811 	msr	BASEPRI, r3
 8004c7a:	f3bf 8f6f 	isb	sy
 8004c7e:	f3bf 8f4f 	dsb	sy
 8004c82:	60bb      	str	r3, [r7, #8]
 8004c84:	e7fe      	b.n	8004c84 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	685a      	ldr	r2, [r3, #4]
 8004c8a:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <vPortFree+0xa8>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4013      	ands	r3, r2
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d019      	beq.n	8004cc8 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c94:	693b      	ldr	r3, [r7, #16]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d115      	bne.n	8004cc8 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	685a      	ldr	r2, [r3, #4]
 8004ca0:	4b0b      	ldr	r3, [pc, #44]	; (8004cd0 <vPortFree+0xa8>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	43db      	mvns	r3, r3
 8004ca6:	401a      	ands	r2, r3
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004cac:	f7fe fd34 	bl	8003718 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004cb0:	693b      	ldr	r3, [r7, #16]
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	4b07      	ldr	r3, [pc, #28]	; (8004cd4 <vPortFree+0xac>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4413      	add	r3, r2
 8004cba:	4a06      	ldr	r2, [pc, #24]	; (8004cd4 <vPortFree+0xac>)
 8004cbc:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004cbe:	6938      	ldr	r0, [r7, #16]
 8004cc0:	f000 f86c 	bl	8004d9c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8004cc4:	f7fe fd36 	bl	8003734 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004cc8:	bf00      	nop
 8004cca:	3718      	adds	r7, #24
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	bd80      	pop	{r7, pc}
 8004cd0:	20002ddc 	.word	0x20002ddc
 8004cd4:	20002dd4 	.word	0x20002dd4

08004cd8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004cde:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004ce2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004ce4:	4b27      	ldr	r3, [pc, #156]	; (8004d84 <prvHeapInit+0xac>)
 8004ce6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f003 0307 	and.w	r3, r3, #7
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d00c      	beq.n	8004d0c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	3307      	adds	r3, #7
 8004cf6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004d00:	68ba      	ldr	r2, [r7, #8]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	1ad3      	subs	r3, r2, r3
 8004d06:	4a1f      	ldr	r2, [pc, #124]	; (8004d84 <prvHeapInit+0xac>)
 8004d08:	4413      	add	r3, r2
 8004d0a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004d10:	4a1d      	ldr	r2, [pc, #116]	; (8004d88 <prvHeapInit+0xb0>)
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004d16:	4b1c      	ldr	r3, [pc, #112]	; (8004d88 <prvHeapInit+0xb0>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	68ba      	ldr	r2, [r7, #8]
 8004d20:	4413      	add	r3, r2
 8004d22:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004d24:	2208      	movs	r2, #8
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	1a9b      	subs	r3, r3, r2
 8004d2a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	f023 0307 	bic.w	r3, r3, #7
 8004d32:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	4a15      	ldr	r2, [pc, #84]	; (8004d8c <prvHeapInit+0xb4>)
 8004d38:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d3a:	4b14      	ldr	r3, [pc, #80]	; (8004d8c <prvHeapInit+0xb4>)
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d42:	4b12      	ldr	r3, [pc, #72]	; (8004d8c <prvHeapInit+0xb4>)
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d4e:	683b      	ldr	r3, [r7, #0]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	1ad2      	subs	r2, r2, r3
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d58:	4b0c      	ldr	r3, [pc, #48]	; (8004d8c <prvHeapInit+0xb4>)
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	4a0a      	ldr	r2, [pc, #40]	; (8004d90 <prvHeapInit+0xb8>)
 8004d66:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d68:	683b      	ldr	r3, [r7, #0]
 8004d6a:	685b      	ldr	r3, [r3, #4]
 8004d6c:	4a09      	ldr	r2, [pc, #36]	; (8004d94 <prvHeapInit+0xbc>)
 8004d6e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <prvHeapInit+0xc0>)
 8004d72:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d76:	601a      	str	r2, [r3, #0]
}
 8004d78:	bf00      	nop
 8004d7a:	3714      	adds	r7, #20
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bc80      	pop	{r7}
 8004d80:	4770      	bx	lr
 8004d82:	bf00      	nop
 8004d84:	20000dc8 	.word	0x20000dc8
 8004d88:	20002dc8 	.word	0x20002dc8
 8004d8c:	20002dd0 	.word	0x20002dd0
 8004d90:	20002dd8 	.word	0x20002dd8
 8004d94:	20002dd4 	.word	0x20002dd4
 8004d98:	20002ddc 	.word	0x20002ddc

08004d9c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004da4:	4b27      	ldr	r3, [pc, #156]	; (8004e44 <prvInsertBlockIntoFreeList+0xa8>)
 8004da6:	60fb      	str	r3, [r7, #12]
 8004da8:	e002      	b.n	8004db0 <prvInsertBlockIntoFreeList+0x14>
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	60fb      	str	r3, [r7, #12]
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	687a      	ldr	r2, [r7, #4]
 8004db6:	429a      	cmp	r2, r3
 8004db8:	d8f7      	bhi.n	8004daa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	68ba      	ldr	r2, [r7, #8]
 8004dc4:	4413      	add	r3, r2
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	429a      	cmp	r2, r3
 8004dca:	d108      	bne.n	8004dde <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	685a      	ldr	r2, [r3, #4]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	441a      	add	r2, r3
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	68ba      	ldr	r2, [r7, #8]
 8004de8:	441a      	add	r2, r3
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	429a      	cmp	r2, r3
 8004df0:	d118      	bne.n	8004e24 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	4b14      	ldr	r3, [pc, #80]	; (8004e48 <prvInsertBlockIntoFreeList+0xac>)
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	429a      	cmp	r2, r3
 8004dfc:	d00d      	beq.n	8004e1a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	685a      	ldr	r2, [r3, #4]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	685b      	ldr	r3, [r3, #4]
 8004e08:	441a      	add	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	601a      	str	r2, [r3, #0]
 8004e18:	e008      	b.n	8004e2c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004e1a:	4b0b      	ldr	r3, [pc, #44]	; (8004e48 <prvInsertBlockIntoFreeList+0xac>)
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	601a      	str	r2, [r3, #0]
 8004e22:	e003      	b.n	8004e2c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681a      	ldr	r2, [r3, #0]
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004e2c:	68fa      	ldr	r2, [r7, #12]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	429a      	cmp	r2, r3
 8004e32:	d002      	beq.n	8004e3a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e3a:	bf00      	nop
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bc80      	pop	{r7}
 8004e42:	4770      	bx	lr
 8004e44:	20002dc8 	.word	0x20002dc8
 8004e48:	20002dd0 	.word	0x20002dd0

08004e4c <__errno>:
 8004e4c:	4b01      	ldr	r3, [pc, #4]	; (8004e54 <__errno+0x8>)
 8004e4e:	6818      	ldr	r0, [r3, #0]
 8004e50:	4770      	bx	lr
 8004e52:	bf00      	nop
 8004e54:	20000048 	.word	0x20000048

08004e58 <__libc_init_array>:
 8004e58:	b570      	push	{r4, r5, r6, lr}
 8004e5a:	2500      	movs	r5, #0
 8004e5c:	4e0c      	ldr	r6, [pc, #48]	; (8004e90 <__libc_init_array+0x38>)
 8004e5e:	4c0d      	ldr	r4, [pc, #52]	; (8004e94 <__libc_init_array+0x3c>)
 8004e60:	1ba4      	subs	r4, r4, r6
 8004e62:	10a4      	asrs	r4, r4, #2
 8004e64:	42a5      	cmp	r5, r4
 8004e66:	d109      	bne.n	8004e7c <__libc_init_array+0x24>
 8004e68:	f000 fcca 	bl	8005800 <_init>
 8004e6c:	2500      	movs	r5, #0
 8004e6e:	4e0a      	ldr	r6, [pc, #40]	; (8004e98 <__libc_init_array+0x40>)
 8004e70:	4c0a      	ldr	r4, [pc, #40]	; (8004e9c <__libc_init_array+0x44>)
 8004e72:	1ba4      	subs	r4, r4, r6
 8004e74:	10a4      	asrs	r4, r4, #2
 8004e76:	42a5      	cmp	r5, r4
 8004e78:	d105      	bne.n	8004e86 <__libc_init_array+0x2e>
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e80:	4798      	blx	r3
 8004e82:	3501      	adds	r5, #1
 8004e84:	e7ee      	b.n	8004e64 <__libc_init_array+0xc>
 8004e86:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004e8a:	4798      	blx	r3
 8004e8c:	3501      	adds	r5, #1
 8004e8e:	e7f2      	b.n	8004e76 <__libc_init_array+0x1e>
 8004e90:	08005b78 	.word	0x08005b78
 8004e94:	08005b78 	.word	0x08005b78
 8004e98:	08005b78 	.word	0x08005b78
 8004e9c:	08005b7c 	.word	0x08005b7c

08004ea0 <__itoa>:
 8004ea0:	1e93      	subs	r3, r2, #2
 8004ea2:	2b22      	cmp	r3, #34	; 0x22
 8004ea4:	b510      	push	{r4, lr}
 8004ea6:	460c      	mov	r4, r1
 8004ea8:	d904      	bls.n	8004eb4 <__itoa+0x14>
 8004eaa:	2300      	movs	r3, #0
 8004eac:	461c      	mov	r4, r3
 8004eae:	700b      	strb	r3, [r1, #0]
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	bd10      	pop	{r4, pc}
 8004eb4:	2a0a      	cmp	r2, #10
 8004eb6:	d109      	bne.n	8004ecc <__itoa+0x2c>
 8004eb8:	2800      	cmp	r0, #0
 8004eba:	da07      	bge.n	8004ecc <__itoa+0x2c>
 8004ebc:	232d      	movs	r3, #45	; 0x2d
 8004ebe:	700b      	strb	r3, [r1, #0]
 8004ec0:	2101      	movs	r1, #1
 8004ec2:	4240      	negs	r0, r0
 8004ec4:	4421      	add	r1, r4
 8004ec6:	f000 f86d 	bl	8004fa4 <__utoa>
 8004eca:	e7f1      	b.n	8004eb0 <__itoa+0x10>
 8004ecc:	2100      	movs	r1, #0
 8004ece:	e7f9      	b.n	8004ec4 <__itoa+0x24>

08004ed0 <itoa>:
 8004ed0:	f7ff bfe6 	b.w	8004ea0 <__itoa>

08004ed4 <memcpy>:
 8004ed4:	b510      	push	{r4, lr}
 8004ed6:	1e43      	subs	r3, r0, #1
 8004ed8:	440a      	add	r2, r1
 8004eda:	4291      	cmp	r1, r2
 8004edc:	d100      	bne.n	8004ee0 <memcpy+0xc>
 8004ede:	bd10      	pop	{r4, pc}
 8004ee0:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ee4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ee8:	e7f7      	b.n	8004eda <memcpy+0x6>

08004eea <memset>:
 8004eea:	4603      	mov	r3, r0
 8004eec:	4402      	add	r2, r0
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d100      	bne.n	8004ef4 <memset+0xa>
 8004ef2:	4770      	bx	lr
 8004ef4:	f803 1b01 	strb.w	r1, [r3], #1
 8004ef8:	e7f9      	b.n	8004eee <memset+0x4>
	...

08004efc <rand>:
 8004efc:	b538      	push	{r3, r4, r5, lr}
 8004efe:	4b13      	ldr	r3, [pc, #76]	; (8004f4c <rand+0x50>)
 8004f00:	681c      	ldr	r4, [r3, #0]
 8004f02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004f04:	b97b      	cbnz	r3, 8004f26 <rand+0x2a>
 8004f06:	2018      	movs	r0, #24
 8004f08:	f000 f88a 	bl	8005020 <malloc>
 8004f0c:	4a10      	ldr	r2, [pc, #64]	; (8004f50 <rand+0x54>)
 8004f0e:	4b11      	ldr	r3, [pc, #68]	; (8004f54 <rand+0x58>)
 8004f10:	63a0      	str	r0, [r4, #56]	; 0x38
 8004f12:	e9c0 2300 	strd	r2, r3, [r0]
 8004f16:	4b10      	ldr	r3, [pc, #64]	; (8004f58 <rand+0x5c>)
 8004f18:	2201      	movs	r2, #1
 8004f1a:	6083      	str	r3, [r0, #8]
 8004f1c:	230b      	movs	r3, #11
 8004f1e:	8183      	strh	r3, [r0, #12]
 8004f20:	2300      	movs	r3, #0
 8004f22:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8004f26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004f28:	480c      	ldr	r0, [pc, #48]	; (8004f5c <rand+0x60>)
 8004f2a:	690a      	ldr	r2, [r1, #16]
 8004f2c:	694b      	ldr	r3, [r1, #20]
 8004f2e:	4350      	muls	r0, r2
 8004f30:	4c0b      	ldr	r4, [pc, #44]	; (8004f60 <rand+0x64>)
 8004f32:	fb04 0003 	mla	r0, r4, r3, r0
 8004f36:	fba2 2304 	umull	r2, r3, r2, r4
 8004f3a:	4403      	add	r3, r0
 8004f3c:	1c54      	adds	r4, r2, #1
 8004f3e:	f143 0500 	adc.w	r5, r3, #0
 8004f42:	e9c1 4504 	strd	r4, r5, [r1, #16]
 8004f46:	f025 4000 	bic.w	r0, r5, #2147483648	; 0x80000000
 8004f4a:	bd38      	pop	{r3, r4, r5, pc}
 8004f4c:	20000048 	.word	0x20000048
 8004f50:	abcd330e 	.word	0xabcd330e
 8004f54:	e66d1234 	.word	0xe66d1234
 8004f58:	0005deec 	.word	0x0005deec
 8004f5c:	5851f42d 	.word	0x5851f42d
 8004f60:	4c957f2d 	.word	0x4c957f2d

08004f64 <siprintf>:
 8004f64:	b40e      	push	{r1, r2, r3}
 8004f66:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f6a:	b500      	push	{lr}
 8004f6c:	b09c      	sub	sp, #112	; 0x70
 8004f6e:	ab1d      	add	r3, sp, #116	; 0x74
 8004f70:	9002      	str	r0, [sp, #8]
 8004f72:	9006      	str	r0, [sp, #24]
 8004f74:	9107      	str	r1, [sp, #28]
 8004f76:	9104      	str	r1, [sp, #16]
 8004f78:	4808      	ldr	r0, [pc, #32]	; (8004f9c <siprintf+0x38>)
 8004f7a:	4909      	ldr	r1, [pc, #36]	; (8004fa0 <siprintf+0x3c>)
 8004f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f80:	9105      	str	r1, [sp, #20]
 8004f82:	6800      	ldr	r0, [r0, #0]
 8004f84:	a902      	add	r1, sp, #8
 8004f86:	9301      	str	r3, [sp, #4]
 8004f88:	f000 f952 	bl	8005230 <_svfiprintf_r>
 8004f8c:	2200      	movs	r2, #0
 8004f8e:	9b02      	ldr	r3, [sp, #8]
 8004f90:	701a      	strb	r2, [r3, #0]
 8004f92:	b01c      	add	sp, #112	; 0x70
 8004f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f98:	b003      	add	sp, #12
 8004f9a:	4770      	bx	lr
 8004f9c:	20000048 	.word	0x20000048
 8004fa0:	ffff0208 	.word	0xffff0208

08004fa4 <__utoa>:
 8004fa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa6:	b08b      	sub	sp, #44	; 0x2c
 8004fa8:	4605      	mov	r5, r0
 8004faa:	460c      	mov	r4, r1
 8004fac:	466e      	mov	r6, sp
 8004fae:	4b1b      	ldr	r3, [pc, #108]	; (800501c <__utoa+0x78>)
 8004fb0:	f103 0c20 	add.w	ip, r3, #32
 8004fb4:	4637      	mov	r7, r6
 8004fb6:	6818      	ldr	r0, [r3, #0]
 8004fb8:	6859      	ldr	r1, [r3, #4]
 8004fba:	3308      	adds	r3, #8
 8004fbc:	c703      	stmia	r7!, {r0, r1}
 8004fbe:	4563      	cmp	r3, ip
 8004fc0:	463e      	mov	r6, r7
 8004fc2:	d1f7      	bne.n	8004fb4 <__utoa+0x10>
 8004fc4:	6818      	ldr	r0, [r3, #0]
 8004fc6:	791b      	ldrb	r3, [r3, #4]
 8004fc8:	6038      	str	r0, [r7, #0]
 8004fca:	713b      	strb	r3, [r7, #4]
 8004fcc:	1e93      	subs	r3, r2, #2
 8004fce:	2b22      	cmp	r3, #34	; 0x22
 8004fd0:	f04f 0300 	mov.w	r3, #0
 8004fd4:	d904      	bls.n	8004fe0 <__utoa+0x3c>
 8004fd6:	7023      	strb	r3, [r4, #0]
 8004fd8:	461c      	mov	r4, r3
 8004fda:	4620      	mov	r0, r4
 8004fdc:	b00b      	add	sp, #44	; 0x2c
 8004fde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004fe0:	1e66      	subs	r6, r4, #1
 8004fe2:	fbb5 f0f2 	udiv	r0, r5, r2
 8004fe6:	fb02 5510 	mls	r5, r2, r0, r5
 8004fea:	af0a      	add	r7, sp, #40	; 0x28
 8004fec:	443d      	add	r5, r7
 8004fee:	f815 5c28 	ldrb.w	r5, [r5, #-40]
 8004ff2:	1c59      	adds	r1, r3, #1
 8004ff4:	f806 5f01 	strb.w	r5, [r6, #1]!
 8004ff8:	4605      	mov	r5, r0
 8004ffa:	b968      	cbnz	r0, 8005018 <__utoa+0x74>
 8004ffc:	4622      	mov	r2, r4
 8004ffe:	5460      	strb	r0, [r4, r1]
 8005000:	4423      	add	r3, r4
 8005002:	1b19      	subs	r1, r3, r4
 8005004:	1b10      	subs	r0, r2, r4
 8005006:	4281      	cmp	r1, r0
 8005008:	dde7      	ble.n	8004fda <__utoa+0x36>
 800500a:	7811      	ldrb	r1, [r2, #0]
 800500c:	7818      	ldrb	r0, [r3, #0]
 800500e:	f802 0b01 	strb.w	r0, [r2], #1
 8005012:	f803 1901 	strb.w	r1, [r3], #-1
 8005016:	e7f4      	b.n	8005002 <__utoa+0x5e>
 8005018:	460b      	mov	r3, r1
 800501a:	e7e2      	b.n	8004fe2 <__utoa+0x3e>
 800501c:	08005b20 	.word	0x08005b20

08005020 <malloc>:
 8005020:	4b02      	ldr	r3, [pc, #8]	; (800502c <malloc+0xc>)
 8005022:	4601      	mov	r1, r0
 8005024:	6818      	ldr	r0, [r3, #0]
 8005026:	f000 b84f 	b.w	80050c8 <_malloc_r>
 800502a:	bf00      	nop
 800502c:	20000048 	.word	0x20000048

08005030 <_free_r>:
 8005030:	b538      	push	{r3, r4, r5, lr}
 8005032:	4605      	mov	r5, r0
 8005034:	2900      	cmp	r1, #0
 8005036:	d043      	beq.n	80050c0 <_free_r+0x90>
 8005038:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800503c:	1f0c      	subs	r4, r1, #4
 800503e:	2b00      	cmp	r3, #0
 8005040:	bfb8      	it	lt
 8005042:	18e4      	addlt	r4, r4, r3
 8005044:	f000 fbab 	bl	800579e <__malloc_lock>
 8005048:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <_free_r+0x94>)
 800504a:	6813      	ldr	r3, [r2, #0]
 800504c:	4610      	mov	r0, r2
 800504e:	b933      	cbnz	r3, 800505e <_free_r+0x2e>
 8005050:	6063      	str	r3, [r4, #4]
 8005052:	6014      	str	r4, [r2, #0]
 8005054:	4628      	mov	r0, r5
 8005056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800505a:	f000 bba1 	b.w	80057a0 <__malloc_unlock>
 800505e:	42a3      	cmp	r3, r4
 8005060:	d90b      	bls.n	800507a <_free_r+0x4a>
 8005062:	6821      	ldr	r1, [r4, #0]
 8005064:	1862      	adds	r2, r4, r1
 8005066:	4293      	cmp	r3, r2
 8005068:	bf01      	itttt	eq
 800506a:	681a      	ldreq	r2, [r3, #0]
 800506c:	685b      	ldreq	r3, [r3, #4]
 800506e:	1852      	addeq	r2, r2, r1
 8005070:	6022      	streq	r2, [r4, #0]
 8005072:	6063      	str	r3, [r4, #4]
 8005074:	6004      	str	r4, [r0, #0]
 8005076:	e7ed      	b.n	8005054 <_free_r+0x24>
 8005078:	4613      	mov	r3, r2
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	b10a      	cbz	r2, 8005082 <_free_r+0x52>
 800507e:	42a2      	cmp	r2, r4
 8005080:	d9fa      	bls.n	8005078 <_free_r+0x48>
 8005082:	6819      	ldr	r1, [r3, #0]
 8005084:	1858      	adds	r0, r3, r1
 8005086:	42a0      	cmp	r0, r4
 8005088:	d10b      	bne.n	80050a2 <_free_r+0x72>
 800508a:	6820      	ldr	r0, [r4, #0]
 800508c:	4401      	add	r1, r0
 800508e:	1858      	adds	r0, r3, r1
 8005090:	4282      	cmp	r2, r0
 8005092:	6019      	str	r1, [r3, #0]
 8005094:	d1de      	bne.n	8005054 <_free_r+0x24>
 8005096:	6810      	ldr	r0, [r2, #0]
 8005098:	6852      	ldr	r2, [r2, #4]
 800509a:	4401      	add	r1, r0
 800509c:	6019      	str	r1, [r3, #0]
 800509e:	605a      	str	r2, [r3, #4]
 80050a0:	e7d8      	b.n	8005054 <_free_r+0x24>
 80050a2:	d902      	bls.n	80050aa <_free_r+0x7a>
 80050a4:	230c      	movs	r3, #12
 80050a6:	602b      	str	r3, [r5, #0]
 80050a8:	e7d4      	b.n	8005054 <_free_r+0x24>
 80050aa:	6820      	ldr	r0, [r4, #0]
 80050ac:	1821      	adds	r1, r4, r0
 80050ae:	428a      	cmp	r2, r1
 80050b0:	bf01      	itttt	eq
 80050b2:	6811      	ldreq	r1, [r2, #0]
 80050b4:	6852      	ldreq	r2, [r2, #4]
 80050b6:	1809      	addeq	r1, r1, r0
 80050b8:	6021      	streq	r1, [r4, #0]
 80050ba:	6062      	str	r2, [r4, #4]
 80050bc:	605c      	str	r4, [r3, #4]
 80050be:	e7c9      	b.n	8005054 <_free_r+0x24>
 80050c0:	bd38      	pop	{r3, r4, r5, pc}
 80050c2:	bf00      	nop
 80050c4:	20002de0 	.word	0x20002de0

080050c8 <_malloc_r>:
 80050c8:	b570      	push	{r4, r5, r6, lr}
 80050ca:	1ccd      	adds	r5, r1, #3
 80050cc:	f025 0503 	bic.w	r5, r5, #3
 80050d0:	3508      	adds	r5, #8
 80050d2:	2d0c      	cmp	r5, #12
 80050d4:	bf38      	it	cc
 80050d6:	250c      	movcc	r5, #12
 80050d8:	2d00      	cmp	r5, #0
 80050da:	4606      	mov	r6, r0
 80050dc:	db01      	blt.n	80050e2 <_malloc_r+0x1a>
 80050de:	42a9      	cmp	r1, r5
 80050e0:	d903      	bls.n	80050ea <_malloc_r+0x22>
 80050e2:	230c      	movs	r3, #12
 80050e4:	6033      	str	r3, [r6, #0]
 80050e6:	2000      	movs	r0, #0
 80050e8:	bd70      	pop	{r4, r5, r6, pc}
 80050ea:	f000 fb58 	bl	800579e <__malloc_lock>
 80050ee:	4a21      	ldr	r2, [pc, #132]	; (8005174 <_malloc_r+0xac>)
 80050f0:	6814      	ldr	r4, [r2, #0]
 80050f2:	4621      	mov	r1, r4
 80050f4:	b991      	cbnz	r1, 800511c <_malloc_r+0x54>
 80050f6:	4c20      	ldr	r4, [pc, #128]	; (8005178 <_malloc_r+0xb0>)
 80050f8:	6823      	ldr	r3, [r4, #0]
 80050fa:	b91b      	cbnz	r3, 8005104 <_malloc_r+0x3c>
 80050fc:	4630      	mov	r0, r6
 80050fe:	f000 fb17 	bl	8005730 <_sbrk_r>
 8005102:	6020      	str	r0, [r4, #0]
 8005104:	4629      	mov	r1, r5
 8005106:	4630      	mov	r0, r6
 8005108:	f000 fb12 	bl	8005730 <_sbrk_r>
 800510c:	1c43      	adds	r3, r0, #1
 800510e:	d124      	bne.n	800515a <_malloc_r+0x92>
 8005110:	230c      	movs	r3, #12
 8005112:	4630      	mov	r0, r6
 8005114:	6033      	str	r3, [r6, #0]
 8005116:	f000 fb43 	bl	80057a0 <__malloc_unlock>
 800511a:	e7e4      	b.n	80050e6 <_malloc_r+0x1e>
 800511c:	680b      	ldr	r3, [r1, #0]
 800511e:	1b5b      	subs	r3, r3, r5
 8005120:	d418      	bmi.n	8005154 <_malloc_r+0x8c>
 8005122:	2b0b      	cmp	r3, #11
 8005124:	d90f      	bls.n	8005146 <_malloc_r+0x7e>
 8005126:	600b      	str	r3, [r1, #0]
 8005128:	18cc      	adds	r4, r1, r3
 800512a:	50cd      	str	r5, [r1, r3]
 800512c:	4630      	mov	r0, r6
 800512e:	f000 fb37 	bl	80057a0 <__malloc_unlock>
 8005132:	f104 000b 	add.w	r0, r4, #11
 8005136:	1d23      	adds	r3, r4, #4
 8005138:	f020 0007 	bic.w	r0, r0, #7
 800513c:	1ac3      	subs	r3, r0, r3
 800513e:	d0d3      	beq.n	80050e8 <_malloc_r+0x20>
 8005140:	425a      	negs	r2, r3
 8005142:	50e2      	str	r2, [r4, r3]
 8005144:	e7d0      	b.n	80050e8 <_malloc_r+0x20>
 8005146:	684b      	ldr	r3, [r1, #4]
 8005148:	428c      	cmp	r4, r1
 800514a:	bf16      	itet	ne
 800514c:	6063      	strne	r3, [r4, #4]
 800514e:	6013      	streq	r3, [r2, #0]
 8005150:	460c      	movne	r4, r1
 8005152:	e7eb      	b.n	800512c <_malloc_r+0x64>
 8005154:	460c      	mov	r4, r1
 8005156:	6849      	ldr	r1, [r1, #4]
 8005158:	e7cc      	b.n	80050f4 <_malloc_r+0x2c>
 800515a:	1cc4      	adds	r4, r0, #3
 800515c:	f024 0403 	bic.w	r4, r4, #3
 8005160:	42a0      	cmp	r0, r4
 8005162:	d005      	beq.n	8005170 <_malloc_r+0xa8>
 8005164:	1a21      	subs	r1, r4, r0
 8005166:	4630      	mov	r0, r6
 8005168:	f000 fae2 	bl	8005730 <_sbrk_r>
 800516c:	3001      	adds	r0, #1
 800516e:	d0cf      	beq.n	8005110 <_malloc_r+0x48>
 8005170:	6025      	str	r5, [r4, #0]
 8005172:	e7db      	b.n	800512c <_malloc_r+0x64>
 8005174:	20002de0 	.word	0x20002de0
 8005178:	20002de4 	.word	0x20002de4

0800517c <__ssputs_r>:
 800517c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005180:	688e      	ldr	r6, [r1, #8]
 8005182:	4682      	mov	sl, r0
 8005184:	429e      	cmp	r6, r3
 8005186:	460c      	mov	r4, r1
 8005188:	4690      	mov	r8, r2
 800518a:	4699      	mov	r9, r3
 800518c:	d837      	bhi.n	80051fe <__ssputs_r+0x82>
 800518e:	898a      	ldrh	r2, [r1, #12]
 8005190:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005194:	d031      	beq.n	80051fa <__ssputs_r+0x7e>
 8005196:	2302      	movs	r3, #2
 8005198:	6825      	ldr	r5, [r4, #0]
 800519a:	6909      	ldr	r1, [r1, #16]
 800519c:	1a6f      	subs	r7, r5, r1
 800519e:	6965      	ldr	r5, [r4, #20]
 80051a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80051a4:	fb95 f5f3 	sdiv	r5, r5, r3
 80051a8:	f109 0301 	add.w	r3, r9, #1
 80051ac:	443b      	add	r3, r7
 80051ae:	429d      	cmp	r5, r3
 80051b0:	bf38      	it	cc
 80051b2:	461d      	movcc	r5, r3
 80051b4:	0553      	lsls	r3, r2, #21
 80051b6:	d530      	bpl.n	800521a <__ssputs_r+0x9e>
 80051b8:	4629      	mov	r1, r5
 80051ba:	f7ff ff85 	bl	80050c8 <_malloc_r>
 80051be:	4606      	mov	r6, r0
 80051c0:	b950      	cbnz	r0, 80051d8 <__ssputs_r+0x5c>
 80051c2:	230c      	movs	r3, #12
 80051c4:	f04f 30ff 	mov.w	r0, #4294967295
 80051c8:	f8ca 3000 	str.w	r3, [sl]
 80051cc:	89a3      	ldrh	r3, [r4, #12]
 80051ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80051d2:	81a3      	strh	r3, [r4, #12]
 80051d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80051d8:	463a      	mov	r2, r7
 80051da:	6921      	ldr	r1, [r4, #16]
 80051dc:	f7ff fe7a 	bl	8004ed4 <memcpy>
 80051e0:	89a3      	ldrh	r3, [r4, #12]
 80051e2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80051e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051ea:	81a3      	strh	r3, [r4, #12]
 80051ec:	6126      	str	r6, [r4, #16]
 80051ee:	443e      	add	r6, r7
 80051f0:	6026      	str	r6, [r4, #0]
 80051f2:	464e      	mov	r6, r9
 80051f4:	6165      	str	r5, [r4, #20]
 80051f6:	1bed      	subs	r5, r5, r7
 80051f8:	60a5      	str	r5, [r4, #8]
 80051fa:	454e      	cmp	r6, r9
 80051fc:	d900      	bls.n	8005200 <__ssputs_r+0x84>
 80051fe:	464e      	mov	r6, r9
 8005200:	4632      	mov	r2, r6
 8005202:	4641      	mov	r1, r8
 8005204:	6820      	ldr	r0, [r4, #0]
 8005206:	f000 fab1 	bl	800576c <memmove>
 800520a:	68a3      	ldr	r3, [r4, #8]
 800520c:	2000      	movs	r0, #0
 800520e:	1b9b      	subs	r3, r3, r6
 8005210:	60a3      	str	r3, [r4, #8]
 8005212:	6823      	ldr	r3, [r4, #0]
 8005214:	441e      	add	r6, r3
 8005216:	6026      	str	r6, [r4, #0]
 8005218:	e7dc      	b.n	80051d4 <__ssputs_r+0x58>
 800521a:	462a      	mov	r2, r5
 800521c:	f000 fac1 	bl	80057a2 <_realloc_r>
 8005220:	4606      	mov	r6, r0
 8005222:	2800      	cmp	r0, #0
 8005224:	d1e2      	bne.n	80051ec <__ssputs_r+0x70>
 8005226:	6921      	ldr	r1, [r4, #16]
 8005228:	4650      	mov	r0, sl
 800522a:	f7ff ff01 	bl	8005030 <_free_r>
 800522e:	e7c8      	b.n	80051c2 <__ssputs_r+0x46>

08005230 <_svfiprintf_r>:
 8005230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005234:	461d      	mov	r5, r3
 8005236:	898b      	ldrh	r3, [r1, #12]
 8005238:	b09d      	sub	sp, #116	; 0x74
 800523a:	061f      	lsls	r7, r3, #24
 800523c:	4680      	mov	r8, r0
 800523e:	460c      	mov	r4, r1
 8005240:	4616      	mov	r6, r2
 8005242:	d50f      	bpl.n	8005264 <_svfiprintf_r+0x34>
 8005244:	690b      	ldr	r3, [r1, #16]
 8005246:	b96b      	cbnz	r3, 8005264 <_svfiprintf_r+0x34>
 8005248:	2140      	movs	r1, #64	; 0x40
 800524a:	f7ff ff3d 	bl	80050c8 <_malloc_r>
 800524e:	6020      	str	r0, [r4, #0]
 8005250:	6120      	str	r0, [r4, #16]
 8005252:	b928      	cbnz	r0, 8005260 <_svfiprintf_r+0x30>
 8005254:	230c      	movs	r3, #12
 8005256:	f8c8 3000 	str.w	r3, [r8]
 800525a:	f04f 30ff 	mov.w	r0, #4294967295
 800525e:	e0c8      	b.n	80053f2 <_svfiprintf_r+0x1c2>
 8005260:	2340      	movs	r3, #64	; 0x40
 8005262:	6163      	str	r3, [r4, #20]
 8005264:	2300      	movs	r3, #0
 8005266:	9309      	str	r3, [sp, #36]	; 0x24
 8005268:	2320      	movs	r3, #32
 800526a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800526e:	2330      	movs	r3, #48	; 0x30
 8005270:	f04f 0b01 	mov.w	fp, #1
 8005274:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005278:	9503      	str	r5, [sp, #12]
 800527a:	4637      	mov	r7, r6
 800527c:	463d      	mov	r5, r7
 800527e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005282:	b10b      	cbz	r3, 8005288 <_svfiprintf_r+0x58>
 8005284:	2b25      	cmp	r3, #37	; 0x25
 8005286:	d13e      	bne.n	8005306 <_svfiprintf_r+0xd6>
 8005288:	ebb7 0a06 	subs.w	sl, r7, r6
 800528c:	d00b      	beq.n	80052a6 <_svfiprintf_r+0x76>
 800528e:	4653      	mov	r3, sl
 8005290:	4632      	mov	r2, r6
 8005292:	4621      	mov	r1, r4
 8005294:	4640      	mov	r0, r8
 8005296:	f7ff ff71 	bl	800517c <__ssputs_r>
 800529a:	3001      	adds	r0, #1
 800529c:	f000 80a4 	beq.w	80053e8 <_svfiprintf_r+0x1b8>
 80052a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052a2:	4453      	add	r3, sl
 80052a4:	9309      	str	r3, [sp, #36]	; 0x24
 80052a6:	783b      	ldrb	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	f000 809d 	beq.w	80053e8 <_svfiprintf_r+0x1b8>
 80052ae:	2300      	movs	r3, #0
 80052b0:	f04f 32ff 	mov.w	r2, #4294967295
 80052b4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052b8:	9304      	str	r3, [sp, #16]
 80052ba:	9307      	str	r3, [sp, #28]
 80052bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052c0:	931a      	str	r3, [sp, #104]	; 0x68
 80052c2:	462f      	mov	r7, r5
 80052c4:	2205      	movs	r2, #5
 80052c6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80052ca:	4850      	ldr	r0, [pc, #320]	; (800540c <_svfiprintf_r+0x1dc>)
 80052cc:	f000 fa40 	bl	8005750 <memchr>
 80052d0:	9b04      	ldr	r3, [sp, #16]
 80052d2:	b9d0      	cbnz	r0, 800530a <_svfiprintf_r+0xda>
 80052d4:	06d9      	lsls	r1, r3, #27
 80052d6:	bf44      	itt	mi
 80052d8:	2220      	movmi	r2, #32
 80052da:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052de:	071a      	lsls	r2, r3, #28
 80052e0:	bf44      	itt	mi
 80052e2:	222b      	movmi	r2, #43	; 0x2b
 80052e4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052e8:	782a      	ldrb	r2, [r5, #0]
 80052ea:	2a2a      	cmp	r2, #42	; 0x2a
 80052ec:	d015      	beq.n	800531a <_svfiprintf_r+0xea>
 80052ee:	462f      	mov	r7, r5
 80052f0:	2000      	movs	r0, #0
 80052f2:	250a      	movs	r5, #10
 80052f4:	9a07      	ldr	r2, [sp, #28]
 80052f6:	4639      	mov	r1, r7
 80052f8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052fc:	3b30      	subs	r3, #48	; 0x30
 80052fe:	2b09      	cmp	r3, #9
 8005300:	d94d      	bls.n	800539e <_svfiprintf_r+0x16e>
 8005302:	b1b8      	cbz	r0, 8005334 <_svfiprintf_r+0x104>
 8005304:	e00f      	b.n	8005326 <_svfiprintf_r+0xf6>
 8005306:	462f      	mov	r7, r5
 8005308:	e7b8      	b.n	800527c <_svfiprintf_r+0x4c>
 800530a:	4a40      	ldr	r2, [pc, #256]	; (800540c <_svfiprintf_r+0x1dc>)
 800530c:	463d      	mov	r5, r7
 800530e:	1a80      	subs	r0, r0, r2
 8005310:	fa0b f000 	lsl.w	r0, fp, r0
 8005314:	4318      	orrs	r0, r3
 8005316:	9004      	str	r0, [sp, #16]
 8005318:	e7d3      	b.n	80052c2 <_svfiprintf_r+0x92>
 800531a:	9a03      	ldr	r2, [sp, #12]
 800531c:	1d11      	adds	r1, r2, #4
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	9103      	str	r1, [sp, #12]
 8005322:	2a00      	cmp	r2, #0
 8005324:	db01      	blt.n	800532a <_svfiprintf_r+0xfa>
 8005326:	9207      	str	r2, [sp, #28]
 8005328:	e004      	b.n	8005334 <_svfiprintf_r+0x104>
 800532a:	4252      	negs	r2, r2
 800532c:	f043 0302 	orr.w	r3, r3, #2
 8005330:	9207      	str	r2, [sp, #28]
 8005332:	9304      	str	r3, [sp, #16]
 8005334:	783b      	ldrb	r3, [r7, #0]
 8005336:	2b2e      	cmp	r3, #46	; 0x2e
 8005338:	d10c      	bne.n	8005354 <_svfiprintf_r+0x124>
 800533a:	787b      	ldrb	r3, [r7, #1]
 800533c:	2b2a      	cmp	r3, #42	; 0x2a
 800533e:	d133      	bne.n	80053a8 <_svfiprintf_r+0x178>
 8005340:	9b03      	ldr	r3, [sp, #12]
 8005342:	3702      	adds	r7, #2
 8005344:	1d1a      	adds	r2, r3, #4
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	9203      	str	r2, [sp, #12]
 800534a:	2b00      	cmp	r3, #0
 800534c:	bfb8      	it	lt
 800534e:	f04f 33ff 	movlt.w	r3, #4294967295
 8005352:	9305      	str	r3, [sp, #20]
 8005354:	4d2e      	ldr	r5, [pc, #184]	; (8005410 <_svfiprintf_r+0x1e0>)
 8005356:	2203      	movs	r2, #3
 8005358:	7839      	ldrb	r1, [r7, #0]
 800535a:	4628      	mov	r0, r5
 800535c:	f000 f9f8 	bl	8005750 <memchr>
 8005360:	b138      	cbz	r0, 8005372 <_svfiprintf_r+0x142>
 8005362:	2340      	movs	r3, #64	; 0x40
 8005364:	1b40      	subs	r0, r0, r5
 8005366:	fa03 f000 	lsl.w	r0, r3, r0
 800536a:	9b04      	ldr	r3, [sp, #16]
 800536c:	3701      	adds	r7, #1
 800536e:	4303      	orrs	r3, r0
 8005370:	9304      	str	r3, [sp, #16]
 8005372:	7839      	ldrb	r1, [r7, #0]
 8005374:	2206      	movs	r2, #6
 8005376:	4827      	ldr	r0, [pc, #156]	; (8005414 <_svfiprintf_r+0x1e4>)
 8005378:	1c7e      	adds	r6, r7, #1
 800537a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800537e:	f000 f9e7 	bl	8005750 <memchr>
 8005382:	2800      	cmp	r0, #0
 8005384:	d038      	beq.n	80053f8 <_svfiprintf_r+0x1c8>
 8005386:	4b24      	ldr	r3, [pc, #144]	; (8005418 <_svfiprintf_r+0x1e8>)
 8005388:	bb13      	cbnz	r3, 80053d0 <_svfiprintf_r+0x1a0>
 800538a:	9b03      	ldr	r3, [sp, #12]
 800538c:	3307      	adds	r3, #7
 800538e:	f023 0307 	bic.w	r3, r3, #7
 8005392:	3308      	adds	r3, #8
 8005394:	9303      	str	r3, [sp, #12]
 8005396:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005398:	444b      	add	r3, r9
 800539a:	9309      	str	r3, [sp, #36]	; 0x24
 800539c:	e76d      	b.n	800527a <_svfiprintf_r+0x4a>
 800539e:	fb05 3202 	mla	r2, r5, r2, r3
 80053a2:	2001      	movs	r0, #1
 80053a4:	460f      	mov	r7, r1
 80053a6:	e7a6      	b.n	80052f6 <_svfiprintf_r+0xc6>
 80053a8:	2300      	movs	r3, #0
 80053aa:	250a      	movs	r5, #10
 80053ac:	4619      	mov	r1, r3
 80053ae:	3701      	adds	r7, #1
 80053b0:	9305      	str	r3, [sp, #20]
 80053b2:	4638      	mov	r0, r7
 80053b4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053b8:	3a30      	subs	r2, #48	; 0x30
 80053ba:	2a09      	cmp	r2, #9
 80053bc:	d903      	bls.n	80053c6 <_svfiprintf_r+0x196>
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d0c8      	beq.n	8005354 <_svfiprintf_r+0x124>
 80053c2:	9105      	str	r1, [sp, #20]
 80053c4:	e7c6      	b.n	8005354 <_svfiprintf_r+0x124>
 80053c6:	fb05 2101 	mla	r1, r5, r1, r2
 80053ca:	2301      	movs	r3, #1
 80053cc:	4607      	mov	r7, r0
 80053ce:	e7f0      	b.n	80053b2 <_svfiprintf_r+0x182>
 80053d0:	ab03      	add	r3, sp, #12
 80053d2:	9300      	str	r3, [sp, #0]
 80053d4:	4622      	mov	r2, r4
 80053d6:	4b11      	ldr	r3, [pc, #68]	; (800541c <_svfiprintf_r+0x1ec>)
 80053d8:	a904      	add	r1, sp, #16
 80053da:	4640      	mov	r0, r8
 80053dc:	f3af 8000 	nop.w
 80053e0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80053e4:	4681      	mov	r9, r0
 80053e6:	d1d6      	bne.n	8005396 <_svfiprintf_r+0x166>
 80053e8:	89a3      	ldrh	r3, [r4, #12]
 80053ea:	065b      	lsls	r3, r3, #25
 80053ec:	f53f af35 	bmi.w	800525a <_svfiprintf_r+0x2a>
 80053f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053f2:	b01d      	add	sp, #116	; 0x74
 80053f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053f8:	ab03      	add	r3, sp, #12
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	4622      	mov	r2, r4
 80053fe:	4b07      	ldr	r3, [pc, #28]	; (800541c <_svfiprintf_r+0x1ec>)
 8005400:	a904      	add	r1, sp, #16
 8005402:	4640      	mov	r0, r8
 8005404:	f000 f882 	bl	800550c <_printf_i>
 8005408:	e7ea      	b.n	80053e0 <_svfiprintf_r+0x1b0>
 800540a:	bf00      	nop
 800540c:	08005b45 	.word	0x08005b45
 8005410:	08005b4b 	.word	0x08005b4b
 8005414:	08005b4f 	.word	0x08005b4f
 8005418:	00000000 	.word	0x00000000
 800541c:	0800517d 	.word	0x0800517d

08005420 <_printf_common>:
 8005420:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005424:	4691      	mov	r9, r2
 8005426:	461f      	mov	r7, r3
 8005428:	688a      	ldr	r2, [r1, #8]
 800542a:	690b      	ldr	r3, [r1, #16]
 800542c:	4606      	mov	r6, r0
 800542e:	4293      	cmp	r3, r2
 8005430:	bfb8      	it	lt
 8005432:	4613      	movlt	r3, r2
 8005434:	f8c9 3000 	str.w	r3, [r9]
 8005438:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800543c:	460c      	mov	r4, r1
 800543e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005442:	b112      	cbz	r2, 800544a <_printf_common+0x2a>
 8005444:	3301      	adds	r3, #1
 8005446:	f8c9 3000 	str.w	r3, [r9]
 800544a:	6823      	ldr	r3, [r4, #0]
 800544c:	0699      	lsls	r1, r3, #26
 800544e:	bf42      	ittt	mi
 8005450:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005454:	3302      	addmi	r3, #2
 8005456:	f8c9 3000 	strmi.w	r3, [r9]
 800545a:	6825      	ldr	r5, [r4, #0]
 800545c:	f015 0506 	ands.w	r5, r5, #6
 8005460:	d107      	bne.n	8005472 <_printf_common+0x52>
 8005462:	f104 0a19 	add.w	sl, r4, #25
 8005466:	68e3      	ldr	r3, [r4, #12]
 8005468:	f8d9 2000 	ldr.w	r2, [r9]
 800546c:	1a9b      	subs	r3, r3, r2
 800546e:	42ab      	cmp	r3, r5
 8005470:	dc29      	bgt.n	80054c6 <_printf_common+0xa6>
 8005472:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8005476:	6822      	ldr	r2, [r4, #0]
 8005478:	3300      	adds	r3, #0
 800547a:	bf18      	it	ne
 800547c:	2301      	movne	r3, #1
 800547e:	0692      	lsls	r2, r2, #26
 8005480:	d42e      	bmi.n	80054e0 <_printf_common+0xc0>
 8005482:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005486:	4639      	mov	r1, r7
 8005488:	4630      	mov	r0, r6
 800548a:	47c0      	blx	r8
 800548c:	3001      	adds	r0, #1
 800548e:	d021      	beq.n	80054d4 <_printf_common+0xb4>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	68e5      	ldr	r5, [r4, #12]
 8005494:	f003 0306 	and.w	r3, r3, #6
 8005498:	2b04      	cmp	r3, #4
 800549a:	bf18      	it	ne
 800549c:	2500      	movne	r5, #0
 800549e:	f8d9 2000 	ldr.w	r2, [r9]
 80054a2:	f04f 0900 	mov.w	r9, #0
 80054a6:	bf08      	it	eq
 80054a8:	1aad      	subeq	r5, r5, r2
 80054aa:	68a3      	ldr	r3, [r4, #8]
 80054ac:	6922      	ldr	r2, [r4, #16]
 80054ae:	bf08      	it	eq
 80054b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054b4:	4293      	cmp	r3, r2
 80054b6:	bfc4      	itt	gt
 80054b8:	1a9b      	subgt	r3, r3, r2
 80054ba:	18ed      	addgt	r5, r5, r3
 80054bc:	341a      	adds	r4, #26
 80054be:	454d      	cmp	r5, r9
 80054c0:	d11a      	bne.n	80054f8 <_printf_common+0xd8>
 80054c2:	2000      	movs	r0, #0
 80054c4:	e008      	b.n	80054d8 <_printf_common+0xb8>
 80054c6:	2301      	movs	r3, #1
 80054c8:	4652      	mov	r2, sl
 80054ca:	4639      	mov	r1, r7
 80054cc:	4630      	mov	r0, r6
 80054ce:	47c0      	blx	r8
 80054d0:	3001      	adds	r0, #1
 80054d2:	d103      	bne.n	80054dc <_printf_common+0xbc>
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
 80054d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054dc:	3501      	adds	r5, #1
 80054de:	e7c2      	b.n	8005466 <_printf_common+0x46>
 80054e0:	2030      	movs	r0, #48	; 0x30
 80054e2:	18e1      	adds	r1, r4, r3
 80054e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80054e8:	1c5a      	adds	r2, r3, #1
 80054ea:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80054ee:	4422      	add	r2, r4
 80054f0:	3302      	adds	r3, #2
 80054f2:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80054f6:	e7c4      	b.n	8005482 <_printf_common+0x62>
 80054f8:	2301      	movs	r3, #1
 80054fa:	4622      	mov	r2, r4
 80054fc:	4639      	mov	r1, r7
 80054fe:	4630      	mov	r0, r6
 8005500:	47c0      	blx	r8
 8005502:	3001      	adds	r0, #1
 8005504:	d0e6      	beq.n	80054d4 <_printf_common+0xb4>
 8005506:	f109 0901 	add.w	r9, r9, #1
 800550a:	e7d8      	b.n	80054be <_printf_common+0x9e>

0800550c <_printf_i>:
 800550c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005510:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005514:	460c      	mov	r4, r1
 8005516:	7e09      	ldrb	r1, [r1, #24]
 8005518:	b085      	sub	sp, #20
 800551a:	296e      	cmp	r1, #110	; 0x6e
 800551c:	4617      	mov	r7, r2
 800551e:	4606      	mov	r6, r0
 8005520:	4698      	mov	r8, r3
 8005522:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005524:	f000 80b3 	beq.w	800568e <_printf_i+0x182>
 8005528:	d822      	bhi.n	8005570 <_printf_i+0x64>
 800552a:	2963      	cmp	r1, #99	; 0x63
 800552c:	d036      	beq.n	800559c <_printf_i+0x90>
 800552e:	d80a      	bhi.n	8005546 <_printf_i+0x3a>
 8005530:	2900      	cmp	r1, #0
 8005532:	f000 80b9 	beq.w	80056a8 <_printf_i+0x19c>
 8005536:	2958      	cmp	r1, #88	; 0x58
 8005538:	f000 8083 	beq.w	8005642 <_printf_i+0x136>
 800553c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005540:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005544:	e032      	b.n	80055ac <_printf_i+0xa0>
 8005546:	2964      	cmp	r1, #100	; 0x64
 8005548:	d001      	beq.n	800554e <_printf_i+0x42>
 800554a:	2969      	cmp	r1, #105	; 0x69
 800554c:	d1f6      	bne.n	800553c <_printf_i+0x30>
 800554e:	6820      	ldr	r0, [r4, #0]
 8005550:	6813      	ldr	r3, [r2, #0]
 8005552:	0605      	lsls	r5, r0, #24
 8005554:	f103 0104 	add.w	r1, r3, #4
 8005558:	d52a      	bpl.n	80055b0 <_printf_i+0xa4>
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	6011      	str	r1, [r2, #0]
 800555e:	2b00      	cmp	r3, #0
 8005560:	da03      	bge.n	800556a <_printf_i+0x5e>
 8005562:	222d      	movs	r2, #45	; 0x2d
 8005564:	425b      	negs	r3, r3
 8005566:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800556a:	486f      	ldr	r0, [pc, #444]	; (8005728 <_printf_i+0x21c>)
 800556c:	220a      	movs	r2, #10
 800556e:	e039      	b.n	80055e4 <_printf_i+0xd8>
 8005570:	2973      	cmp	r1, #115	; 0x73
 8005572:	f000 809d 	beq.w	80056b0 <_printf_i+0x1a4>
 8005576:	d808      	bhi.n	800558a <_printf_i+0x7e>
 8005578:	296f      	cmp	r1, #111	; 0x6f
 800557a:	d020      	beq.n	80055be <_printf_i+0xb2>
 800557c:	2970      	cmp	r1, #112	; 0x70
 800557e:	d1dd      	bne.n	800553c <_printf_i+0x30>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	f043 0320 	orr.w	r3, r3, #32
 8005586:	6023      	str	r3, [r4, #0]
 8005588:	e003      	b.n	8005592 <_printf_i+0x86>
 800558a:	2975      	cmp	r1, #117	; 0x75
 800558c:	d017      	beq.n	80055be <_printf_i+0xb2>
 800558e:	2978      	cmp	r1, #120	; 0x78
 8005590:	d1d4      	bne.n	800553c <_printf_i+0x30>
 8005592:	2378      	movs	r3, #120	; 0x78
 8005594:	4865      	ldr	r0, [pc, #404]	; (800572c <_printf_i+0x220>)
 8005596:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800559a:	e055      	b.n	8005648 <_printf_i+0x13c>
 800559c:	6813      	ldr	r3, [r2, #0]
 800559e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a2:	1d19      	adds	r1, r3, #4
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	6011      	str	r1, [r2, #0]
 80055a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055ac:	2301      	movs	r3, #1
 80055ae:	e08c      	b.n	80056ca <_printf_i+0x1be>
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055b6:	6011      	str	r1, [r2, #0]
 80055b8:	bf18      	it	ne
 80055ba:	b21b      	sxthne	r3, r3
 80055bc:	e7cf      	b.n	800555e <_printf_i+0x52>
 80055be:	6813      	ldr	r3, [r2, #0]
 80055c0:	6825      	ldr	r5, [r4, #0]
 80055c2:	1d18      	adds	r0, r3, #4
 80055c4:	6010      	str	r0, [r2, #0]
 80055c6:	0628      	lsls	r0, r5, #24
 80055c8:	d501      	bpl.n	80055ce <_printf_i+0xc2>
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	e002      	b.n	80055d4 <_printf_i+0xc8>
 80055ce:	0668      	lsls	r0, r5, #25
 80055d0:	d5fb      	bpl.n	80055ca <_printf_i+0xbe>
 80055d2:	881b      	ldrh	r3, [r3, #0]
 80055d4:	296f      	cmp	r1, #111	; 0x6f
 80055d6:	bf14      	ite	ne
 80055d8:	220a      	movne	r2, #10
 80055da:	2208      	moveq	r2, #8
 80055dc:	4852      	ldr	r0, [pc, #328]	; (8005728 <_printf_i+0x21c>)
 80055de:	2100      	movs	r1, #0
 80055e0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80055e4:	6865      	ldr	r5, [r4, #4]
 80055e6:	2d00      	cmp	r5, #0
 80055e8:	60a5      	str	r5, [r4, #8]
 80055ea:	f2c0 8095 	blt.w	8005718 <_printf_i+0x20c>
 80055ee:	6821      	ldr	r1, [r4, #0]
 80055f0:	f021 0104 	bic.w	r1, r1, #4
 80055f4:	6021      	str	r1, [r4, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d13d      	bne.n	8005676 <_printf_i+0x16a>
 80055fa:	2d00      	cmp	r5, #0
 80055fc:	f040 808e 	bne.w	800571c <_printf_i+0x210>
 8005600:	4665      	mov	r5, ip
 8005602:	2a08      	cmp	r2, #8
 8005604:	d10b      	bne.n	800561e <_printf_i+0x112>
 8005606:	6823      	ldr	r3, [r4, #0]
 8005608:	07db      	lsls	r3, r3, #31
 800560a:	d508      	bpl.n	800561e <_printf_i+0x112>
 800560c:	6923      	ldr	r3, [r4, #16]
 800560e:	6862      	ldr	r2, [r4, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	bfde      	ittt	le
 8005614:	2330      	movle	r3, #48	; 0x30
 8005616:	f805 3c01 	strble.w	r3, [r5, #-1]
 800561a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800561e:	ebac 0305 	sub.w	r3, ip, r5
 8005622:	6123      	str	r3, [r4, #16]
 8005624:	f8cd 8000 	str.w	r8, [sp]
 8005628:	463b      	mov	r3, r7
 800562a:	aa03      	add	r2, sp, #12
 800562c:	4621      	mov	r1, r4
 800562e:	4630      	mov	r0, r6
 8005630:	f7ff fef6 	bl	8005420 <_printf_common>
 8005634:	3001      	adds	r0, #1
 8005636:	d14d      	bne.n	80056d4 <_printf_i+0x1c8>
 8005638:	f04f 30ff 	mov.w	r0, #4294967295
 800563c:	b005      	add	sp, #20
 800563e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005642:	4839      	ldr	r0, [pc, #228]	; (8005728 <_printf_i+0x21c>)
 8005644:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8005648:	6813      	ldr	r3, [r2, #0]
 800564a:	6821      	ldr	r1, [r4, #0]
 800564c:	1d1d      	adds	r5, r3, #4
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	6015      	str	r5, [r2, #0]
 8005652:	060a      	lsls	r2, r1, #24
 8005654:	d50b      	bpl.n	800566e <_printf_i+0x162>
 8005656:	07ca      	lsls	r2, r1, #31
 8005658:	bf44      	itt	mi
 800565a:	f041 0120 	orrmi.w	r1, r1, #32
 800565e:	6021      	strmi	r1, [r4, #0]
 8005660:	b91b      	cbnz	r3, 800566a <_printf_i+0x15e>
 8005662:	6822      	ldr	r2, [r4, #0]
 8005664:	f022 0220 	bic.w	r2, r2, #32
 8005668:	6022      	str	r2, [r4, #0]
 800566a:	2210      	movs	r2, #16
 800566c:	e7b7      	b.n	80055de <_printf_i+0xd2>
 800566e:	064d      	lsls	r5, r1, #25
 8005670:	bf48      	it	mi
 8005672:	b29b      	uxthmi	r3, r3
 8005674:	e7ef      	b.n	8005656 <_printf_i+0x14a>
 8005676:	4665      	mov	r5, ip
 8005678:	fbb3 f1f2 	udiv	r1, r3, r2
 800567c:	fb02 3311 	mls	r3, r2, r1, r3
 8005680:	5cc3      	ldrb	r3, [r0, r3]
 8005682:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8005686:	460b      	mov	r3, r1
 8005688:	2900      	cmp	r1, #0
 800568a:	d1f5      	bne.n	8005678 <_printf_i+0x16c>
 800568c:	e7b9      	b.n	8005602 <_printf_i+0xf6>
 800568e:	6813      	ldr	r3, [r2, #0]
 8005690:	6825      	ldr	r5, [r4, #0]
 8005692:	1d18      	adds	r0, r3, #4
 8005694:	6961      	ldr	r1, [r4, #20]
 8005696:	6010      	str	r0, [r2, #0]
 8005698:	0628      	lsls	r0, r5, #24
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	d501      	bpl.n	80056a2 <_printf_i+0x196>
 800569e:	6019      	str	r1, [r3, #0]
 80056a0:	e002      	b.n	80056a8 <_printf_i+0x19c>
 80056a2:	066a      	lsls	r2, r5, #25
 80056a4:	d5fb      	bpl.n	800569e <_printf_i+0x192>
 80056a6:	8019      	strh	r1, [r3, #0]
 80056a8:	2300      	movs	r3, #0
 80056aa:	4665      	mov	r5, ip
 80056ac:	6123      	str	r3, [r4, #16]
 80056ae:	e7b9      	b.n	8005624 <_printf_i+0x118>
 80056b0:	6813      	ldr	r3, [r2, #0]
 80056b2:	1d19      	adds	r1, r3, #4
 80056b4:	6011      	str	r1, [r2, #0]
 80056b6:	681d      	ldr	r5, [r3, #0]
 80056b8:	6862      	ldr	r2, [r4, #4]
 80056ba:	2100      	movs	r1, #0
 80056bc:	4628      	mov	r0, r5
 80056be:	f000 f847 	bl	8005750 <memchr>
 80056c2:	b108      	cbz	r0, 80056c8 <_printf_i+0x1bc>
 80056c4:	1b40      	subs	r0, r0, r5
 80056c6:	6060      	str	r0, [r4, #4]
 80056c8:	6863      	ldr	r3, [r4, #4]
 80056ca:	6123      	str	r3, [r4, #16]
 80056cc:	2300      	movs	r3, #0
 80056ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056d2:	e7a7      	b.n	8005624 <_printf_i+0x118>
 80056d4:	6923      	ldr	r3, [r4, #16]
 80056d6:	462a      	mov	r2, r5
 80056d8:	4639      	mov	r1, r7
 80056da:	4630      	mov	r0, r6
 80056dc:	47c0      	blx	r8
 80056de:	3001      	adds	r0, #1
 80056e0:	d0aa      	beq.n	8005638 <_printf_i+0x12c>
 80056e2:	6823      	ldr	r3, [r4, #0]
 80056e4:	079b      	lsls	r3, r3, #30
 80056e6:	d413      	bmi.n	8005710 <_printf_i+0x204>
 80056e8:	68e0      	ldr	r0, [r4, #12]
 80056ea:	9b03      	ldr	r3, [sp, #12]
 80056ec:	4298      	cmp	r0, r3
 80056ee:	bfb8      	it	lt
 80056f0:	4618      	movlt	r0, r3
 80056f2:	e7a3      	b.n	800563c <_printf_i+0x130>
 80056f4:	2301      	movs	r3, #1
 80056f6:	464a      	mov	r2, r9
 80056f8:	4639      	mov	r1, r7
 80056fa:	4630      	mov	r0, r6
 80056fc:	47c0      	blx	r8
 80056fe:	3001      	adds	r0, #1
 8005700:	d09a      	beq.n	8005638 <_printf_i+0x12c>
 8005702:	3501      	adds	r5, #1
 8005704:	68e3      	ldr	r3, [r4, #12]
 8005706:	9a03      	ldr	r2, [sp, #12]
 8005708:	1a9b      	subs	r3, r3, r2
 800570a:	42ab      	cmp	r3, r5
 800570c:	dcf2      	bgt.n	80056f4 <_printf_i+0x1e8>
 800570e:	e7eb      	b.n	80056e8 <_printf_i+0x1dc>
 8005710:	2500      	movs	r5, #0
 8005712:	f104 0919 	add.w	r9, r4, #25
 8005716:	e7f5      	b.n	8005704 <_printf_i+0x1f8>
 8005718:	2b00      	cmp	r3, #0
 800571a:	d1ac      	bne.n	8005676 <_printf_i+0x16a>
 800571c:	7803      	ldrb	r3, [r0, #0]
 800571e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005722:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005726:	e76c      	b.n	8005602 <_printf_i+0xf6>
 8005728:	08005b56 	.word	0x08005b56
 800572c:	08005b67 	.word	0x08005b67

08005730 <_sbrk_r>:
 8005730:	b538      	push	{r3, r4, r5, lr}
 8005732:	2300      	movs	r3, #0
 8005734:	4c05      	ldr	r4, [pc, #20]	; (800574c <_sbrk_r+0x1c>)
 8005736:	4605      	mov	r5, r0
 8005738:	4608      	mov	r0, r1
 800573a:	6023      	str	r3, [r4, #0]
 800573c:	f7fb fc66 	bl	800100c <_sbrk>
 8005740:	1c43      	adds	r3, r0, #1
 8005742:	d102      	bne.n	800574a <_sbrk_r+0x1a>
 8005744:	6823      	ldr	r3, [r4, #0]
 8005746:	b103      	cbz	r3, 800574a <_sbrk_r+0x1a>
 8005748:	602b      	str	r3, [r5, #0]
 800574a:	bd38      	pop	{r3, r4, r5, pc}
 800574c:	20002f38 	.word	0x20002f38

08005750 <memchr>:
 8005750:	b510      	push	{r4, lr}
 8005752:	b2c9      	uxtb	r1, r1
 8005754:	4402      	add	r2, r0
 8005756:	4290      	cmp	r0, r2
 8005758:	4603      	mov	r3, r0
 800575a:	d101      	bne.n	8005760 <memchr+0x10>
 800575c:	2300      	movs	r3, #0
 800575e:	e003      	b.n	8005768 <memchr+0x18>
 8005760:	781c      	ldrb	r4, [r3, #0]
 8005762:	3001      	adds	r0, #1
 8005764:	428c      	cmp	r4, r1
 8005766:	d1f6      	bne.n	8005756 <memchr+0x6>
 8005768:	4618      	mov	r0, r3
 800576a:	bd10      	pop	{r4, pc}

0800576c <memmove>:
 800576c:	4288      	cmp	r0, r1
 800576e:	b510      	push	{r4, lr}
 8005770:	eb01 0302 	add.w	r3, r1, r2
 8005774:	d807      	bhi.n	8005786 <memmove+0x1a>
 8005776:	1e42      	subs	r2, r0, #1
 8005778:	4299      	cmp	r1, r3
 800577a:	d00a      	beq.n	8005792 <memmove+0x26>
 800577c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005780:	f802 4f01 	strb.w	r4, [r2, #1]!
 8005784:	e7f8      	b.n	8005778 <memmove+0xc>
 8005786:	4283      	cmp	r3, r0
 8005788:	d9f5      	bls.n	8005776 <memmove+0xa>
 800578a:	1881      	adds	r1, r0, r2
 800578c:	1ad2      	subs	r2, r2, r3
 800578e:	42d3      	cmn	r3, r2
 8005790:	d100      	bne.n	8005794 <memmove+0x28>
 8005792:	bd10      	pop	{r4, pc}
 8005794:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005798:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800579c:	e7f7      	b.n	800578e <memmove+0x22>

0800579e <__malloc_lock>:
 800579e:	4770      	bx	lr

080057a0 <__malloc_unlock>:
 80057a0:	4770      	bx	lr

080057a2 <_realloc_r>:
 80057a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80057a4:	4607      	mov	r7, r0
 80057a6:	4614      	mov	r4, r2
 80057a8:	460e      	mov	r6, r1
 80057aa:	b921      	cbnz	r1, 80057b6 <_realloc_r+0x14>
 80057ac:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80057b0:	4611      	mov	r1, r2
 80057b2:	f7ff bc89 	b.w	80050c8 <_malloc_r>
 80057b6:	b922      	cbnz	r2, 80057c2 <_realloc_r+0x20>
 80057b8:	f7ff fc3a 	bl	8005030 <_free_r>
 80057bc:	4625      	mov	r5, r4
 80057be:	4628      	mov	r0, r5
 80057c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80057c2:	f000 f814 	bl	80057ee <_malloc_usable_size_r>
 80057c6:	42a0      	cmp	r0, r4
 80057c8:	d20f      	bcs.n	80057ea <_realloc_r+0x48>
 80057ca:	4621      	mov	r1, r4
 80057cc:	4638      	mov	r0, r7
 80057ce:	f7ff fc7b 	bl	80050c8 <_malloc_r>
 80057d2:	4605      	mov	r5, r0
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d0f2      	beq.n	80057be <_realloc_r+0x1c>
 80057d8:	4631      	mov	r1, r6
 80057da:	4622      	mov	r2, r4
 80057dc:	f7ff fb7a 	bl	8004ed4 <memcpy>
 80057e0:	4631      	mov	r1, r6
 80057e2:	4638      	mov	r0, r7
 80057e4:	f7ff fc24 	bl	8005030 <_free_r>
 80057e8:	e7e9      	b.n	80057be <_realloc_r+0x1c>
 80057ea:	4635      	mov	r5, r6
 80057ec:	e7e7      	b.n	80057be <_realloc_r+0x1c>

080057ee <_malloc_usable_size_r>:
 80057ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f2:	1f18      	subs	r0, r3, #4
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	bfbc      	itt	lt
 80057f8:	580b      	ldrlt	r3, [r1, r0]
 80057fa:	18c0      	addlt	r0, r0, r3
 80057fc:	4770      	bx	lr
	...

08005800 <_init>:
 8005800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005802:	bf00      	nop
 8005804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005806:	bc08      	pop	{r3}
 8005808:	469e      	mov	lr, r3
 800580a:	4770      	bx	lr

0800580c <_fini>:
 800580c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800580e:	bf00      	nop
 8005810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005812:	bc08      	pop	{r3}
 8005814:	469e      	mov	lr, r3
 8005816:	4770      	bx	lr
